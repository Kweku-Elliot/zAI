{"file_contents":{"capacitor.config.ts":{"content":"import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.zAI.ai',\n  appName: 'zAI',\n  webDir: 'dist/public'\n};\n\nexport default config;\n","size_bytes":182},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: 'class',\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2821},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      \"/api\": {\n        target: \"http://127.0.0.1:3000\",\n        changeOrigin: true,\n      },\n      \"/ws\": {\n        target: \"http://127.0.0.1:3000\",\n        changeOrigin: true,\n        ws: true,\n      },\n    },\n  },\n});\n","size_bytes":1364},"attached_assets/API_ENDPOINTS_README_1758924303249.md":{"content":"## ZenuxAI API Endpoints Overview\r\n\r\n### Per-User Memory & Conversation Support\r\n\r\n- Most endpoints accept a `user_id` (or `user`) and `conversation_id` field.\r\n- Each userâ€™s memory and conversation history are isolated: responses and context are tailored per user.\r\n- To enable conversation threading, always send the same `conversation_id` for a session.\r\n\r\n### How to Make Requests\r\n\r\n**Authentication:**  \r\n- Pass your API key in the `Authorization` header as `Bearer <API_KEY>` or in `X-API-Key`.\r\n\r\n**Request Example (JSON):**\r\n```json\r\n{\r\n  \"message\": \"What is the capital of France?\",\r\n  \"conversation_id\": \"conv-12345\",\r\n  \"user_id\": \"user-abc\"\r\n}\r\n```\r\n\r\n**File Upload Example (multipart/form-data):**\r\n- For endpoints like `/api/file/analyze` or `/upload`, use form-data with a `file` field and optional `prompt`.\r\n\r\n### Key Endpoints\r\n\r\n| Endpoint                       | Method | Description                                 | Per-User Memory | Data Format         |\r\n|---------------------------------|--------|---------------------------------------------|-----------------|---------------------|\r\n| `/api/chat`                     | POST   | Main chat, enhanced memory & context        | Yes             | JSON                |\r\n| `/chat`                         | POST   | Legacy chat, per-user memory                | Yes             | JSON                |\r\n| `/v1/chat/completions`          | POST   | OpenAI-compatible, enhanced_v2 by default   | Yes             | JSON                |\r\n| `/z1/chat/completions`          | POST   | ZenuxAI-specific, full enhanced features    | Yes             | JSON                |\r\n| `/upload`                       | POST   | File upload, per-user limits                | Yes             | multipart/form-data |\r\n| `/api/file/analyze`             | POST   | Analyze uploaded file                       | Yes             | multipart/form-data |\r\n| `/v1/images/generate`           | POST   | Generate images from prompt                 | Yes             | JSON                |\r\n| `/api/research`                 | POST   | Parallel research subsystems                | Yes             | JSON                |\r\n| `/dev-dashboard`                | GET    | Developer dashboard (HTML)                  | N/A             | HTML                |\r\n| `/dev/analytics`                | GET    | Analytics for dashboard                     | Yes             | JSON                |\r\n\r\n### Data Formats\r\n\r\n- **Chat/Completions:**  \r\n  - Request: JSON with `message`, `conversation_id`, `user_id`, optional `files`.\r\n  - Response: Streamed or plain text, plus headers for usage info.\r\n\r\n- **File Upload/Analysis:**  \r\n  - Request: multipart/form-data with `file` and optional `prompt`.\r\n  - Response: JSON with analysis, metadata.\r\n\r\n- **Image Generation:**  \r\n  - Request: JSON with `prompt`, `model`, `n`, `size`, `quality`.\r\n  - Response: JSON with image URLs.\r\n\r\n- **Research:**  \r\n  - Request: JSON with `query`.\r\n  - Response: JSON with results from subsystems.\r\n\r\n### Example: Per-User Chat Request\r\n\r\n```http\r\nPOST /api/chat\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: application/json\r\n\r\n{\r\n  \"message\": \"Show my last 5 conversations.\",\r\n  \"conversation_id\": \"conv-abc123\",\r\n  \"user_id\": \"user-xyz\"\r\n}\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"response\": \"...\",\r\n  \"memory\": {...},\r\n  \"conversation_id\": \"conv-abc123\",\r\n  \"user_id\": \"user-xyz\"\r\n}\r\n```\r\n\r\n---\r\n\r\n## Detailed Endpoint Examples\r\n\r\n### 1. Chat Endpoint (`/api/chat`)\r\n\r\n**Request:**\r\n```http\r\nPOST /api/chat\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: application/json\r\n\r\n{\r\n  \"message\": \"Summarize my last 3 uploads.\",\r\n  \"conversation_id\": \"conv-abc123\",\r\n  \"user_id\": \"user-xyz\",\r\n  \"files\": [\"report1.pdf\", \"report2.pdf\"],\r\n  \"enhanced\": true,\r\n  \"enhanced_v2\": true\r\n}\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"response\": \"Here are summaries of your last 3 uploads...\",\r\n  \"memory\": {\r\n    \"recent_uploads\": [\r\n      {\"file\": \"report1.pdf\", \"summary\": \"...\"},\r\n      {\"file\": \"report2.pdf\", \"summary\": \"...\"\r\n    ]\r\n  },\r\n  \"conversation_id\": \"conv-abc123\",\r\n  \"user_id\": \"user-xyz\"\r\n}\r\n```\r\n\r\n---\r\n\r\n### 2. File Upload & Analysis (`/api/file/analyze`)\r\n\r\n**Request (multipart/form-data):**\r\n```\r\nPOST /api/file/analyze\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: multipart/form-data\r\n\r\nFields:\r\n- file: [select file]\r\n- prompt: \"Extract all tables and summarize.\"\r\n- enhanced_v2: true\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"analysis\": \"File 'data.xlsx' contains 4 tables. Summary: ...\",\r\n  \"metadata\": {\r\n    \"fileName\": \"data.xlsx\",\r\n    \"fileSize\": 204800,\r\n    \"fileType\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    \"timestamp\": \"2025-09-26T12:34:56\"\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n### 3. Image Generation (`/v1/images/generate`)\r\n\r\n**Request:**\r\n```http\r\nPOST /v1/images/generate\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: application/json\r\n\r\n{\r\n  \"prompt\": \"A futuristic city skyline at sunset\",\r\n  \"model\": \"zenux-dalle-3\",\r\n  \"n\": 2,\r\n  \"size\": \"1024x1024\",\r\n  \"quality\": \"standard\",\r\n  \"user_id\": \"user-xyz\",\r\n  \"enhanced_v2\": true\r\n}\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"data\": [\r\n    {\"url\": \"https://placehold.co/1024x1024?text=A+futuristic+city+skyline+at+sunset\"},\r\n    {\"url\": \"https://placehold.co/1024x1024?text=A+futuristic+city+skyline+at+sunset\"}\r\n  ]\r\n}\r\n```\r\n\r\n---\r\n\r\n### 4. Research Endpoint (`/api/research`)\r\n\r\n**Request:**\r\n```http\r\nPOST /api/research\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: application/json\r\n\r\n{\r\n  \"query\": \"Latest trends in AI for healthcare\",\r\n  \"user_id\": \"user-xyz\",\r\n  \"enhanced_v2\": true\r\n}\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"query\": \"Latest trends in AI for healthcare\",\r\n  \"results\": {\r\n    \"llm\": \"LLM result for 'Latest trends in AI for healthcare'\",\r\n    \"rag\": \"RAG result for 'Latest trends in AI for healthcare'\",\r\n    \"kg\": \"KG result for 'Latest trends in AI for healthcare'\",\r\n    \"web\": \"Web result for 'Latest trends in AI for healthcare'\",\r\n    \"memory\": \"Memory result for 'Latest trends in AI for healthcare'\"\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n### 5. Conversation Threading\r\n\r\n**Request:**\r\n```http\r\nPOST /api/chat\r\nAuthorization: Bearer ZX-XXXXXXXXXXXX\r\nContent-Type: application/json\r\n\r\n{\r\n  \"message\": \"Continue our last discussion about quantum computing.\",\r\n  \"conversation_id\": \"conv-quantum-001\",\r\n  \"user_id\": \"user-xyz\",\r\n  \"enhanced_v2\": true\r\n}\r\n```\r\n\r\n**Response:**\r\n```json\r\n{\r\n  \"response\": \"Picking up from our last discussion, quantum computing enables...\",\r\n  \"memory\": {\r\n    \"previous_topic\": \"quantum computing\"\r\n  },\r\n  \"conversation_id\": \"conv-quantum-001\",\r\n  \"user_id\": \"user-xyz\"\r\n}\r\n```\r\n\r\n---\r\n\r\n","size_bytes":6678},"server/index.ts":{"content":"import \"dotenv/config\"; // Load environment variables\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    // Only serve static files in production\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 3001 for backend (frontend uses 5000).\n  // this serves both the API and the client.\n  // Frontend will be served on port 5000 by Vite in dev mode.\n  const port = parseInt(process.env.PORT || '3001', 10);\n  // `reusePort` is not supported on all platforms (notably Windows).\n  // Only set it when running on platforms that support it.\n  const listenOptions: any = {\n    port,\n    host: \"0.0.0.0\",\n  };\n\n  if (process.platform !== \"win32\") {\n    listenOptions.reusePort = true;\n  }\n\n  server.listen(listenOptions, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2428},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport { storage } from \"./storage\";\n// import { openAIService } from \"./services/openai\";\n// import { stripeService } from \"./services/stripe\";\n// import { encryptionService } from \"./services/encryption\";\nimport { zenuxAIV2Service } from \"./services/zenux\"; // Import ZenuxAIV2Service\nimport { insertMessageSchema, insertChatSchema, insertTransactionSchema, insertUserSchema } from \"@shared/schema\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Test route\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Chat routes\n  app.post(\"/api/chats\", async (req, res) => {\n    try {\n      const chatData = insertChatSchema.parse(req.body);\n      const chat = await storage.createChat(chatData);\n      res.json({ chat });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/chats/:userId\", async (req, res) => {\n    try {\n      const chats = await storage.getChatsByUserId(req.params.userId);\n      res.json({ chats });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Message routes\n  app.post(\"/api/messages\", async (req, res) => {\n    try {\n      const messageData = insertMessageSchema.parse(req.body);\n      \n      // Encrypt message if required\n      // if (messageData.encrypted) {\n      //   messageData.content = await encryptionService.encrypt(messageData.content, \"user-key\");\n      // }\n      \n      const message = await storage.createMessage(messageData);\n      res.json({ message });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/messages/:chatId\", async (req, res) => {\n    try {\n      const messages = await storage.getMessagesByChatId(req.params.chatId);\n      \n      // Decrypt messages if needed\n      // const decryptedMessages = await Promise.all(\n      //   messages.map(async (message) => {\n      //     if (message.encrypted) {\n      //       try {\n      //         message.content = await encryptionService.decrypt(message.content, \"user-key\");\n      //       } catch (error) {\n      //         console.error(\"Failed to decrypt message:\", error);\n      //       }\n      //     }\n      //     return message;\n      //   })\n      // );\n      \n      res.json({ messages: messages /*decryptedMessages*/ });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // AI chat route (enhanced v2 streaming)\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      // DEBUG: log incoming AI chat request for diagnostics\n      try {\n        console.log('[/api/ai/chat] incoming body:', JSON.stringify(req.body));\n      } catch (_err) {\n        // reference the caught error to satisfy linters\n        void _err;\n        console.log('[/api/ai/chat] incoming body (non-serializable)');\n      }\n      console.log('[/api/ai/chat] Authorization header present:', !!(req.headers.authorization || req.headers.Authorization));\n\n      const { message, conversation_id, conversationId, chatId, user_id, userId } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // accept either conversation_id or conversationId or chatId\n      const convId = (conversation_id || conversationId || chatId) || `conv-${Date.now()}`;\n      // Try to derive user id from Authorization header (Bearer token) via Supabase server client.\n      // Prefer server-verified token; fall back to provided user_id only if token not present.\n      let uid = (user_id || userId) || 'anonymous';\n      const authHeader = req.headers.authorization || req.headers.Authorization;\n      if (authHeader && typeof authHeader === 'string' && authHeader.startsWith('Bearer ')) {\n        const token = authHeader.split(' ')[1];\n        try {\n          const { data } = await (await import('./supabase')).supabaseServer.auth.getUser(token as any);\n          if (data?.user?.id) {\n            uid = data.user.id;\n          } else {\n            // token invalid â€” reject request\n            return res.status(401).json({ message: 'Invalid or expired token' });\n          }\n        } catch (err) {\n          void err;\n          return res.status(401).json({ message: 'Invalid or expired token' });\n        }\n      } else {\n        // No token: for safety we could reject; for now log and fall back to provided user_id\n        console.warn('No Authorization bearer token provided; falling back to provided user_id (less secure).');\n      }\n\n      // Use ZenuxAIV2Service for streaming chat\n      const chatStream = await zenuxAIV2Service.chat({\n        message,\n        user_id: uid,\n        conversation_id: convId,\n      });\n\n      res.setHeader('Content-Type', 'text/event-stream');\n      res.setHeader('Cache-Control', 'no-cache');\n      res.setHeader('Connection', 'keep-alive');\n\n      chatStream.on('data', (chunk) => {\n        res.write(`data: ${chunk.toString()}\\n\\n`);\n      });\n\n      chatStream.on('end', () => {\n        res.end();\n      });\n\n      chatStream.on('error', (error) => {\n        console.error('Zenux chat stream error:', error);\n        try {\n          res.status(500).write(`data: {\"error\": \"Failed to stream AI response: ${error.message}\"}\\n\\n`);\n  } catch (_err) { void _err; }\n        res.end();\n      });\n\n    } catch (error: any) {\n      console.error(\"AI chat error:\", error);\n      res.status(500).json({ message: \"Failed to generate AI response\" });\n    }\n  });\n\n  /*\n  // AI image generation\n  app.post(\"/api/ai/generate-image\", async (req, res) => {\n    try {\n      const { prompt } = req.body;\n      \n      if (!prompt) {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n      const result = await openAIService.generateImage(prompt);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Image generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate image\" });\n    }\n  });\n  // AI video generation (mock endpoint)\n  app.post(\"/api/ai/generate-video\", async (req, res) => {\n    try {\n      const { prompt, duration } = req.body;\n      \n      if (!prompt) {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n      // Mock video generation - in production, integrate with video generation API\n      const result = {\n        url: `https://mock-video-url.com/${Date.now()}.mp4`,\n        duration: duration || 5,\n        prompt,\n      };\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Video generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate video\" });\n    }\n  });\n  // File processing with AI\n  app.post(\"/api/ai/process-file\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      const { prompt } = req.body;\n      const result = await openAIService.analyzeFile(req.file, prompt);\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error(\"File processing error:\", error);\n      res.status(500).json({ message: \"Failed to process file\" });\n    }\n  });\n  // Audio transcription\n  app.post(\"/api/ai/transcribe\", upload.single('audio'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No audio file uploaded\" });\n      }\n      const result = await openAIService.transcribeAudio(req.file);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Audio transcription error:\", error);\n      res.status(500).json({ message: \"Failed to transcribe audio\" });\n    }\n  });\n  // Transaction validation\n  app.post(\"/api/ai/validate-transaction\", async (req, res) => {\n    try {\n      const validation = await openAIService.validateTransaction(req.body);\n      res.json(validation);\n    } catch (error: any) {\n      console.error(\"Transaction validation error:\", error);\n      res.status(500).json({ message: \"Failed to validate transaction\" });\n    }\n  });\n  // Generate confirmation prompt\n  app.post(\"/api/ai/confirmation-prompt\", async (req, res) => {\n    try {\n      const prompt = await openAIService.generateConfirmationPrompt(req.body);\n      res.json({ prompt });\n    } catch (error: any) {\n      console.error(\"Confirmation prompt error:\", error);\n      res.status(500).json({ message: \"Failed to generate confirmation prompt\" });\n    }\n  });\n  // Smart replies\n  app.post(\"/api/ai/smart-replies\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      const replies = await openAIService.generateSmartReplies(message);\n      res.json({ replies });\n    } catch (error: any) {\n      console.error(\"Smart replies error:\", error);\n      res.status(500).json({ message: \"Failed to generate smart replies\" });\n    }\n  });\n  */\n\n  // Transaction routes\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.parse(req.body);\n      \n      // Validate with AI before processing\n      // const validation = await openAIService.validateTransaction(transactionData);\n      // if (!validation.isValid) {\n      //   return res.status(400).json({ message: validation.reason });\n      // }\n      \n      const transaction = await storage.createTransaction({\n        ...transactionData,\n        aiValidated: true,\n      });\n      \n      res.json({ transaction });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/transactions/:userId\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactionsByUserId(req.params.userId);\n      res.json({ transactions });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Group wallet routes\n  app.post(\"/api/group-wallets\", async (req, res) => {\n    try {\n      const walletData = req.body;\n      const wallet = await storage.createGroupWallet(walletData);\n      res.json({ wallet });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/group-wallets/:userId\", async (req, res) => {\n    try {\n      const wallets = await storage.getGroupWalletsByUserId(req.params.userId);\n      res.json({ wallets });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  /*\n  // Stripe payment routes\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount } = req.body;\n      const paymentIntent = await stripeService.createPaymentIntent(amount);\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n  */\n\n  // app.post('/api/create-subscription', async (req, res) => {\n  //   try {\n  //     const { userId, priceId } = req.body;\n  //     const subscription = await stripeService.createSubscription(userId, priceId);\n  //     let clientSecret: string | undefined;\n  //     // Ensure latest_invoice is an object (not a string ID) and not null before accessing its properties\n  //     if (typeof subscription.latest_invoice === 'object' && subscription.latest_invoice !== null) {\n  //       clientSecret = subscription.latest_invoice.payment_intent?.client_secret ?? undefined;\n  //     }\n\n  //     res.json({ \n  //       subscriptionId: subscription.id,\n  //       clientSecret: clientSecret \n  //     });\n  //   } catch (error: any) {\n  //     res.status(400).json({ error: { message: error.message } });\n  //   }\n  // });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time features\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle different message types\n        switch (data.type) {\n          case 'chat_message':\n            // Broadcast message to other clients\n            wss.clients.forEach((client) => {\n              if (client !== ws && client.readyState === client.OPEN) {\n                client.send(JSON.stringify({\n                  type: 'new_message',\n                  data: data.payload\n                }));\n              }\n            });\n            break;\n            \n          case 'transaction_update':\n            // Broadcast transaction updates\n            wss.clients.forEach((client) => {\n              if (client !== ws && client.readyState === client.OPEN) {\n                client.send(JSON.stringify({\n                  type: 'transaction_status',\n                  data: data.payload\n                }));\n              }\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":14220},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Chat, \n  type InsertChat,\n  type Message,\n  type InsertMessage,\n  type Transaction,\n  type InsertTransaction,\n  type GroupWallet,\n  type InsertGroupWallet,\n  type GiftCredit,\n  type InsertGiftCredit\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Chat methods\n  getChat(id: string): Promise<Chat | undefined>;\n  getChatsByUserId(userId: string): Promise<Chat[]>;\n  createChat(chat: InsertChat): Promise<Chat>;\n  updateChat(id: string, updates: Partial<Chat>): Promise<Chat>;\n  deleteChat(id: string): Promise<void>;\n  \n  // Message methods\n  getMessage(id: string): Promise<Message | undefined>;\n  getMessagesByChatId(chatId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  updateMessage(id: string, updates: Partial<Message>): Promise<Message>;\n  deleteMessage(id: string): Promise<void>;\n  \n  // Transaction methods\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getTransactionsByUserId(userId: string): Promise<Transaction[]>;\n  getTransactionsByWalletId(walletId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction>;\n  \n  // Group wallet methods\n  getGroupWallet(id: string): Promise<GroupWallet | undefined>;\n  getGroupWalletsByUserId(userId: string): Promise<GroupWallet[]>;\n  createGroupWallet(wallet: InsertGroupWallet): Promise<GroupWallet>;\n  updateGroupWallet(id: string, updates: Partial<GroupWallet>): Promise<GroupWallet>;\n  \n  // Gift credit methods\n  getGiftCredit(id: string): Promise<GiftCredit | undefined>;\n  getGiftCreditsByUserId(userId: string): Promise<GiftCredit[]>;\n  createGiftCredit(giftCredit: InsertGiftCredit): Promise<GiftCredit>;\n  updateGiftCredit(id: string, updates: Partial<GiftCredit>): Promise<GiftCredit>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private chats: Map<string, Chat> = new Map();\n  private messages: Map<string, Message> = new Map();\n  private transactions: Map<string, Transaction> = new Map();\n  private groupWallets: Map<string, GroupWallet> = new Map();\n  private giftCredits: Map<string, GiftCredit> = new Map();\n\n  constructor() {\n    // Initialize with some mock data\n    this.initializeMockData();\n  }\n\n  private initializeMockData() {\n    // Create a default user for testing\n    const defaultUser: User = {\n      id: randomUUID(),\n      username: \"testuser\",\n      email: \"test@zenux.ai\",\n      password: \"hashed_password\",\n      displayName: \"Test User\",\n      bio: \"AI enthusiast and early adopter\",\n      avatar: null,\n      plan: \"free\",\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      messagesUsed: 28,\n      filesUploaded: 1,\n      voiceMinutesUsed: 0,\n      apiCallsUsed: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(defaultUser.id, defaultUser);\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      plan: \"free\",\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      messagesUsed: 0,\n      filesUploaded: 0,\n      voiceMinutesUsed: 0,\n      apiCallsUsed: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Chat methods\n  async getChat(id: string): Promise<Chat | undefined> {\n    return this.chats.get(id);\n  }\n\n  async getChatsByUserId(userId: string): Promise<Chat[]> {\n    return Array.from(this.chats.values())\n      .filter(chat => chat.userId === userId)\n      .sort((a, b) => new Date(b.lastMessageAt!).getTime() - new Date(a.lastMessageAt!).getTime());\n  }\n\n  async createChat(insertChat: InsertChat): Promise<Chat> {\n    const id = randomUUID();\n    const chat: Chat = {\n      ...insertChat,\n      id,\n      lastMessageAt: new Date(),\n      createdAt: new Date(),\n    };\n    \n    this.chats.set(id, chat);\n    return chat;\n  }\n\n  async updateChat(id: string, updates: Partial<Chat>): Promise<Chat> {\n    const chat = this.chats.get(id);\n    if (!chat) {\n      throw new Error(\"Chat not found\");\n    }\n    \n    const updatedChat = { ...chat, ...updates };\n    this.chats.set(id, updatedChat);\n    return updatedChat;\n  }\n\n  async deleteChat(id: string): Promise<void> {\n    this.chats.delete(id);\n    \n    // Also delete all messages in this chat\n    const messages = Array.from(this.messages.values()).filter(msg => msg.chatId === id);\n    for (const message of messages) {\n      this.messages.delete(message.id);\n    }\n  }\n\n  // Message methods\n  async getMessage(id: string): Promise<Message | undefined> {\n    return this.messages.get(id);\n  }\n\n  async getMessagesByChatId(chatId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(message => message.chatId === chatId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      encrypted: insertMessage.encrypted || false,\n      aiValidated: insertMessage.aiValidated || false,\n      createdAt: new Date(),\n    };\n    \n    this.messages.set(id, message);\n    \n    // Update chat's last message time\n    const chat = this.chats.get(message.chatId);\n    if (chat) {\n      await this.updateChat(chat.id, { lastMessageAt: new Date() });\n    }\n    \n    return message;\n  }\n\n  async updateMessage(id: string, updates: Partial<Message>): Promise<Message> {\n    const message = this.messages.get(id);\n    if (!message) {\n      throw new Error(\"Message not found\");\n    }\n    \n    const updatedMessage = { ...message, ...updates };\n    this.messages.set(id, updatedMessage);\n    return updatedMessage;\n  }\n\n  async deleteMessage(id: string): Promise<void> {\n    this.messages.delete(id);\n  }\n\n  // Transaction methods\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    return this.transactions.get(id);\n  }\n\n  async getTransactionsByUserId(userId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(tx => tx.fromUserId === userId || tx.toUserId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getTransactionsByWalletId(walletId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(tx => tx.walletId === walletId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = {\n      ...insertTransaction,\n      id,\n      status: insertTransaction.status || \"pending\",\n      aiValidated: insertTransaction.aiValidated || false,\n      offlineQueued: insertTransaction.offlineQueued || false,\n      createdAt: new Date(),\n      confirmedAt: insertTransaction.status === \"confirmed\" ? new Date() : null,\n    };\n    \n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction> {\n    const transaction = this.transactions.get(id);\n    if (!transaction) {\n      throw new Error(\"Transaction not found\");\n    }\n    \n    const updatedTransaction = { \n      ...transaction, \n      ...updates,\n      confirmedAt: updates.status === \"confirmed\" ? new Date() : transaction.confirmedAt\n    };\n    \n    this.transactions.set(id, updatedTransaction);\n    return updatedTransaction;\n  }\n\n  // Group wallet methods\n  async getGroupWallet(id: string): Promise<GroupWallet | undefined> {\n    return this.groupWallets.get(id);\n  }\n\n  async getGroupWalletsByUserId(userId: string): Promise<GroupWallet[]> {\n    return Array.from(this.groupWallets.values())\n      .filter(wallet => wallet.createdBy === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createGroupWallet(insertWallet: InsertGroupWallet): Promise<GroupWallet> {\n    const id = randomUUID();\n    const wallet: GroupWallet = {\n      ...insertWallet,\n      id,\n      balance: insertWallet.balance || \"0.00\",\n      currency: insertWallet.currency || \"GHS\",\n      encrypted: insertWallet.encrypted !== false,\n      createdAt: new Date(),\n    };\n    \n    this.groupWallets.set(id, wallet);\n    return wallet;\n  }\n\n  async updateGroupWallet(id: string, updates: Partial<GroupWallet>): Promise<GroupWallet> {\n    const wallet = this.groupWallets.get(id);\n    if (!wallet) {\n      throw new Error(\"Group wallet not found\");\n    }\n    \n    const updatedWallet = { ...wallet, ...updates };\n    this.groupWallets.set(id, updatedWallet);\n    return updatedWallet;\n  }\n\n  // Gift credit methods\n  async getGiftCredit(id: string): Promise<GiftCredit | undefined> {\n    return this.giftCredits.get(id);\n  }\n\n  async getGiftCreditsByUserId(userId: string): Promise<GiftCredit[]> {\n    return Array.from(this.giftCredits.values())\n      .filter(credit => credit.fromUserId === userId || credit.toUserId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createGiftCredit(insertGiftCredit: InsertGiftCredit): Promise<GiftCredit> {\n    const id = randomUUID();\n    const giftCredit: GiftCredit = {\n      ...insertGiftCredit,\n      id,\n      status: insertGiftCredit.status || \"pending\",\n      aiGenerated: insertGiftCredit.aiGenerated || false,\n      createdAt: new Date(),\n      expiresAt: insertGiftCredit.expiresAt || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n    \n    this.giftCredits.set(id, giftCredit);\n    return giftCredit;\n  }\n\n  async updateGiftCredit(id: string, updates: Partial<GiftCredit>): Promise<GiftCredit> {\n    const giftCredit = this.giftCredits.get(id);\n    if (!giftCredit) {\n      throw new Error(\"Gift credit not found\");\n    }\n    \n    const updatedGiftCredit = { ...giftCredit, ...updates };\n    this.giftCredits.set(id, updatedGiftCredit);\n    return updatedGiftCredit;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11453},"server/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst SUPABASE_URL = process.env.SUPABASE_URL;\nconst SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error('Supabase server environment variables are not set');\n}\n\nexport const supabaseServer = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);\nexport default supabaseServer;\n","size_bytes":418},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\n\nconst viteLogger = createLogger();\n\n// Helper function for logging\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\n// Vite dev setup\nexport async function setupVite(app: Express, server: Server) {\n  const __filename = fileURLToPath(import.meta.url);\n  const __dirname = path.dirname(__filename);\n\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  // Vite middleware\n  app.use(vite.middlewares);\n\n  // Catch-all route for SPA\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n\n      // Debug path\n      console.log(\"Serving index.html from:\", clientTemplate);\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`\n      );\n\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (err) {\n      vite.ssrFixStacktrace(err as Error);\n      next(err);\n    }\n  });\n}\n\n// Production static serve\nexport function serveStatic(app: Express) {\n  const __filename = fileURLToPath(import.meta.url);\n  const __dirname = path.dirname(__filename);\n\n  const distPath = path.resolve(__dirname, \"..\", \"dist\"); // or \"public\" if you build there\n  if (!fs.existsSync(distPath)) {\n    throw new Error(`Could not find build directory: ${distPath}`);\n  }\n\n  app.use(express.static(distPath));\n\n  // Fallback to index.html\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2537},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { useLocation } from 'wouter';\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AppProvider } from \"@/contexts/AppContext\";\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\nimport BillingPage from \"@/pages/billing\";\nimport SettingsPage from \"@/pages/settings\";\nimport AppearanceSettingsPage from \"@/pages/appearance\";\nimport WalletPage from \"@/pages/credit\";\nimport SendReceivePage from \"@/pages/send-receive\";\nimport CheckoutPage from \"@/pages/checkout\";\nimport ProfileSettingsPage from \"@/pages/profile\";\nimport LanguageSettingsPage from \"@/pages/language\";\nimport NotificationSettingsPage from \"@/pages/notifications\";\nimport PrivacySecuritySettingsPage from \"@/pages/privacy-security\";\nimport AboutSupportSettingsPage from \"@/pages/about-support\";\nimport UsageAnalyticsSettingsPage from \"@/pages/usage-analytics\";\nimport ReceiptPage from \"@/pages/receipt\";\nimport PaymentConfirmedPage from \"@/pages/payment-confirmed\";\nimport SplashScreen from \"@/pages/splash\";\nimport OnboardingPage from \"@/pages/onboarding\";\nimport PlanComparisonPage from \"@/pages/plan-comparison\";\nimport ImageVideoGenPage from \"@/pages/image-video-gen\";\nimport ContactsPage from \"@/pages/contacts\";\nimport NotFound from \"@/pages/not-found\";\nimport ChatPage from \"@/pages/Chat\";\nimport CrackTheCodePage from \"@/pages/crack-the-code\";\nimport CodeExecutionPage from \"@/pages/code-execution\";\nimport ProjectSetupScreen from \"@/pages/project-setup\";\nimport ScaffoldGenerator from \"@/pages/generation-ui\";\n\ntype Page =\n  | 'home'\n  | 'login'\n  | 'signup'\n  | 'billing'\n  | 'settings'\n  | 'appearance'\n  | 'wallet'\n  | 'send-receive'\n  | 'checkout'\n  | 'profile'\n  | 'language'\n  | 'notifications'\n  | 'privacy-security'\n  | 'about-support'\n  | 'usage-analytics'\n  | 'receipt'\n  | 'payment-confirmed'\n  | 'splash'\n  | 'onboarding'\n  | 'plan-comparison'\n  | 'image-video-gen'\n  | 'contacts'\n  | 'crack-the-code'\n  | 'code-execution'\n  | 'project-setup'\n  | 'generation-ui'\n  | 'credit';\n\nfunction Router() {\n  // derive current page from the URL so wouter navigation works\n  const [location] = useLocation();\n  const currentPage: Page = location === '/' ? 'home' : (location.replace(/^\\//, '') as Page);\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'home':\n        return <ChatPage />;\n      case 'login':\n        return <LoginPage />;\n      case 'signup':\n        return <SignupPage />;\n      case 'billing':\n        return <BillingPage />;\n      case 'settings':\n        return <SettingsPage />;\n      case 'appearance':\n        return <AppearanceSettingsPage />;\n      case 'wallet':\n        return <WalletPage />;\n      case 'send-receive':\n        return <SendReceivePage />;\n      case 'checkout':\n        return <CheckoutPage />;\n      case 'profile':\n        return <ProfileSettingsPage />;\n      case 'language':\n        return <LanguageSettingsPage />;\n      case 'notifications':\n        return <NotificationSettingsPage />;\n      case 'privacy-security':\n        return <PrivacySecuritySettingsPage />;\n      case 'about-support':\n        return <AboutSupportSettingsPage />;\n      case 'usage-analytics':\n        return <UsageAnalyticsSettingsPage />;\n      case 'receipt':\n        return <ReceiptPage />;\n      case 'payment-confirmed':\n        return <PaymentConfirmedPage />;\n      case 'splash':\n        return <SplashScreen />;\n      case 'onboarding':\n        return <OnboardingPage />;\n      case 'plan-comparison':\n        return <PlanComparisonPage />;\n      case 'image-video-gen':\n        return <ImageVideoGenPage />;\n      case 'contacts':\n        return <ContactsPage />;\n      case 'crack-the-code':\n        return <CrackTheCodePage />;\n      case 'code-execution':\n        return <CodeExecutionPage />;\n      case 'project-setup':\n        return <ProjectSetupScreen />;\n      case 'generation-ui':\n        return <ScaffoldGenerator />;\n      case 'credit':\n        return <WalletPage />;\n      default:\n        // in case of unknown slug, fall back to NotFound\n        return <NotFound />;\n    }\n  };\n\n  return (\n    <Switch>\n  <Route path=\"/\" component={() => <SplashScreen />} />\n  <Route path=\"/home\" component={() => <ChatPage />} />\n  <Route path=\"/login\" component={() => <LoginPage />} />\n  <Route path=\"/signup\" component={() => <SignupPage />} />\n  <Route path=\":page\" component={() => renderPage()} />\n  <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nimport { AuthProvider } from \"@/contexts/AuthContext\";\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AppProvider>\n          <AuthProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </AuthProvider>\n        </AppProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5168},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 12px;\n  \n  /* Light theme colors */\n  --background: hsl(240, 10%, 98%);\n  --foreground: hsl(240, 10%, 9%);\n  --card: hsl(240, 10%, 100%);\n  --card-foreground: hsl(240, 10%, 9%);\n  --popover: hsl(240, 10%, 100%);\n  --popover-foreground: hsl(240, 10%, 9%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 5%, 96%);\n  --secondary-foreground: hsl(240, 6%, 10%);\n  --muted: hsl(240, 5%, 96%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(262, 83%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 6%, 90%);\n  --input: hsl(240, 5%, 96%);\n  --ring: hsl(262, 83%, 58%);\n  \n  /* Chart colors */\n  --chart-1: hsl(262, 83%, 58%);\n  --chart-2: hsl(159, 78%, 58%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Sidebar colors */\n  --sidebar: hsl(240, 10%, 100%);\n  --sidebar-foreground: hsl(240, 10%, 9%);\n  --sidebar-primary: hsl(262, 83%, 58%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(240, 5%, 96%);\n  --sidebar-accent-foreground: hsl(240, 6%, 10%);\n  --sidebar-border: hsl(240, 6%, 90%);\n  --sidebar-ring: hsl(262, 83%, 58%);\n  \n  /* Font families */\n  --font-sans: \"Inter\", \"SF Pro Display\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n}\n\n/* Ensure the app can use full viewport height so Tailwind's h-screen works as expected */\nhtml, body, #root {\n  height: 100%;\n  min-height: 100%;\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(240, 5%, 96%);\n  --card: hsl(240, 10%, 7%);\n  --card-foreground: hsl(240, 5%, 96%);\n  --popover: hsl(240, 10%, 7%);\n  --popover-foreground: hsl(240, 5%, 96%);\n  --primary: hsl(262, 83%, 68%);\n  --primary-foreground: hsl(240, 10%, 4%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(240, 5%, 96%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 4%, 64%);\n  --accent: hsl(262, 83%, 68%);\n  --accent-foreground: hsl(240, 10%, 4%);\n  --destructive: hsl(0, 75%, 65%);\n  --destructive-foreground: hsl(240, 5%, 96%);\n  --border: hsl(240, 4%, 18%);\n  --input: hsl(240, 4%, 16%);\n  --ring: hsl(262, 83%, 68%);\n  \n  /* Sidebar colors for dark mode */\n  --sidebar: hsl(240, 10%, 7%);\n  --sidebar-foreground: hsl(240, 5%, 96%);\n  --sidebar-primary: hsl(262, 83%, 68%);\n  --sidebar-primary-foreground: hsl(240, 10%, 4%);\n  --sidebar-accent: hsl(240, 4%, 16%);\n  --sidebar-accent-foreground: hsl(240, 5%, 96%);\n  --sidebar-border: hsl(240, 4%, 18%);\n  --sidebar-ring: hsl(262, 83%, 68%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .dark .glass-effect {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(213, 94%, 68%) 100%);\n  }\n  \n  .gradient-card {\n    background: linear-gradient(135deg, hsla(var(--primary), 0.1) 0%, hsla(213, 94%, 68%, 0.1) 100%);\n  }\n  \n  .message-bubble {\n    max-width: 85%;\n    word-wrap: break-word;\n  }\n  \n  .voice-wave {\n    animation: voice-pulse 1.5s ease-in-out infinite;\n  }\n  \n  .sidebar-collapsed {\n    transform: translateX(-280px);\n  }\n  \n  .sidebar-expanded {\n    transform: translateX(0);\n  }\n  \n  @media (max-width: 768px) {\n    .sidebar-collapsed {\n      transform: translateX(-100%);\n    }\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .animate-pulse-glow {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n@keyframes voice-pulse {\n  0%, 100% { transform: scaleY(1); }\n  50% { transform: scaleY(2); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n/* Mobile Safe Zones */\n.safe-area-top {\n  padding-top: env(safe-area-inset-top);\n}\n\n.safe-area-bottom {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n.safe-area-left {\n  padding-left: env(safe-area-inset-left);\n}\n\n.safe-area-right {\n  padding-right: env(safe-area-inset-right);\n}\n\n.safe-area-inset {\n  padding-top: env(safe-area-inset-top);\n  padding-bottom: env(safe-area-inset-bottom);\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n}\n\n/* Prevent content from going behind mobile UI elements */\n.mobile-safe-container {\n  min-height: 100vh;\n  min-height: calc(100vh - env(safe-area-inset-top) - env(safe-area-inset-bottom));\n  padding-top: env(safe-area-inset-top);\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-muted;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-border rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-muted-foreground;\n}\n","size_bytes":5197},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/bills.ts":{"content":"import { storage } from \"../storage\";\n\ninterface BillPaymentRequest {\n  userId: string;\n  provider: string;\n  product: string;\n  phoneNumber: string;\n  amount: number;\n  currency: string;\n  paymentMethod: string;\n}\n\ninterface BillPaymentResponse {\n  success: boolean;\n  transactionId?: string;\n  message: string;\n  reference?: string;\n}\n\ninterface PaymentProvider {\n  id: string;\n  name: string;\n  apiUrl: string;\n  apiKey: string;\n  supportedServices: string[];\n}\n\nclass BillsService {\n  private providers: Map<string, PaymentProvider> = new Map();\n\n  constructor() {\n    // Initialize payment providers\n    this.setupProviders();\n  }\n\n  private setupProviders() {\n    // MTN Mobile Money\n    if (process.env.MTN_MOMO_API_KEY) {\n      this.providers.set('mtn_momo', {\n        id: 'mtn_momo',\n        name: 'MTN Mobile Money',\n        apiUrl: 'https://sandbox.momodeveloper.mtn.com',\n        apiKey: process.env.MTN_MOMO_API_KEY,\n        supportedServices: ['telecom', 'utility', 'food']\n      });\n    }\n\n    // Vodafone Cash\n    if (process.env.VODAFONE_CASH_API_KEY) {\n      this.providers.set('vodafone_cash', {\n        id: 'vodafone_cash',\n        name: 'Vodafone Cash',\n        apiUrl: 'https://api.vodafone.com.gh/cash',\n        apiKey: process.env.VODAFONE_CASH_API_KEY,\n        supportedServices: ['telecom', 'utility', 'transport']\n      });\n    }\n\n    // AirtelTigo Money\n    if (process.env.AIRTELTIGO_API_KEY) {\n      this.providers.set('airteltigo_money', {\n        id: 'airteltigo_money',\n        name: 'AirtelTigo Money',\n        apiUrl: 'https://api.airteltigo.com.gh/money',\n        apiKey: process.env.AIRTELTIGO_API_KEY,\n        supportedServices: ['telecom', 'utility']\n      });\n    }\n  }\n\n  async processBillPayment(request: BillPaymentRequest): Promise<BillPaymentResponse> {\n    try {\n      // Validate user\n      const user = await storage.getUser(request.userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found'\n        };\n      }\n\n      // Check user balance (if using wallet)\n      if (request.paymentMethod === 'wallet') {\n        const balance = await this.getUserBalance(request.userId);\n        if (balance < request.amount) {\n          return {\n            success: false,\n            message: 'Insufficient wallet balance'\n          };\n        }\n      }\n\n      // Get payment provider\n      const provider = this.providers.get(request.paymentMethod);\n      if (!provider) {\n        return {\n          success: false,\n          message: 'Payment provider not supported'\n        };\n      }\n\n      // Process payment based on service type\n      const paymentResult = await this.processPaymentWithProvider(provider, request);\n      \n      if (paymentResult.success) {\n        // Record transaction\n        await this.recordTransaction(request, paymentResult.transactionId!);\n        \n        // Update user balance if using wallet\n        if (request.paymentMethod === 'wallet') {\n          await this.deductFromWallet(request.userId, request.amount);\n        }\n\n        // Send confirmation (SMS/Email)\n        await this.sendPaymentConfirmation(request, paymentResult.transactionId!);\n      }\n\n      return paymentResult;\n    } catch (error: any) {\n      console.error('Bill payment error:', error);\n      return {\n        success: false,\n        message: 'Payment processing failed: ' + error.message\n      };\n    }\n  }\n\n  private async processPaymentWithProvider(\n    provider: PaymentProvider, \n    request: BillPaymentRequest\n  ): Promise<BillPaymentResponse> {\n    \n    const transactionId = this.generateTransactionId();\n    \n    try {\n      // Simulate different provider API calls\n      switch (provider.id) {\n        case 'mtn_momo':\n          return await this.processMTNMoMoPayment(request, transactionId);\n        case 'vodafone_cash':\n          return await this.processVodafoneCashPayment(request, transactionId);\n        case 'airteltigo_money':\n          return await this.processAirtelTigoPayment(request, transactionId);\n        default:\n          return {\n            success: false,\n            message: 'Provider not implemented'\n          };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        message: `Provider error: ${error.message}`\n      };\n    }\n  }\n\n  private async processMTNMoMoPayment(\n    request: BillPaymentRequest, \n    transactionId: string\n  ): Promise<BillPaymentResponse> {\n    \n    // Simulate MTN MoMo API call\n    const requestBody = {\n      amount: request.amount,\n      currency: request.currency,\n      externalId: transactionId,\n      payer: {\n        partyIdType: \"MSISDN\",\n        partyId: request.phoneNumber\n      },\n      payerMessage: `Payment for ${request.product}`,\n      payeeNote: `Bill payment - ${request.provider}`\n    };\n\n    // In production, make actual API call to MTN\n    // const response = await fetch(`${provider.apiUrl}/collection/v1_0/requesttopay`, {\n    //   method: 'POST',\n    //   headers: {\n    //     'Authorization': `Bearer ${accessToken}`,\n    //     'X-Reference-Id': transactionId,\n    //     'X-Target-Environment': 'sandbox',\n    //     'Content-Type': 'application/json',\n    //     'Ocp-Apim-Subscription-Key': provider.apiKey\n    //   },\n    //   body: JSON.stringify(requestBody)\n    // });\n\n    // Simulate successful response\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    return {\n      success: true,\n      transactionId,\n      message: 'Payment successful via MTN Mobile Money',\n      reference: `MTN${transactionId.slice(-8)}`\n    };\n  }\n\n  private async processVodafoneCashPayment(\n    request: BillPaymentRequest, \n    transactionId: string\n  ): Promise<BillPaymentResponse> {\n    \n    // Simulate Vodafone Cash API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    return {\n      success: true,\n      transactionId,\n      message: 'Payment successful via Vodafone Cash',\n      reference: `VF${transactionId.slice(-8)}`\n    };\n  }\n\n  private async processAirtelTigoPayment(\n    request: BillPaymentRequest, \n    transactionId: string\n  ): Promise<BillPaymentResponse> {\n    \n    // Simulate AirtelTigo API call\n    await new Promise(resolve => setTimeout(resolve, 1800));\n\n    return {\n      success: true,\n      transactionId,\n      message: 'Payment successful via AirtelTigo Money',\n      reference: `AT${transactionId.slice(-8)}`\n    };\n  }\n\n  private async getUserBalance(userId: string): Promise<number> {\n    // Get user wallet balance from storage\n    const user = await storage.getUser(userId);\n    return user?.walletBalance || 0;\n  }\n\n  private async deductFromWallet(userId: string, amount: number): Promise<void> {\n    // Deduct amount from user wallet\n    const user = await storage.getUser(userId);\n    if (user) {\n      const newBalance = (user.walletBalance || 0) - amount;\n      await storage.updateUser(userId, { walletBalance: newBalance });\n    }\n  }\n\n  private async recordTransaction(\n    request: BillPaymentRequest, \n    transactionId: string\n  ): Promise<void> {\n    \n    const transaction = {\n      id: transactionId,\n      userId: request.userId,\n      type: 'bill_payment',\n      amount: request.amount,\n      currency: request.currency,\n      provider: request.provider,\n      product: request.product,\n      phoneNumber: request.phoneNumber,\n      paymentMethod: request.paymentMethod,\n      status: 'completed',\n      timestamp: new Date().toISOString()\n    };\n\n    // Save transaction record\n    await storage.saveTransaction(transaction);\n  }\n\n  private async sendPaymentConfirmation(\n    request: BillPaymentRequest, \n    transactionId: string\n  ): Promise<void> {\n    \n    // Send SMS confirmation\n    const message = `Your ${request.product} payment of ${request.currency} ${request.amount} has been successful. Reference: ${transactionId.slice(-8)}`;\n    \n    // In production, integrate with SMS service\n    console.log(`SMS to ${request.phoneNumber}: ${message}`);\n  }\n\n  private generateTransactionId(): string {\n    return `TXN_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  async getBillsHistory(userId: string, limit: number = 50): Promise<any[]> {\n    try {\n      // Get user's bill payment history\n      const transactions = await storage.getUserTransactions(userId, 'bill_payment', limit);\n      return transactions || [];\n    } catch (error: any) {\n      console.error('Error fetching bills history:', error);\n      return [];\n    }\n  }\n\n  async getAvailableProviders(): Promise<any[]> {\n    return Array.from(this.providers.values()).map(provider => ({\n      id: provider.id,\n      name: provider.name,\n      supportedServices: provider.supportedServices\n    }));\n  }\n\n  async validatePhoneNumber(phoneNumber: string, provider: string): Promise<boolean> {\n    // Basic phone number validation for Ghana\n    const cleanNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // Ghana numbers should be 10 digits (without country code) or 13 with +233\n    if (cleanNumber.length === 10) {\n      // Check if starts with valid prefixes for each provider\n      const prefixes: Record<string, string[]> = {\n        'mtn_momo': ['024', '025', '053', '054', '055', '059'],\n        'vodafone_cash': ['020', '050'],\n        'airteltigo_money': ['026', '027', '028', '056', '057']\n      };\n\n      const providerPrefixes = prefixes[provider];\n      if (providerPrefixes) {\n        return providerPrefixes.some(prefix => cleanNumber.startsWith(prefix));\n      }\n    }\n\n    return false;\n  }\n}\n\nexport const billsService = new BillsService();","size_bytes":9540},"server/services/encryption.ts":{"content":"import crypto from \"crypto\";\n\n// Mock post-quantum encryption service\n// In production, this would use actual post-quantum cryptography libraries\nclass PostQuantumEncryptionService {\n  \n  private algorithm = 'aes-256-gcm';\n  private keyLength = 32;\n  private ivLength = 16;\n  private tagLength = 16;\n\n  // Generate a cryptographic key\n  generateKey(): string {\n    return crypto.randomBytes(this.keyLength).toString('hex');\n  }\n\n  // Standard AES-256-GCM encryption (fallback)\n  async encrypt(text: string, password: string): Promise<string> {\n    try {\n      // Generate key from password using PBKDF2\n      const salt = crypto.randomBytes(16);\n      const key = crypto.pbkdf2Sync(password, salt, 10000, this.keyLength, 'sha256');\n      \n      // Generate random IV\n      const iv = crypto.randomBytes(this.ivLength);\n      \n      // Create cipher\n      const cipher = crypto.createCipher(this.algorithm, key);\n      \n      // Encrypt\n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      // Get authentication tag\n      const tag = cipher.getAuthTag();\n      \n      // Combine salt, iv, tag, and encrypted data\n      const result = {\n        salt: salt.toString('hex'),\n        iv: iv.toString('hex'),\n        tag: tag.toString('hex'),\n        encrypted: encrypted,\n        algorithm: 'AES-256-GCM',\n        version: '1.0'\n      };\n      \n      return Buffer.from(JSON.stringify(result)).toString('base64');\n    } catch (error: any) {\n      throw new Error('Encryption failed: ' + error.message);\n    }\n  }\n\n  async decrypt(encryptedData: string, password: string): Promise<string> {\n    try {\n      // Parse encrypted data\n      const data = JSON.parse(Buffer.from(encryptedData, 'base64').toString('utf8'));\n      \n      // Regenerate key from password and salt\n      const salt = Buffer.from(data.salt, 'hex');\n      const key = crypto.pbkdf2Sync(password, salt, 10000, this.keyLength, 'sha256');\n      \n      // Extract components\n      const iv = Buffer.from(data.iv, 'hex');\n      const tag = Buffer.from(data.tag, 'hex');\n      const encrypted = data.encrypted;\n      \n      // Create decipher\n      const decipher = crypto.createDecipher(this.algorithm, key);\n      decipher.setAuthTag(tag);\n      \n      // Decrypt\n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error: any) {\n      throw new Error('Decryption failed: ' + error.message);\n    }\n  }\n\n  // Simulate post-quantum encryption with CRYSTALS-Kyber\n  async postQuantumEncrypt(data: string, publicKey: string): Promise<string> {\n    try {\n      // In production, this would use actual post-quantum algorithms\n      // For now, we'll simulate with enhanced metadata\n      \n      const timestamp = Date.now();\n      const nonce = crypto.randomBytes(24).toString('hex');\n      \n      // Use standard encryption but with post-quantum metadata\n      const standardEncrypted = await this.encrypt(data, publicKey + nonce);\n      \n      const postQuantumWrapper = {\n        data: standardEncrypted,\n        algorithm: 'CRYSTALS-Kyber-1024',\n        keyExchange: 'post-quantum',\n        nonce: nonce,\n        timestamp: timestamp,\n        version: '2.0-pq'\n      };\n      \n      return Buffer.from(JSON.stringify(postQuantumWrapper)).toString('base64');\n    } catch (error: any) {\n      throw new Error('Post-quantum encryption failed: ' + error.message);\n    }\n  }\n\n  async postQuantumDecrypt(encryptedData: string, privateKey: string): Promise<string> {\n    try {\n      // Parse post-quantum wrapper\n      const wrapper = JSON.parse(Buffer.from(encryptedData, 'base64').toString('utf8'));\n      \n      if (wrapper.algorithm !== 'CRYSTALS-Kyber-1024') {\n        throw new Error('Unsupported post-quantum algorithm');\n      }\n      \n      // Extract the standard encrypted data\n      const standardEncrypted = wrapper.data;\n      const nonce = wrapper.nonce;\n      \n      // Decrypt using standard method with nonce\n      return await this.decrypt(standardEncrypted, privateKey + nonce);\n    } catch (error: any) {\n      throw new Error('Post-quantum decryption failed: ' + error.message);\n    }\n  }\n\n  // Digital signatures with CRYSTALS-Dilithium simulation\n  async sign(data: string, privateKey: string): Promise<string> {\n    try {\n      const timestamp = Date.now();\n      const signature = crypto.createHmac('sha256', privateKey).update(data + timestamp).digest('hex');\n      \n      const signatureData = {\n        signature: signature,\n        algorithm: 'CRYSTALS-Dilithium-5',\n        timestamp: timestamp,\n        data: Buffer.from(data).toString('base64'),\n        version: '2.0-pq'\n      };\n      \n      return Buffer.from(JSON.stringify(signatureData)).toString('base64');\n    } catch (error: any) {\n      throw new Error('Digital signing failed: ' + error.message);\n    }\n  }\n\n  async verify(signedData: string, publicKey: string): Promise<{ valid: boolean; data?: string }> {\n    try {\n      const signatureData = JSON.parse(Buffer.from(signedData, 'base64').toString('utf8'));\n      \n      if (signatureData.algorithm !== 'CRYSTALS-Dilithium-5') {\n        return { valid: false };\n      }\n      \n      const originalData = Buffer.from(signatureData.data, 'base64').toString('utf8');\n      const expectedSignature = crypto.createHmac('sha256', publicKey)\n        .update(originalData + signatureData.timestamp).digest('hex');\n      \n      const isValid = crypto.timingSafeEqual(\n        Buffer.from(signatureData.signature, 'hex'),\n        Buffer.from(expectedSignature, 'hex')\n      );\n      \n      return {\n        valid: isValid,\n        data: isValid ? originalData : undefined\n      };\n    } catch (error: any) {\n      return { valid: false };\n    }\n  }\n\n  // Key generation for post-quantum cryptography\n  generatePostQuantumKeyPair(): { publicKey: string; privateKey: string } {\n    // Simulate post-quantum key generation\n    const privateKey = crypto.randomBytes(64).toString('hex'); // Larger keys for PQ\n    const publicKey = crypto.createHash('sha256').update(privateKey + 'kyber-1024').digest('hex');\n    \n    return {\n      publicKey: publicKey,\n      privateKey: privateKey\n    };\n  }\n\n  // Secure key derivation for wallets and transactions\n  deriveTransactionKey(userId: string, transactionId: string): string {\n    const masterKey = process.env.MASTER_ENCRYPTION_KEY || 'default-master-key';\n    return crypto.createHmac('sha256', masterKey)\n      .update(`${userId}:${transactionId}:transaction`)\n      .digest('hex');\n  }\n\n  // Encrypt transaction data\n  async encryptTransaction(transactionData: any, userId: string, transactionId: string): Promise<string> {\n    const key = this.deriveTransactionKey(userId, transactionId);\n    const dataString = JSON.stringify(transactionData);\n    \n    return await this.postQuantumEncrypt(dataString, key);\n  }\n\n  // Decrypt transaction data\n  async decryptTransaction(encryptedTransaction: string, userId: string, transactionId: string): Promise<any> {\n    const key = this.deriveTransactionKey(userId, transactionId);\n    const decryptedString = await this.postQuantumDecrypt(encryptedTransaction, key);\n    \n    return JSON.parse(decryptedString);\n  }\n\n  // Generate secure transaction hash for integrity\n  generateTransactionHash(transactionData: any): string {\n    const dataString = JSON.stringify(transactionData);\n    return crypto.createHash('sha256').update(dataString).digest('hex');\n  }\n\n  // Verify transaction integrity\n  verifyTransactionIntegrity(transactionData: any, providedHash: string): boolean {\n    const calculatedHash = this.generateTransactionHash(transactionData);\n    return crypto.timingSafeEqual(\n      Buffer.from(providedHash, 'hex'),\n      Buffer.from(calculatedHash, 'hex')\n    );\n  }\n}\n\nexport const encryptionService = new PostQuantumEncryptionService();\n","size_bytes":7886},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Gracefully handle missing OpenAI API key in development\nconst apiKey = process.env.OPENAI_API_KEY;\nif (!apiKey && process.env.NODE_ENV === 'production') {\n  throw new Error('Missing required OpenAI API key: OPENAI_API_KEY');\n}\n\nconst openai = apiKey ? new OpenAI({ apiKey }) : null;\n\ninterface ChatResponse {\n  content: string;\n  metadata?: any;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  confidence: number;\n  reason: string;\n  suggestions?: string[];\n}\n\ninterface FileAnalysisResult {\n  analysis: string;\n  metadata?: any;\n}\n\ninterface TranscriptionResult {\n  text: string;\n  duration?: number;\n}\n\nclass OpenAIService {\n  \n  async generateChatResponse(message: string): Promise<ChatResponse> {\n    try {\n      if (!openai) {\n        throw new Error('OpenAI is not configured. Please set OPENAI_API_KEY.');\n      }\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are Zenux AI, an intelligent assistant that helps users with various tasks including mobile money transactions, offline AI validation, and general questions. Be helpful, accurate, and concise in your responses.\"\n          },\n          {\n            role: \"user\",\n            content: message\n          }\n        ],\n        max_completion_tokens: 2048,\n      });\n\n      return {\n        content: response.choices[0].message.content || \"I apologize, but I couldn't generate a response. Please try again.\",\n        metadata: {\n          model: \"gpt-5\",\n          tokens: response.usage?.total_tokens || 0,\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error: any) {\n      console.error(\"OpenAI chat error:\", error);\n      throw new Error(\"Failed to generate AI response: \" + error.message);\n    }\n  }\n\n  async generateImage(prompt: string): Promise<{ url: string }> {\n    try {\n      if (!openai) {\n        throw new Error('OpenAI is not configured. Please set OPENAI_API_KEY.');\n      }\n      const response = await openai.images.generate({\n        model: \"dall-e-3\",\n        prompt: prompt,\n        n: 1,\n        size: \"1024x1024\",\n        quality: \"standard\",\n      });\n\n      return { url: response.data?.[0]?.url || '' };\n    } catch (error: any) {\n      console.error(\"OpenAI image generation error:\", error);\n      throw new Error(\"Failed to generate image: \" + error.message);\n    }\n  }\n\n  async analyzeFile(file: Express.Multer.File, prompt?: string): Promise<FileAnalysisResult> {\n    try {\n      const fileContent = file.buffer.toString('base64');\n      const analysisPrompt = prompt || \"Analyze this file and provide a detailed summary of its contents.\";\n\n      let response;\n\n      // Check if it's an image file\n      if (file.mimetype.startsWith('image/')) {\n        if (!openai) {\n          throw new Error('OpenAI is not configured. Please set OPENAI_API_KEY.');\n        }\n        response = await openai.chat.completions.create({\n          model: \"gpt-5\",\n          messages: [\n            {\n              role: \"user\",\n              content: [\n                {\n                  type: \"text\",\n                  text: analysisPrompt\n                },\n                {\n                  type: \"image_url\",\n                  image_url: {\n                    url: `data:${file.mimetype};base64,${fileContent}`\n                  }\n                }\n              ],\n            },\n          ],\n          max_completion_tokens: 2048,\n        });\n      } else {\n        // For other file types, analyze text content if possible\n        const textContent = file.buffer.toString('utf-8');\n        if (!openai) {\n          throw new Error('OpenAI is not configured. Please set OPENAI_API_KEY.');\n        }\n        response = await openai.chat.completions.create({\n          model: \"gpt-5\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are a file analysis expert. Analyze the provided file content and provide insights.\"\n            },\n            {\n              role: \"user\",\n              content: `${analysisPrompt}\\n\\nFile name: ${file.originalname}\\nFile type: ${file.mimetype}\\nFile content:\\n${textContent.slice(0, 10000)}`\n            }\n          ],\n          max_completion_tokens: 2048,\n        });\n      }\n\n      return {\n        analysis: response.choices[0].message.content || \"Could not analyze the file.\",\n        metadata: {\n          fileName: file.originalname,\n          fileSize: file.size,\n          fileType: file.mimetype,\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error: any) {\n      console.error(\"OpenAI file analysis error:\", error);\n      throw new Error(\"Failed to analyze file: \" + error.message);\n    }\n  }\n\n  async transcribeAudio(audioFile: Express.Multer.File): Promise<TranscriptionResult> {\n    try {\n      if (!openai) {\n        throw new Error('OpenAI is not configured. Please set OPENAI_API_KEY.');\n      }\n      // Convert buffer to file-like object for OpenAI API\n      const file = new File([audioFile.buffer], audioFile.originalname, { type: audioFile.mimetype });\n      \n      const transcription = await openai.audio.transcriptions.create({\n        file: file,\n        model: \"whisper-1\",\n      });\n\n      return {\n        text: transcription.text,\n        duration: 0, // Duration not available in current Whisper API\n      };\n    } catch (error: any) {\n      console.error(\"OpenAI transcription error:\", error);\n      throw new Error(\"Failed to transcribe audio: \" + error.message);\n    }\n  }\n\n  async validateTransaction(transactionData: any): Promise<ValidationResult> {\n    try {\n      const prompt = `Analyze this transaction for potential issues and validate its legitimacy:\n      \n      Amount: ${transactionData.amount} ${transactionData.currency}\n      Type: ${transactionData.type}\n      Payment Method: ${transactionData.paymentMethod}\n      User Balance: ${transactionData.userBalance || 'Unknown'}\n      \n      Please respond in JSON format with validation results.`;\n\n      if (!openai) {\n        // Use fallback validation when OpenAI is not available\n        return this.basicTransactionValidation(transactionData);\n      }\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a financial transaction validator. Analyze transactions for fraud, validity, and compliance. Respond with JSON containing isValid (boolean), confidence (0-1), reason (string), and optional suggestions array.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        isValid: result.isValid || false,\n        confidence: Math.max(0, Math.min(1, result.confidence || 0)),\n        reason: result.reason || \"Transaction validation completed\",\n        suggestions: result.suggestions || []\n      };\n    } catch (error: any) {\n      console.error(\"OpenAI transaction validation error:\", error);\n      \n      // Fallback validation logic\n      const basicValidation = this.basicTransactionValidation(transactionData);\n      return basicValidation;\n    }\n  }\n\n  private basicTransactionValidation(data: any): ValidationResult {\n    if (!data.amount || data.amount <= 0) {\n      return {\n        isValid: false,\n        confidence: 0.95,\n        reason: \"Invalid amount: must be greater than zero\"\n      };\n    }\n\n    if (data.amount > 50000) {\n      return {\n        isValid: false,\n        confidence: 0.90,\n        reason: \"Amount exceeds daily limit\",\n        suggestions: [\"Split into smaller transactions\", \"Contact support for higher limits\"]\n      };\n    }\n\n    if (data.userBalance !== undefined && data.amount > data.userBalance) {\n      return {\n        isValid: false,\n        confidence: 0.98,\n        reason: \"Insufficient balance\",\n        suggestions: [\"Add funds to your account\", \"Reduce transaction amount\"]\n      };\n    }\n\n    return {\n      isValid: true,\n      confidence: 0.85,\n      reason: \"Transaction appears valid\"\n    };\n  }\n\n  async generateConfirmationPrompt(transactionData: any): Promise<string> {\n    try {\n      if (!openai) {\n        // Fallback confirmation prompt\n        return `Confirm sending ${transactionData.currency} ${transactionData.amount.toFixed(2)} via ${transactionData.paymentMethod || 'mobile money'}?`;\n      }\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Generate a clear, concise confirmation prompt for a financial transaction. Be professional and include key details.\"\n          },\n          {\n            role: \"user\",\n            content: `Generate a confirmation prompt for this transaction:\n            Amount: ${transactionData.amount} ${transactionData.currency}\n            Payment Method: ${transactionData.paymentMethod || 'mobile money'}\n            Recipient: ${transactionData.recipient || 'selected recipient'}`\n          }\n        ],\n      });\n\n      return response.choices[0].message.content || `Confirm sending ${transactionData.currency} ${transactionData.amount} via ${transactionData.paymentMethod || 'mobile money'}?`;\n    } catch (error: any) {\n      console.error(\"OpenAI confirmation prompt error:\", error);\n      \n      // Fallback confirmation prompt\n      return `Confirm sending ${transactionData.currency} ${transactionData.amount.toFixed(2)} via ${transactionData.paymentMethod || 'mobile money'}?`;\n    }\n  }\n\n  async generateSmartReplies(message: string): Promise<string[]> {\n    try {\n      if (!openai) {\n        // Use fallback smart replies based on message content\n        const lowerMessage = message.toLowerCase();\n        \n        if (lowerMessage.includes('transaction') || lowerMessage.includes('payment')) {\n          return [\n            'Need help with payments?',\n            'Check transaction status',\n            'View payment methods',\n          ];\n        }\n\n        if (lowerMessage.includes('error') || lowerMessage.includes('problem')) {\n          return [\n            'What specific error occurred?',\n            'Can you share more details?',\n            'Let me help troubleshoot',\n          ];\n        }\n\n        if (lowerMessage.includes('balance') || lowerMessage.includes('wallet')) {\n          return [\n            'Check current balance',\n            'View transaction history',\n            'Add funds to wallet',\n          ];\n        }\n\n        return [\n          'Tell me more',\n          'How can I help?',\n          'What would you like to know?',\n        ];\n      }\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Generate 3 helpful, contextually relevant smart reply suggestions for the user's message. Keep them concise and actionable. Respond in JSON format with a 'replies' array.\"\n          },\n          {\n            role: \"user\",\n            content: `Generate smart replies for this message: \"${message}\"`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"replies\": []}');\n      return result.replies || [\"Tell me more\", \"How can I help?\", \"What would you like to know?\"];\n    } catch (error: any) {\n      console.error(\"OpenAI smart replies error:\", error);\n      \n      // Fallback smart replies based on message content\n      const lowerMessage = message.toLowerCase();\n      \n      if (lowerMessage.includes('transaction') || lowerMessage.includes('payment')) {\n        return [\n          'Need help with payments?',\n          'Check transaction status',\n          'View payment methods',\n        ];\n      }\n\n      if (lowerMessage.includes('error') || lowerMessage.includes('problem')) {\n        return [\n          'What specific error occurred?',\n          'Can you share more details?',\n          'Let me help troubleshoot',\n        ];\n      }\n\n      if (lowerMessage.includes('balance') || lowerMessage.includes('wallet')) {\n        return [\n          'Check current balance',\n          'View transaction history',\n          'Add funds to wallet',\n        ];\n      }\n\n      return [\n        'Tell me more',\n        'How can I help?',\n        'What would you like to know?',\n      ];\n    }\n  }\n}\n\nexport const openAIService = new OpenAIService();\n","size_bytes":12737},"server/services/stripe.ts":{"content":"import Stripe from \"stripe\";\nimport { storage } from \"../storage\";\n\n// Gracefully handle missing Stripe key in development\nconst stripeKey = process.env.STRIPE_SECRET_KEY;\nif (!stripeKey && process.env.NODE_ENV === 'production') {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = stripeKey ? new Stripe(stripeKey, {\n  apiVersion: \"2025-08-27.basil\",\n}) : null;\n\nclass StripeService {\n  \n  async createPaymentIntent(amount: number, currency: string = \"usd\"): Promise<Stripe.PaymentIntent> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: currency,\n        automatic_payment_methods: {\n          enabled: true,\n        },\n      });\n\n      return paymentIntent;\n    } catch (error: any) {\n      console.error(\"Stripe payment intent error:\", error);\n      throw new Error(\"Failed to create payment intent: \" + error.message);\n    }\n  }\n\n  async createCustomer(email: string, name?: string): Promise<Stripe.Customer> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const customer = await stripe.customers.create({\n        email,\n        name,\n      });\n\n      return customer;\n    } catch (error: any) {\n      console.error(\"Stripe customer creation error:\", error);\n      throw new Error(\"Failed to create customer: \" + error.message);\n    }\n  }\n\n  async createSubscription(userId: string, priceId: string): Promise<Stripe.Subscription> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      let customerId = user.stripeCustomerId;\n\n      // Create customer if doesn't exist\n      if (!customerId) {\n        const customer = await this.createCustomer(user.email, user.displayName || user.username);\n        customerId = customer.id;\n        \n        // Update user with stripe customer ID\n        await storage.updateUser(userId, { stripeCustomerId: customerId });\n      }\n\n      // Create subscription\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const subscription = await stripe.subscriptions.create({\n        customer: customerId,\n        items: [{\n          price: priceId || process.env.STRIPE_PRICE_ID || \"price_default\",\n        }],\n        payment_behavior: 'default_incomplete',\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      // Update user with subscription ID\n      await storage.updateUser(userId, { \n        stripeSubscriptionId: subscription.id \n      });\n\n      return subscription;\n    } catch (error: any) {\n      console.error(\"Stripe subscription error:\", error);\n      throw new Error(\"Failed to create subscription: \" + error.message);\n    }\n  }\n\n  async getSubscription(subscriptionId: string): Promise<Stripe.Subscription> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId, {\n        expand: ['latest_invoice.payment_intent']\n      });\n\n      return subscription;\n    } catch (error: any) {\n      console.error(\"Stripe get subscription error:\", error);\n      throw new Error(\"Failed to retrieve subscription: \" + error.message);\n    }\n  }\n\n  async updateSubscription(subscriptionId: string, updates: Stripe.SubscriptionUpdateParams): Promise<Stripe.Subscription> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const subscription = await stripe.subscriptions.update(subscriptionId, updates);\n      return subscription;\n    } catch (error: any) {\n      console.error(\"Stripe update subscription error:\", error);\n      throw new Error(\"Failed to update subscription: \" + error.message);\n    }\n  }\n\n  async cancelSubscription(subscriptionId: string): Promise<Stripe.Subscription> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const subscription = await stripe.subscriptions.update(subscriptionId, {\n        cancel_at_period_end: true\n      });\n\n      return subscription;\n    } catch (error: any) {\n      console.error(\"Stripe cancel subscription error:\", error);\n      throw new Error(\"Failed to cancel subscription: \" + error.message);\n    }\n  }\n\n  async createPrice(amount: number, currency: string = \"usd\", interval: \"month\" | \"year\" = \"month\"): Promise<Stripe.Price> {\n    try {\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const price = await stripe.prices.create({\n        unit_amount: Math.round(amount * 100),\n        currency,\n        recurring: {\n          interval,\n        },\n        product_data: {\n          name: `Zenux AI ${interval === \"month\" ? \"Monthly\" : \"Yearly\"} Plan`,\n        },\n      });\n\n      return price;\n    } catch (error: any) {\n      console.error(\"Stripe create price error:\", error);\n      throw new Error(\"Failed to create price: \" + error.message);\n    }\n  }\n\n  async handleWebhook(payload: string, signature: string): Promise<void> {\n    try {\n      const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n      if (!webhookSecret) {\n        throw new Error(\"Stripe webhook secret not configured\");\n      }\n\n      if (!stripe) {\n        throw new Error('Stripe is not configured. Please set STRIPE_SECRET_KEY.');\n      }\n      const event = stripe.webhooks.constructEvent(payload, signature, webhookSecret);\n\n      switch (event.type) {\n        case 'payment_intent.succeeded':\n          const paymentIntent = event.data.object as Stripe.PaymentIntent;\n          await this.handlePaymentSuccess(paymentIntent);\n          break;\n\n        case 'invoice.payment_succeeded':\n          const invoice = event.data.object as Stripe.Invoice;\n          await this.handleSubscriptionPayment(invoice);\n          break;\n\n        case 'customer.subscription.updated':\n        case 'customer.subscription.deleted':\n          const subscription = event.data.object as Stripe.Subscription;\n          await this.handleSubscriptionUpdate(subscription);\n          break;\n\n        default:\n          console.log(`Unhandled event type: ${event.type}`);\n      }\n    } catch (error: any) {\n      console.error(\"Stripe webhook error:\", error);\n      throw new Error(\"Webhook processing failed: \" + error.message);\n    }\n  }\n\n  private async handlePaymentSuccess(paymentIntent: Stripe.PaymentIntent): Promise<void> {\n    // Handle successful one-time payment\n    console.log(`Payment succeeded: ${paymentIntent.id}`);\n    \n    // Here you could update user credits, unlock features, etc.\n    // Based on payment metadata\n  }\n\n  private async handleSubscriptionPayment(invoice: Stripe.Invoice): Promise<void> {\n    // Handle successful subscription payment\n    console.log(`Subscription payment succeeded: ${invoice.id}`);\n    \n    if (invoice.customer && invoice.subscription) {\n      // Update user's plan and reset usage counters\n      const user = await this.getUserByStripeCustomerId(invoice.customer as string);\n      if (user) {\n        await storage.updateUser(user.id, {\n          messagesUsed: 0,\n          filesUploaded: 0,\n          voiceMinutesUsed: 0,\n          apiCallsUsed: 0,\n        });\n      }\n    }\n  }\n\n  private async handleSubscriptionUpdate(subscription: Stripe.Subscription): Promise<void> {\n    // Handle subscription updates (plan changes, cancellations, etc.)\n    console.log(`Subscription updated: ${subscription.id}`);\n    \n    const user = await this.getUserByStripeCustomerId(subscription.customer as string);\n    if (user) {\n      const planMap: Record<string, string> = {\n        'price_plus': 'plus',\n        'price_pro': 'pro',\n        'price_business': 'business',\n      };\n\n      const newPlan = subscription.items.data[0]?.price?.id \n        ? planMap[subscription.items.data[0].price.id] || 'free'\n        : 'free';\n\n      await storage.updateUser(user.id, { \n        plan: newPlan,\n        stripeSubscriptionId: subscription.status === 'active' ? subscription.id : null\n      });\n    }\n  }\n\n  private async getUserByStripeCustomerId(customerId: string) {\n    // This would need to be implemented in storage\n    // For now, we'll return null\n    return null;\n  }\n\n  // GHS to USD conversion (mock - in production, use real exchange rate API)\n  convertGHSToUSD(amountGHS: number): number {\n    const exchangeRate = 0.084; // 1 GHS = 0.084 USD (approximate)\n    return Math.round(amountGHS * exchangeRate * 100) / 100;\n  }\n\n  // Create payment intent with GHS support\n  async createGHSPaymentIntent(amountGHS: number): Promise<Stripe.PaymentIntent> {\n    // Convert GHS to USD for Stripe processing\n    const amountUSD = this.convertGHSToUSD(amountGHS);\n    \n    return this.createPaymentIntent(amountUSD, \"usd\");\n  }\n}\n\nexport const stripeService = new StripeService();\n","size_bytes":9159},"server/services/zenux.ts":{"content":"import axios from \"axios\";\nimport FormData from \"form-data\";\n\nconst ZENUX_API_KEY =  process.env.VITE_ZENUX_API_KEY;\nconst ZENUX_CHAT_API_URL = process.env.VITE_ZENUX_CHAT_API_URL;\nconst ZENUX_FILE_API_URL = process.env.VITE_ZENUX_FILE_API_URL;\nconst ZENUX_ANALYTICS_URL = process.env.VITE_ZENUX_ANALYTICS_URL;\n\nif (!ZENUX_API_KEY) {\n  throw new Error(\"Missing required Zenux API key: VITE_ZENUX_API_KEY\");\n}\n\ninterface ChatResponse {\n  content: string;\n  metadata?: any;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  confidence: number;\n  reason: string;\n  suggestions?: string[];\n}\n\ninterface FileAnalysisResult {\n  analysis: string;\n  metadata?: any;\n}\n\ninterface TranscriptionResult {\n  text: string;\n  duration?: number;\n}\n\nclass ZenuxAIService {\n  async generateChatResponse(message: string): Promise<ChatResponse> {\n    try {\n      const response = await axios.post(\n        ZENUX_CHAT_API_URL!,\n        {\n          model: \"zenux-gpt-5\",\n          messages: [\n            {\n              role: \"system\",\n              content:\n                \"You are Zenux AI, an intelligent assistant that helps users with various tasks including mobile money transactions, offline AI validation, and general questions. Be helpful, accurate, and concise in your responses.\",\n            },\n            {\n              role: \"user\",\n              content: message,\n            },\n          ],\n          max_completion_tokens: 2048,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${ZENUX_API_KEY}`,\n          },\n        }\n      );\n      return {\n        content:\n          response.data.choices?.[0]?.message?.content ||\n          \"I apologize, but I couldn't generate a response. Please try again.\",\n        metadata: {\n          model: \"zenux-gpt-5\",\n          tokens: response.data.usage?.total_tokens || 0,\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch (error: any) {\n      console.error(\"Zenux chat error:\", error);\n      throw new Error(\"Failed to generate AI response: \" + error.message);\n    }\n  }\n\n  async generateImage(prompt: string): Promise<{ url: string }> {\n    try {\n      const response = await axios.post(\n        ZENUX_CHAT_API_URL!,\n        {\n          model: \"zenux-dalle-3\",\n          prompt,\n          n: 1,\n          size: \"1024x1024\",\n          quality: \"standard\",\n          type: \"image\",\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${ZENUX_API_KEY}`,\n          },\n        }\n      );\n      return { url: response.data.data?.[0]?.url || \"\" };\n    } catch (error: any) {\n      console.error(\"Zenux image generation error:\", error);\n      throw new Error(\"Failed to generate image: \" + error.message);\n    }\n  }\n\n  async analyzeFile(file: Express.Multer.File, prompt?: string): Promise<FileAnalysisResult> {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file.buffer, file.originalname);\n      formData.append(\"prompt\", prompt || \"Analyze this file and provide a detailed summary of its contents.\");\n      const response = await axios.post(ZENUX_FILE_API_URL!, formData, {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n          ...formData.getHeaders()\n        },\n      });\n      return {\n        analysis: response.data.analysis || \"Could not analyze the file.\",\n        metadata: {\n          fileName: file.originalname,\n          fileSize: file.size,\n          fileType: file.mimetype,\n          timestamp: new Date().toISOString(),\n        },\n      };\n    } catch (error: any) {\n      console.error(\"Zenux file analysis error:\", error);\n      throw new Error(\"Failed to analyze file: \" + error.message);\n    }\n  }\n\n  async transcribeAudio(audioFile: Express.Multer.File): Promise<TranscriptionResult> {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", audioFile.buffer, audioFile.originalname);\n      formData.append(\"model\", \"zenux-whisper-1\");\n      const response = await axios.post(ZENUX_FILE_API_URL!, formData, {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n          ...formData.getHeaders()\n        },\n      });\n      return {\n        text: response.data.text,\n        duration: response.data.duration || 0,\n      };\n    } catch (error: any) {\n      console.error(\"Zenux transcription error:\", error);\n      throw new Error(\"Failed to transcribe audio: \" + error.message);\n    }\n  }\n\n  async validateTransaction(transactionData: any): Promise<ValidationResult> {\n    try {\n      const response = await axios.post(\n        ZENUX_ANALYTICS_URL!,\n        {\n          type: \"validate-transaction\",\n          transaction: transactionData,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${ZENUX_API_KEY}`,\n          },\n        }\n      );\n      const result = response.data;\n      return {\n        isValid: result.isValid || false,\n        confidence: Math.max(0, Math.min(1, result.confidence || 0)),\n        reason: result.reason || \"Transaction validation completed\",\n        suggestions: result.suggestions || [],\n      };\n    } catch (error: any) {\n      console.error(\"Zenux transaction validation error:\", error);\n      return this.basicTransactionValidation(transactionData);\n    }\n  }\n\n  private basicTransactionValidation(data: any): ValidationResult {\n    if (!data.amount || data.amount <= 0) {\n      return {\n        isValid: false,\n        confidence: 0.95,\n        reason: \"Invalid amount: must be greater than zero\",\n      };\n    }\n    if (data.amount > 50000) {\n      return {\n        isValid: false,\n        confidence: 0.9,\n        reason: \"Amount exceeds daily limit\",\n        suggestions: [\"Split into smaller transactions\", \"Contact support for higher limits\"],\n      };\n    }\n    if (data.userBalance !== undefined && data.amount > data.userBalance) {\n      return {\n        isValid: false,\n        confidence: 0.98,\n        reason: \"Insufficient balance\",\n        suggestions: [\"Add funds to your account\", \"Reduce transaction amount\"],\n      };\n    }\n    return {\n      isValid: true,\n      confidence: 0.85,\n      reason: \"Transaction appears valid\",\n    };\n  }\n\n  async generateConfirmationPrompt(transactionData: any): Promise<string> {\n    try {\n      const response = await axios.post(\n        ZENUX_ANALYTICS_URL!,\n        {\n          type: \"confirmation-prompt\",\n          transaction: transactionData,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${ZENUX_API_KEY}`,\n          },\n        }\n      );\n      return response.data.prompt || `Confirm sending ${transactionData.currency} ${transactionData.amount.toFixed(2)} via ${transactionData.paymentMethod || \"mobile money\"}?`;\n    } catch (error: any) {\n      console.error(\"Zenux confirmation prompt error:\", error);\n      return `Confirm sending ${transactionData.currency} ${transactionData.amount.toFixed(2)} via ${transactionData.paymentMethod || \"mobile money\"}?`;\n    }\n  }\n\n  async generateSmartReplies(message: string): Promise<string[]> {\n    try {\n      const response = await axios.post(\n        ZENUX_CHAT_API_URL!,\n        {\n          model: \"zenux-gpt-5\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"Generate 3 helpful, contextually relevant smart reply suggestions for the user's message. Keep them concise and actionable. Respond in JSON format with a 'replies' array.\",\n            },\n            {\n              role: \"user\",\n              content: `Generate smart replies for this message: \"${message}\"`,\n            },\n          ],\n          response_format: { type: \"json_object\" },\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${ZENUX_API_KEY}`,\n          },\n        }\n      );\n      const result = response.data;\n      return result.replies || [\"Tell me more\", \"How can I help?\", \"What would you like to know?\"];\n    } catch (error: any) {\n      console.error(\"Zenux smart replies error:\", error);\n      // Fallback smart replies\n      const lowerMessage = message.toLowerCase();\n      if (lowerMessage.includes(\"transaction\") || lowerMessage.includes(\"payment\")) {\n        return [\"Need help with payments?\", \"Check transaction status\", \"View payment methods\"];\n      }\n      if (lowerMessage.includes(\"error\") || lowerMessage.includes(\"problem\")) {\n        return [\"What specific error occurred?\", \"Can you share more details?\", \"Let me help troubleshoot\"];\n      }\n      if (lowerMessage.includes(\"balance\") || lowerMessage.includes(\"wallet\")) {\n        return [\"Check current balance\", \"View transaction history\", \"Add funds to wallet\"];\n      }\n      return [\"Tell me more\", \"How can I help?\", \"What would you like to know?\"];\n    }\n  }\n}\n\nexport const zenuxAIService = new ZenuxAIService();\n\n// --- Enhanced v2 ZenuxAIService ---\nimport { Readable } from 'stream';\n\nclass ZenuxAIV2Service {\n  async chat({ message, user_id, conversation_id, files }: {\n    message: string;\n    user_id: string;\n    conversation_id: string;\n    files?: string[];\n  }): Promise<Readable> {\n    // Streams markdown response from /z1/chat/completions (or /api/chat)\n    const response = await axios.post(\n      ZENUX_CHAT_API_URL!,\n      {\n        message,\n        user_id,\n        conversation_id,\n        files,\n        enhanced: true,\n        enhanced_v2: true\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n        },\n        responseType: 'stream',\n      }\n    );\n    return response.data; // Readable stream\n  }\n\n  async analyzeFile({ file, prompt, user_id, conversation_id }: {\n    file: Express.Multer.File;\n    prompt?: string;\n    user_id: string;\n    conversation_id: string;\n  }): Promise<any> {\n    const formData = new FormData();\n    formData.append(\"file\", file.buffer, {\n      filename: file.originalname,\n      contentType: file.mimetype,\n    });\n    if (prompt) formData.append(\"prompt\", prompt);\n    formData.append(\"user_id\", user_id);\n    formData.append(\"conversation_id\", conversation_id);\n    formData.append(\"enhanced_v2\", \"true\");\n    const response = await axios.post(\n      \"https://api.zenux.ai/api/file/analyze\",\n      formData,\n      {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n          ...formData.getHeaders(),\n        },\n      }\n    );\n    return response.data;\n  }\n\n  async generateImage({ prompt, user_id }: {\n    prompt: string;\n    user_id: string;\n  }): Promise<{ url: string }[]> {\n    const response = await axios.post(\n      \"https://api.zenux.ai/v1/images/generate\",\n      {\n        prompt,\n        model: \"zenux-dalle-3\",\n        n: 1,\n        size: \"1024x1024\",\n        quality: \"standard\",\n        user_id,\n        enhanced_v2: true\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n        },\n      }\n    );\n    return response.data.data || [];\n  }\n\n  async research({ query, user_id }: {\n    query: string;\n    user_id: string;\n  }): Promise<any> {\n    const response = await axios.post(\n      \"https://api.zenux.ai/api/research\",\n      {\n        query,\n        user_id,\n        enhanced_v2: true\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${ZENUX_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  }\n}\n\nexport const zenuxAIV2Service = new ZenuxAIV2Service();\n","size_bytes":11326},"client/src/components/ChatLayout.tsx":{"content":"import React, { PropsWithChildren } from 'react';\n\nexport default function ChatLayout({ children }: PropsWithChildren) {\n  // Use full viewport height and ensure child flex containers can size correctly\n  return (\n    <div className=\"h-screen w-full bg-gray-50\">\n      <div className=\"flex h-full w-full\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":356},"client/src/components/TopBar.tsx":{"content":"import React from 'react';\nimport { ChevronLeft } from 'lucide-react';\n\ntype TopBarProps = {\n  title: string;\n  onBack?: () => void;\n};\n\nconst TopBar = React.forwardRef<HTMLDivElement, TopBarProps>(({ title, onBack }, ref) => {\n  return (\n    <div ref={ref} className=\"bg-white pt-[env(safe-area-inset-top)] pt-12 pb-4 px-4 shadow-sm fixed top-0 left-0 w-full z-30\">\n      <div className=\"flex items-center justify-between\">\n        <button className=\"p-2\" onClick={onBack || (() => window.history.back())} aria-label=\"Go back\">\n          <ChevronLeft size={24} color=\"#2C3E50\" />\n        </button>\n        <span className=\"text-lg font-bold text-gray-800\">{title}</span>\n        <div className=\"w-10\" /> {/* Spacer for alignment */}\n      </div>\n    </div>\n  );\n});\n\nexport default TopBar;\n","size_bytes":791},"client/src/contexts/AppContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { AppSettings, UserPlan, ChatSession, WalletBalance } from '@/types';\nimport { useOfflineStorage } from '@/hooks/useOfflineStorage';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  displayName?: string;\n  bio?: string;\n  avatar?: string;\n  plan: UserPlan;\n}\n\ninterface AppContextType {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  settings: AppSettings;\n  setSettings: (settings: AppSettings) => void;\n  chatSessions: ChatSession[];\n  setChatSessions: (sessions: ChatSession[]) => void;\n  currentChatId: string | null;\n  setCurrentChatId: (id: string | null) => void;\n  wallets: WalletBalance[];\n  setWallets: (wallets: WalletBalance[]) => void;\n  isOnline: boolean;\n  sidebarOpen: boolean;\n  setSidebarOpen: (open: boolean) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport function AppProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const [wallets, setWallets] = useState<WalletBalance[]>([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { getSettings, saveSettings } = useOfflineStorage();\n\n  const [settings, setSettingsState] = useState<AppSettings>({\n    theme: 'light',\n    language: 'en',\n    currency: 'GHS',\n    notifications: {\n      enabled: true,\n      sounds: true,\n      messages: true,\n      transactions: true,\n    },\n    privacy: {\n      dataCollection: false,\n      encryptionEnabled: true,\n      postQuantumEnabled: true,\n    },\n  });\n\n  const setSettings = (newSettings: AppSettings) => {\n    setSettingsState(newSettings);\n    saveSettings(newSettings);\n  };\n\n  // Load settings from storage on mount\n  useEffect(() => {\n    const loadSettings = async () => {\n      const savedSettings = await getSettings();\n      if (savedSettings) {\n        setSettingsState(savedSettings);\n      }\n    };\n    loadSettings();\n  }, []);\n\n  // Monitor online status\n  useEffect(() => {\n    const handleOnlineStatus = () => setIsOnline(navigator.onLine);\n    \n    window.addEventListener('online', handleOnlineStatus);\n    window.addEventListener('offline', handleOnlineStatus);\n    \n    return () => {\n      window.removeEventListener('online', handleOnlineStatus);\n      window.removeEventListener('offline', handleOnlineStatus);\n    };\n  }, []);\n\n  // Close sidebar on mobile when route changes\n  useEffect(() => {\n    if (window.innerWidth < 1024) {\n      setSidebarOpen(false);\n    }\n  }, [currentChatId]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        settings,\n        setSettings,\n        chatSessions,\n        setChatSessions,\n        currentChatId,\n        setCurrentChatId,\n        wallets,\n        setWallets,\n        isOnline,\n        sidebarOpen,\n        setSidebarOpen,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within AppProvider');\n  }\n  return context;\n}\n","size_bytes":3333},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\n\nexport const AuthContext = createContext<any>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<any>(null);\n  const [profile, setProfile] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [authLoading, setAuthLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const {\n        data: { user: currentUser },\n      } = await supabase.auth.getUser();\n      setUser(currentUser ?? null);\n      if (currentUser) await loadProfile(currentUser.id);\n      setLoading(false);\n    })();\n\n  const { data: sub } = supabase.auth.onAuthStateChange((_event: any, session: any) => {\n      const u = session?.user ?? null;\n      setUser(u);\n      if (u) loadProfile(u.id);\n      else setProfile(null);\n    });\n\n    return () => sub.subscription.unsubscribe();\n  }, []);\n\n  const loadProfile = async (id: string) => {\n    try {\n      const { data, error } = await supabase.from('profiles').select('*').eq('id', id).single();\n      if (!error) setProfile(data);\n  } catch (_e) {\n      // ignore\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    setAuthLoading(true);\n    try {\n      const {\n        data: { user },\n        error,\n      } = await supabase.auth.signInWithPassword({ email, password });\n      if (error) throw error;\n      if (user) await loadProfile(user.id);\n      return { user };\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  const signUp = async (full_name: string, email: string, password: string) => {\n    setAuthLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: { data: { full_name } },\n      });\n      if (error) throw error;\n      const userId = data?.user?.id ?? null;\n      if (userId) {\n        const profile = {\n          id: userId,\n          full_name,\n          email,\n          plan: 'free',\n          created_at: new Date().toISOString(),\n        };\n        await supabase.from('profiles').upsert(profile);\n        setProfile(profile);\n      }\n      return { data };\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n    setUser(null);\n    setProfile(null);\n  };\n\n  const signInWithGoogle = async () => {\n    setAuthLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/home`\n        }\n      });\n      if (error) throw error;\n      return { data };\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  const signInWithGitHub = async () => {\n    setAuthLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/home`\n        }\n      });\n      if (error) throw error;\n      return { data };\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, profile, loading, authLoading, signIn, signUp, signOut, signInWithGoogle, signInWithGitHub }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default AuthProvider;\n","size_bytes":3391},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\ntype ThemeVariant = 'default' | 'premium' | 'gradient' | 'neon';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  resolvedTheme: 'light' | 'dark';\n  themeVariant: ThemeVariant;\n  setThemeVariant: (variant: ThemeVariant) => void;\n  isPremium: boolean;\n  setIsPremium: (premium: boolean) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem('theme') as Theme) || 'system';\n    }\n    return 'system';\n  });\n\n  const [themeVariant, setThemeVariant] = useState<ThemeVariant>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem('themeVariant') as ThemeVariant) || 'default';\n    }\n    return 'default';\n  });\n\n  const [isPremium, setIsPremium] = useState<boolean>(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('isPremium') === 'true';\n    }\n    return false;\n  });\n\n  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    const updateTheme = (newTheme: 'light' | 'dark') => {\n      setResolvedTheme(newTheme);\n      root.classList.remove('light', 'dark', 'premium', 'gradient', 'neon');\n      root.classList.add(newTheme, themeVariant);\n      \n      // Set CSS custom properties for gradients\n      if (themeVariant === 'gradient') {\n        root.style.setProperty('--gradient-primary', newTheme === 'dark' \n          ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n          : 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)');\n        root.style.setProperty('--gradient-secondary', newTheme === 'dark'\n          ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'\n          : 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)');\n      } else if (themeVariant === 'neon') {\n        root.style.setProperty('--neon-primary', newTheme === 'dark' ? '#00ffff' : '#ff6b6b');\n        root.style.setProperty('--neon-secondary', newTheme === 'dark' ? '#ff00ff' : '#4ecdc4');\n      }\n    };\n\n    if (theme === 'system') {\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      updateTheme(mediaQuery.matches ? 'dark' : 'light');\n      \n      const handler = (e: MediaQueryListEvent) => {\n        updateTheme(e.matches ? 'dark' : 'light');\n      };\n      \n      mediaQuery.addEventListener('change', handler);\n      return () => mediaQuery.removeEventListener('change', handler);\n    } else {\n      updateTheme(theme);\n    }\n  }, [theme, themeVariant]);\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  useEffect(() => {\n    localStorage.setItem('themeVariant', themeVariant);\n  }, [themeVariant]);\n\n  useEffect(() => {\n    localStorage.setItem('isPremium', isPremium.toString());\n  }, [isPremium]);\n\n  return (\n    <ThemeContext.Provider value={{ \n      theme, \n      setTheme, \n      resolvedTheme, \n      themeVariant, \n      setThemeVariant, \n      isPremium, \n      setIsPremium \n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":3543},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAI.ts":{"content":"import { useState, useCallback } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { offlineAI } from '@/lib/offlineAI';\nimport { useApp } from '@/contexts/AppContext';\n\ninterface AIResponse {\n  content: string;\n  metadata?: any;\n}\n\ninterface TransactionValidation {\n  isValid: boolean;\n  confidence: number;\n  reason: string;\n  suggestions?: string[];\n}\n\nexport function useAI() {\n  const { isOnline } = useApp();\n  const { user } = useApp();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Send message to AI\n  const sendMessage = useMutation({\n    mutationFn: async ({ message, chatId }: { message: string; chatId: string }) => {\n      if (!isOnline) {\n        throw new Error('AI chat requires internet connection');\n      }\n\n      const payload: any = {\n        message,\n        conversation_id: chatId,\n        user_id: user?.id || 'anonymous',\n        enhanced: true,\n        enhanced_v2: true,\n      };\n\n      const response = await apiRequest('POST', '/api/ai/chat', payload);\n\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n    },\n  });\n\n  // Generate image\n  const generateImage = useMutation({\n    mutationFn: async ({ prompt }: { prompt: string }) => {\n      if (!isOnline) {\n        throw new Error('Image generation requires internet connection');\n      }\n\n      const response = await apiRequest('POST', '/api/ai/generate-image', {\n        prompt,\n      });\n\n      return await response.json();\n    },\n  });\n\n  // Generate video\n  const generateVideo = useMutation({\n    mutationFn: async ({ prompt, duration = 5 }: { prompt: string; duration?: number }) => {\n      if (!isOnline) {\n        throw new Error('Video generation requires internet connection');\n      }\n\n      const response = await apiRequest('POST', '/api/ai/generate-video', {\n        prompt,\n        duration,\n      });\n\n      return await response.json();\n    },\n  });\n\n  // Offline transaction validation\n  const validateTransaction = useCallback(async (transactionData: any): Promise<TransactionValidation> => {\n    setIsProcessing(true);\n    \n    try {\n      if (isOnline) {\n        // Use online AI validation\n        const response = await apiRequest('POST', '/api/ai/validate-transaction', transactionData);\n        const result = await response.json();\n        return result;\n      } else {\n        // Use offline AI validation\n        return await offlineAI.validateTransaction(transactionData);\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [isOnline]);\n\n  // Generate confirmation prompt\n  const generateConfirmationPrompt = useCallback(async (transactionData: any): Promise<string> => {\n    if (isOnline) {\n      try {\n        const response = await apiRequest('POST', '/api/ai/confirmation-prompt', transactionData);\n        const result = await response.json();\n        return result.prompt;\n      } catch {\n        // Fallback to offline\n        return await offlineAI.generateConfirmationPrompt(transactionData);\n      }\n    }\n    \n    return await offlineAI.generateConfirmationPrompt(transactionData);\n  }, [isOnline]);\n\n  // Validate message content\n  const validateMessage = useCallback(async (content: string) => {\n    return await offlineAI.validateMessage(content);\n  }, []);\n\n  // Generate smart replies\n  const generateSmartReplies = useCallback(async (message: string): Promise<string[]> => {\n    if (isOnline) {\n      try {\n        const response = await apiRequest('POST', '/api/ai/smart-replies', { message });\n        const result = await response.json();\n        return result.replies;\n      } catch {\n        // Fallback to offline\n        return await offlineAI.generateSmartReplies(message);\n      }\n    }\n    \n    return await offlineAI.generateSmartReplies(message);\n  }, [isOnline]);\n\n  // Process file with AI\n  const processFile = useMutation({\n    mutationFn: async ({ file, prompt }: { file: File; prompt?: string }) => {\n      if (!isOnline) {\n        throw new Error('File processing requires internet connection');\n      }\n\n      const formData = new FormData();\n      formData.append('file', file);\n      if (prompt) formData.append('prompt', prompt);\n\n      const response = await fetch('/api/ai/process-file', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('File processing failed');\n      }\n\n      return await response.json();\n    },\n  });\n\n  // Transcribe audio\n  const transcribeAudio = useMutation({\n    mutationFn: async ({ audioBlob }: { audioBlob: Blob }) => {\n      if (!isOnline) {\n        throw new Error('Audio transcription requires internet connection');\n      }\n\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recording.wav');\n\n      const response = await fetch('/api/ai/transcribe', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Audio transcription failed');\n      }\n\n      return await response.json();\n    },\n  });\n\n  return {\n    // Mutations\n    sendMessage,\n    generateImage,\n    generateVideo,\n    processFile,\n    transcribeAudio,\n    \n    // Functions\n    validateTransaction,\n    generateConfirmationPrompt,\n    validateMessage,\n    generateSmartReplies,\n    \n    // State\n    isProcessing,\n    isOnline,\n  };\n}\n","size_bytes":5514},"client/src/hooks/useOfflineStorage.ts":{"content":"import { useState, useCallback } from 'react';\nimport { offlineDb } from '@/lib/offlineDb';\nimport { \n  ChatMessage, \n  ChatSession, \n  TransactionRecord, \n  OfflineQueueItem, \n  AppSettings, \n  WalletBalance \n} from '@/types';\n\nexport function useOfflineStorage() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Messages\n  const saveMessage = useCallback(async (message: ChatMessage) => {\n    setIsLoading(true);\n    try {\n      await offlineDb.put('messages', message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const getMessages = useCallback(async (chatId: string): Promise<ChatMessage[]> => {\n    setIsLoading(true);\n    try {\n      const messages = await offlineDb.getAll('messages', 'chatId', chatId);\n      return messages.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Chat sessions\n  const saveChat = useCallback(async (chat: ChatSession) => {\n    await offlineDb.put('chats', chat);\n  }, []);\n\n  const getChats = useCallback(async (): Promise<ChatSession[]> => {\n    const chats = await offlineDb.getAll('chats');\n    return chats.sort((a, b) => new Date(b.lastMessageAt).getTime() - new Date(a.lastMessageAt).getTime());\n  }, []);\n\n  const updateChatTitle = useCallback(async (chatId: string, newTitle: string) => {\n    const chat = await offlineDb.get('chats', chatId);\n    if (chat) {\n      const updatedChat = { ...chat, title: newTitle, lastMessageAt: new Date().toISOString() };\n      await offlineDb.put('chats', updatedChat);\n    }\n  }, []);\n\n  const deleteChat = useCallback(async (chatId: string) => {\n    await offlineDb.delete('chats', chatId);\n    // Also delete all messages in this chat\n    const messages = await offlineDb.getAll('messages', 'chatId', chatId);\n    for (const message of messages) {\n      await offlineDb.delete('messages', message.id);\n    }\n  }, []);\n\n  // Transactions\n  const saveTransaction = useCallback(async (transaction: TransactionRecord) => {\n    await offlineDb.put('transactions', transaction);\n  }, []);\n\n  const getTransactions = useCallback(async (): Promise<TransactionRecord[]> => {\n    const transactions = await offlineDb.getAll('transactions');\n    return transactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }, []);\n\n  const getQueuedTransactions = useCallback(async (): Promise<TransactionRecord[]> => {\n    return await offlineDb.getAll('transactions', 'offlineQueued', true);\n  }, []);\n\n  // Offline queue\n  const addToQueue = useCallback(async (item: OfflineQueueItem) => {\n    await offlineDb.put('offlineQueue', item);\n  }, []);\n\n  const getQueue = useCallback(async (): Promise<OfflineQueueItem[]> => {\n    return await offlineDb.getAll('offlineQueue', 'timestamp');\n  }, []);\n\n  const removeFromQueue = useCallback(async (itemId: string) => {\n    await offlineDb.delete('offlineQueue', itemId);\n  }, []);\n\n  // Settings\n  const saveSettings = useCallback(async (settings: AppSettings) => {\n    await offlineDb.put('settings', { key: 'app_settings', ...settings });\n  }, []);\n\n  const getSettings = useCallback(async (): Promise<AppSettings | null> => {\n    const result = await offlineDb.get('settings', 'app_settings');\n    if (result) {\n      const { key, ...settings } = result;\n      return settings as AppSettings;\n    }\n    return null;\n  }, []);\n\n  // Wallets\n  const saveWallet = useCallback(async (wallet: WalletBalance) => {\n    await offlineDb.put('wallets', wallet);\n  }, []);\n\n  const getWallets = useCallback(async (): Promise<WalletBalance[]> => {\n    return await offlineDb.getAll('wallets');\n  }, []);\n\n  // Clear all data\n  const clearAllData = useCallback(async () => {\n    await offlineDb.clear('messages');\n    await offlineDb.clear('chats');\n    await offlineDb.clear('transactions');\n    await offlineDb.clear('offlineQueue');\n    await offlineDb.clear('wallets');\n  }, []);\n\n  return {\n    isLoading,\n    // Messages\n    saveMessage,\n    getMessages,\n    // Chats\n    saveChat,\n    getChats,\n    updateChatTitle,\n    deleteChat,\n    // Transactions\n    saveTransaction,\n    getTransactions,\n    getQueuedTransactions,\n    // Queue\n    addToQueue,\n    getQueue,\n    removeFromQueue,\n    // Settings\n    saveSettings,\n    getSettings,\n    // Wallets\n    saveWallet,\n    getWallets,\n    // Utilities\n    clearAllData,\n  };\n}\n","size_bytes":4398},"client/src/lib/chatNaming.ts":{"content":"import { openAIService } from '../../../server/services/openai';\n\ninterface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant';\n  timestamp: string;\n}\n\n/**\n * Generates a chat title based on the first 3 messages in a conversation\n * @param messages Array of messages (should be first 3 user messages)\n * @returns A concise, descriptive chat title\n */\nexport function generateChatTitle(messages: Message[]): string {\n  // Filter to get only user messages and take first 3\n  const userMessages = messages\n    .filter(msg => msg.role === 'user')\n    .slice(0, 3)\n    .map(msg => msg.content);\n\n  if (userMessages.length === 0) {\n    return 'New Chat';\n  }\n\n  // Combine the messages and extract key topics\n  const combinedText = userMessages.join(' ');\n  \n  // Extract title using simple keywords and heuristics\n  const title = extractTitleFromText(combinedText);\n  \n  return title;\n}\n\n/**\n * Generates an AI-powered chat title using OpenAI (when available)\n * @param messages Array of messages\n * @returns Promise with a descriptive chat title\n */\nexport async function generateAIChatTitle(messages: Message[]): Promise<string> {\n  try {\n    const userMessages = messages\n      .filter(msg => msg.role === 'user')\n      .slice(0, 3)\n      .map(msg => msg.content);\n\n    if (userMessages.length === 0) {\n      return 'New Chat';\n    }\n\n    const combinedText = userMessages.join('\\n');\n    \n    // Check if OpenAI is available (we'll use a simple heuristic for now)\n    // In a real implementation, this would call the OpenAI service\n    \n    // For now, use the simpler title extraction\n    return extractTitleFromText(combinedText);\n    \n  } catch (error) {\n    console.warn('AI title generation failed, using fallback:', error);\n    return generateChatTitle(messages);\n  }\n}\n\n/**\n * Extracts a concise title from text using keyword analysis\n * @param text Combined text from first few messages\n * @returns A descriptive title (max 50 characters)\n */\nfunction extractTitleFromText(text: string): string {\n  const cleanText = text.toLowerCase().trim();\n  \n  // Common patterns and their corresponding titles\n  const patterns = [\n    // Payment and financial\n    { keywords: ['payment', 'pay', 'bill', 'money', 'transfer'], title: 'Payment Discussion' },\n    { keywords: ['airtime', 'data', 'bundle'], title: 'Telecom Services' },\n    { keywords: ['electricity', 'water', 'utility'], title: 'Utility Bills' },\n    { keywords: ['mtn', 'vodafone', 'airteltigo'], title: 'Mobile Money' },\n    \n    // AI and tech\n    { keywords: ['ai', 'artificial intelligence', 'machine learning'], title: 'AI Discussion' },\n    { keywords: ['code', 'programming', 'development'], title: 'Programming Help' },\n    { keywords: ['help', 'support', 'problem'], title: 'Support Request' },\n    \n    // Business and work\n    { keywords: ['business', 'company', 'work'], title: 'Business Inquiry' },\n    { keywords: ['price', 'cost', 'buy', 'purchase'], title: 'Pricing Inquiry' },\n    \n    // Personal\n    { keywords: ['hello', 'hi', 'greet'], title: 'General Chat' },\n    { keywords: ['thank', 'thanks'], title: 'Appreciation' },\n  ];\n\n  // Check for patterns\n  for (const pattern of patterns) {\n    if (pattern.keywords.some(keyword => cleanText.includes(keyword))) {\n      return pattern.title;\n    }\n  }\n\n  // Try to extract main topic from first sentence\n  const firstSentence = text.split(/[.!?]/)[0].trim();\n  if (firstSentence.length > 0) {\n    // Extract meaningful words (remove common words)\n    const words = firstSentence\n      .split(/\\s+/)\n      .filter(word => !isCommonWord(word))\n      .filter(word => word.length > 2)\n      .slice(0, 3);\n\n    if (words.length > 0) {\n      let title = words.join(' ');\n      // Capitalize first letter of each word\n      title = title.replace(/\\b\\w/g, l => l.toUpperCase());\n      \n      // Limit to 50 characters\n      if (title.length > 50) {\n        title = title.substring(0, 47) + '...';\n      }\n      \n      return title;\n    }\n  }\n\n  // Fallback to generic title with timestamp\n  const now = new Date();\n  const timeStr = now.toLocaleTimeString('en-US', { \n    hour: '2-digit', \n    minute: '2-digit',\n    hour12: false \n  });\n  \n  return `Chat ${timeStr}`;\n}\n\n/**\n * Checks if a word is a common word that shouldn't be used in titles\n * @param word Word to check\n * @returns True if it's a common word\n */\nfunction isCommonWord(word: string): boolean {\n  const commonWords = new Set([\n    'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', \n    'by', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them',\n    'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does',\n    'did', 'will', 'would', 'could', 'should', 'may', 'might', 'can', 'this', 'that',\n    'these', 'those', 'what', 'when', 'where', 'why', 'how', 'my', 'your', 'his', 'her',\n    'its', 'our', 'their'\n  ]);\n  \n  return commonWords.has(word.toLowerCase());\n}\n\n/**\n * Updates chat title automatically when enough messages are present\n * @param messages Current messages in the chat\n * @param currentTitle Current title of the chat\n * @returns New title if update is needed, null otherwise\n */\nexport function shouldUpdateChatTitle(messages: Message[], currentTitle: string): string | null {\n  // Only update if we have at least 2 user messages and current title is generic\n  const userMessages = messages.filter(msg => msg.role === 'user');\n  \n  if (userMessages.length >= 2 && (\n    currentTitle === 'New Chat' || \n    currentTitle.startsWith('Chat ') ||\n    currentTitle === ''\n  )) {\n    return generateChatTitle(messages);\n  }\n  \n  return null;\n}\n\n/**\n * Schedules automatic title update for a chat\n * @param chatId Chat ID to update\n * @param messages Current messages\n * @param updateCallback Callback to update the chat title\n */\nexport function scheduleAutomaticTitleUpdate(\n  chatId: string, \n  messages: Message[], \n  updateCallback: (chatId: string, newTitle: string) => void\n): void {\n  // Update title after 3 user messages\n  const userMessages = messages.filter(msg => msg.role === 'user');\n  \n  if (userMessages.length === 3) {\n    const newTitle = generateChatTitle(messages);\n    updateCallback(chatId, newTitle);\n  }\n}","size_bytes":6242},"client/src/lib/encryption.ts":{"content":"// Mock post-quantum encryption implementation\n// In production, this would use actual post-quantum cryptography libraries\n\nexport class PostQuantumCrypto {\n  private static instance: PostQuantumCrypto;\n  \n  static getInstance(): PostQuantumCrypto {\n    if (!PostQuantumCrypto.instance) {\n      PostQuantumCrypto.instance = new PostQuantumCrypto();\n    }\n    return PostQuantumCrypto.instance;\n  }\n\n  async generateKeyPair(): Promise<{ publicKey: string; privateKey: string }> {\n    // Simulate key generation\n    const publicKey = this.generateRandomKey(64);\n    const privateKey = this.generateRandomKey(128);\n    \n    return { publicKey, privateKey };\n  }\n\n  async encrypt(data: string, publicKey: string): Promise<string> {\n    // Simulate post-quantum encryption\n    const encrypted = btoa(JSON.stringify({\n      data: btoa(data),\n      key: publicKey.slice(0, 16),\n      timestamp: Date.now(),\n      algorithm: 'CRYSTALS-Kyber-1024'\n    }));\n    \n    return encrypted;\n  }\n\n  async decrypt(encryptedData: string, privateKey: string): Promise<string> {\n    try {\n      const parsed = JSON.parse(atob(encryptedData));\n      \n      // Simulate decryption validation\n      if (parsed.algorithm !== 'CRYSTALS-Kyber-1024') {\n        throw new Error('Invalid encryption algorithm');\n      }\n      \n      return atob(parsed.data);\n    } catch (error) {\n      throw new Error('Decryption failed: ' + error.message);\n    }\n  }\n\n  async sign(data: string, privateKey: string): Promise<string> {\n    // Simulate digital signature with CRYSTALS-Dilithium\n    const signature = btoa(JSON.stringify({\n      data: btoa(data),\n      key: privateKey.slice(0, 32),\n      timestamp: Date.now(),\n      algorithm: 'CRYSTALS-Dilithium-5'\n    }));\n    \n    return signature;\n  }\n\n  async verify(data: string, signature: string, publicKey: string): Promise<boolean> {\n    try {\n      const parsed = JSON.parse(atob(signature));\n      \n      if (parsed.algorithm !== 'CRYSTALS-Dilithium-5') {\n        return false;\n      }\n      \n      const originalData = atob(parsed.data);\n      return originalData === data;\n    } catch {\n      return false;\n    }\n  }\n\n  private generateRandomKey(length: number): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    \n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    return result;\n  }\n}\n\n// Standard AES encryption for non-critical data\nexport class StandardCrypto {\n  async encrypt(data: string, password: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    const passwordBuffer = encoder.encode(password);\n    \n    // Generate key from password\n    const key = await crypto.subtle.importKey(\n      'raw',\n      passwordBuffer,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveKey']\n    );\n    \n    const derivedKey = await crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt: new Uint8Array(16),\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      key,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['encrypt']\n    );\n    \n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const encrypted = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv },\n      derivedKey,\n      dataBuffer\n    );\n    \n    return btoa(JSON.stringify({\n      iv: Array.from(iv),\n      data: Array.from(new Uint8Array(encrypted))\n    }));\n  }\n\n  async decrypt(encryptedData: string, password: string): Promise<string> {\n    const parsed = JSON.parse(atob(encryptedData));\n    const iv = new Uint8Array(parsed.iv);\n    const data = new Uint8Array(parsed.data);\n    \n    const encoder = new TextEncoder();\n    const passwordBuffer = encoder.encode(password);\n    \n    const key = await crypto.subtle.importKey(\n      'raw',\n      passwordBuffer,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveKey']\n    );\n    \n    const derivedKey = await crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt: new Uint8Array(16),\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      key,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['decrypt']\n    );\n    \n    const decrypted = await crypto.subtle.decrypt(\n      { name: 'AES-GCM', iv },\n      derivedKey,\n      data\n    );\n    \n    const decoder = new TextDecoder();\n    return decoder.decode(decrypted);\n  }\n}\n\nexport const postQuantumCrypto = PostQuantumCrypto.getInstance();\nexport const standardCrypto = new StandardCrypto();\n","size_bytes":4581},"client/src/lib/offlineAI.ts":{"content":"// Lightweight offline AI simulation for transaction validation\n// In production, this would run a quantized model like TensorFlow.js or ONNX.js\n\ninterface ValidationResult {\n  isValid: boolean;\n  confidence: number;\n  reason: string;\n  suggestions?: string[];\n}\n\ninterface TransactionData {\n  amount: number;\n  currency: string;\n  fromUserId?: string;\n  toUserId?: string;\n  paymentMethod?: string;\n  type: string;\n  userBalance?: number;\n  previousTransactions?: any[];\n}\n\nexport class OfflineAI {\n  private static instance: OfflineAI;\n  \n  static getInstance(): OfflineAI {\n    if (!OfflineAI.instance) {\n      OfflineAI.instance = new OfflineAI();\n    }\n    return OfflineAI.instance;\n  }\n\n  // Simulate AI-powered transaction validation\n  async validateTransaction(data: TransactionData): Promise<ValidationResult> {\n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n\n    const validationChecks = [];\n\n    // Basic validation checks\n    if (data.amount <= 0) {\n      return {\n        isValid: false,\n        confidence: 0.95,\n        reason: 'Invalid amount: must be greater than zero',\n      };\n    }\n\n    if (data.amount > 50000) {\n      return {\n        isValid: false,\n        confidence: 0.90,\n        reason: 'Amount exceeds daily limit',\n        suggestions: ['Split into smaller transactions', 'Contact support for higher limits'],\n      };\n    }\n\n    // Balance check\n    if (data.userBalance !== undefined && data.amount > data.userBalance) {\n      return {\n        isValid: false,\n        confidence: 0.98,\n        reason: 'Insufficient balance',\n        suggestions: ['Add funds to your account', 'Reduce transaction amount'],\n      };\n    }\n\n    // Fraud detection simulation\n    const fraudScore = this.calculateFraudScore(data);\n    if (fraudScore > 0.7) {\n      return {\n        isValid: false,\n        confidence: 0.85,\n        reason: 'Transaction flagged for potential fraud',\n        suggestions: ['Verify recipient details', 'Contact support if legitimate'],\n      };\n    }\n\n    // Rate limiting check\n    if (this.checkRateLimit(data)) {\n      return {\n        isValid: false,\n        confidence: 0.92,\n        reason: 'Too many transactions in short period',\n        suggestions: ['Wait before next transaction', 'Contact support for business account'],\n      };\n    }\n\n    // All checks passed\n    return {\n      isValid: true,\n      confidence: 0.95 - fraudScore * 0.2,\n      reason: 'Transaction validated successfully',\n    };\n  }\n\n  // Generate AI confirmation prompt\n  async generateConfirmationPrompt(data: TransactionData): Promise<string> {\n    const templates = [\n      `Confirm sending ${data.currency} ${data.amount.toFixed(2)} via ${data.paymentMethod || 'mobile money'}?`,\n      `You're about to transfer ${data.currency} ${data.amount.toFixed(2)}. Proceed with transaction?`,\n      `Please confirm ${data.currency} ${data.amount.toFixed(2)} payment using ${data.paymentMethod || 'selected method'}.`,\n    ];\n\n    return templates[Math.floor(Math.random() * templates.length)];\n  }\n\n  // Validate chat message content\n  async validateMessage(content: string): Promise<{ safe: boolean; reason?: string }> {\n    // Simulate content safety check\n    await new Promise(resolve => setTimeout(resolve, 200));\n\n    const flaggedWords = ['spam', 'scam', 'fraud', 'hack'];\n    const lowercaseContent = content.toLowerCase();\n\n    for (const word of flaggedWords) {\n      if (lowercaseContent.includes(word)) {\n        return {\n          safe: false,\n          reason: `Message contains potentially unsafe content: \"${word}\"`,\n        };\n      }\n    }\n\n    return { safe: true };\n  }\n\n  // Generate smart replies based on message context\n  async generateSmartReplies(message: string): Promise<string[]> {\n    const lowerMessage = message.toLowerCase();\n    \n    if (lowerMessage.includes('transaction') || lowerMessage.includes('payment')) {\n      return [\n        'Need help with payments?',\n        'Check transaction status',\n        'View payment methods',\n      ];\n    }\n\n    if (lowerMessage.includes('error') || lowerMessage.includes('problem')) {\n      return [\n        'What specific error occurred?',\n        'Can you share more details?',\n        'Let me help troubleshoot',\n      ];\n    }\n\n    if (lowerMessage.includes('balance') || lowerMessage.includes('wallet')) {\n      return [\n        'Check current balance',\n        'View transaction history',\n        'Add funds to wallet',\n      ];\n    }\n\n    return [\n      'Tell me more',\n      'How can I help?',\n      'What would you like to know?',\n    ];\n  }\n\n  private calculateFraudScore(data: TransactionData): number {\n    let score = 0;\n\n    // High amount increases fraud score\n    if (data.amount > 1000) score += 0.2;\n    if (data.amount > 5000) score += 0.3;\n\n    // Unusual payment methods\n    if (data.paymentMethod === 'unknown') score += 0.4;\n\n    // Weekend/night transactions (higher risk)\n    const hour = new Date().getHours();\n    if (hour < 6 || hour > 22) score += 0.1;\n\n    // Random factor to simulate ML model uncertainty\n    score += Math.random() * 0.2;\n\n    return Math.min(score, 1);\n  }\n\n  private checkRateLimit(data: TransactionData): boolean {\n    // Simulate rate limiting check\n    // In real implementation, this would check recent transaction history\n    return Math.random() < 0.05; // 5% chance of rate limit trigger\n  }\n}\n\nexport const offlineAI = OfflineAI.getInstance();\n","size_bytes":5471},"client/src/lib/offlineDb.ts":{"content":"// IndexedDB wrapper for offline storage\nclass OfflineDatabase {\n  private dbName = 'ZenuxAI';\n  private version = 1;\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        // Create object stores\n        if (!db.objectStoreNames.contains('messages')) {\n          const messageStore = db.createObjectStore('messages', { keyPath: 'id' });\n          messageStore.createIndex('chatId', 'chatId', { unique: false });\n          messageStore.createIndex('createdAt', 'createdAt', { unique: false });\n        }\n        \n        if (!db.objectStoreNames.contains('chats')) {\n          const chatStore = db.createObjectStore('chats', { keyPath: 'id' });\n          chatStore.createIndex('lastMessageAt', 'lastMessageAt', { unique: false });\n        }\n        \n        if (!db.objectStoreNames.contains('transactions')) {\n          const transactionStore = db.createObjectStore('transactions', { keyPath: 'id' });\n          transactionStore.createIndex('status', 'status', { unique: false });\n          transactionStore.createIndex('offlineQueued', 'offlineQueued', { unique: false });\n        }\n        \n        if (!db.objectStoreNames.contains('offlineQueue')) {\n          const queueStore = db.createObjectStore('offlineQueue', { keyPath: 'id' });\n          queueStore.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n        \n        if (!db.objectStoreNames.contains('settings')) {\n          db.createObjectStore('settings', { keyPath: 'key' });\n        }\n        \n        if (!db.objectStoreNames.contains('wallets')) {\n          db.createObjectStore('wallets', { keyPath: 'id' });\n        }\n      };\n    });\n  }\n\n  async getStore(storeName: string, mode: IDBTransactionMode = 'readonly'): Promise<IDBObjectStore> {\n    if (!this.db) {\n      await this.init();\n    }\n    const transaction = this.db!.transaction([storeName], mode);\n    return transaction.objectStore(storeName);\n  }\n\n  async get(storeName: string, key: string): Promise<any> {\n    const store = await this.getStore(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAll(storeName: string, indexName?: string, query?: IDBValidKey): Promise<any[]> {\n    const store = await this.getStore(storeName);\n    return new Promise((resolve, reject) => {\n      let request: IDBRequest;\n      \n      if (indexName) {\n        const index = store.index(indexName);\n        request = query ? index.getAll(query) : index.getAll();\n      } else {\n        request = store.getAll();\n      }\n      \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async put(storeName: string, data: any): Promise<void> {\n    const store = await this.getStore(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.put(data);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async delete(storeName: string, key: string): Promise<void> {\n    const store = await this.getStore(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.delete(key);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clear(storeName: string): Promise<void> {\n    const store = await this.getStore(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.clear();\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\nexport const offlineDb = new OfflineDatabase();\n","size_bytes":4174},"client/src/lib/paystack.ts":{"content":"\nimport axios from 'axios';\n\n// Use the current origin for web environment\nconst SERVER = import.meta.env.VITE_API_URL || `${window.location.protocol}//${window.location.hostname}:3000`;\n\nexport async function initializePayment(email: string, amountKobo: number) {\n  const resp = await axios.post(`${SERVER}/api/paystack/initialize`, { email, amount: amountKobo });\n  return resp.data;\n}\n\nexport async function verifyPayment(reference: string) {\n  const resp = await axios.post(`${SERVER}/api/paystack/verify`, { reference });\n  return resp.data;\n}\n\nexport async function processUpgrade(plan: string, email: string, amount: number) {\n  try {\n    const paymentData = await initializePayment(email, amount * 100); // Convert to kobo\n    \n    // In a real app, you would integrate with Paystack's payment modal\n    // For now, we'll simulate the payment flow\n    const paymentUrl = paymentData.authorization_url;\n    \n    // Open payment window\n    window.open(paymentUrl, '_blank');\n    \n    return { success: true, paymentUrl, reference: paymentData.reference };\n  } catch (error) {\n    console.error('Payment initialization failed:', error);\n    return { success: false, error: 'Payment initialization failed' };\n  }\n}\n\nexport default { initializePayment, verifyPayment, processUpgrade };\n","size_bytes":1289},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import 'cross-fetch/polyfill';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;\n\nconsole.log('Vite env:', import.meta.env);\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Supabase environment variables are not set\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport default supabase;\n","size_bytes":471},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/not-used-pages/bill.tsx":{"content":"import React, { useState } from 'react';\nimport { Phone, Wifi, ShoppingCart, Package, Gift, CreditCard, ArrowRight, ChevronLeft } from 'lucide-react';\n\nexport default function BillsPage() {\n  const [selectedService, setSelectedService] = useState('data');\n  const [amount, setAmount] = useState('');\n\n  const services = [\n    { id: 'data', title: 'Data Bundle', icon: <Wifi color=\"#4A90E2\" size={24} />, description: 'Buy mobile data for yourself or others' },\n    { id: 'airtime', title: 'Airtime', icon: <Phone color=\"#4A90E2\" size={24} />, description: 'Top up airtime for any network' },\n    { id: 'food', title: 'Food Voucher', icon: <ShoppingCart color=\"#4A90E2\" size={24} />, description: 'Get discount on food orders' },\n    { id: 'addons', title: 'Add-ons', icon: <Package color=\"#4A90E2\" size={24} />, description: 'Extra services and features' },\n    { id: 'gifts', title: 'Gift Credits', icon: <Gift color=\"#4A90E2\" size={24} />, description: 'Send credits as gifts to friends' },\n  ];\n\n  const dataBundles = [\n    { id: 1, size: '500MB', price: '$2.50', validity: '1 day' },\n    { id: 2, size: '1GB', price: '$4.50', validity: '3 days' },\n    { id: 3, size: '2GB', price: '$8.00', validity: '7 days' },\n    { id: 4, size: '5GB', price: '$18.00', validity: '15 days' },\n    { id: 5, size: '10GB', price: '$32.00', validity: '30 days' },\n    { id: 6, size: '20GB', price: '$55.00', validity: '30 days' },\n  ];\n\n  const airtimeOptions = [\n    { id: 1, amount: '$5.00' },\n    { id: 2, amount: '$10.00' },\n    { id: 3, amount: '$20.00' },\n    { id: 4, amount: '$50.00' },\n    { id: 5, amount: '$100.00' },\n  ];\n\n  const foodVouchers = [\n    { id: 1, name: 'McDonalds', discount: '20% off', minSpend: '$15' },\n    { id: 2, name: 'Starbucks', discount: '$5 off', minSpend: '$20' },\n    { id: 3, name: 'Uber Eats', discount: '$10 off', minSpend: '$30' },\n    { id: 4, name: 'Pizza Hut', discount: '15% off', minSpend: '$25' },\n  ];\n\n  function renderServiceOptions() {\n    switch (selectedService) {\n      case 'data':\n        return (\n          <div className=\"mt-4\">\n            <span className=\"text-gray-900 font-bold mb-3 block\">Select Data Bundle</span>\n            <div className=\"flex flex-wrap gap-3\">\n              {dataBundles.map(bundle => (\n                <button\n                  key={bundle.id}\n                  className=\"bg-white rounded-xl p-4 flex-1 min-w-[45%] border border-gray-200 text-left\"\n                  type=\"button\"\n                >\n                  <div className=\"flex justify-between items-start\">\n                    <span className=\"text-gray-900 font-bold\">{bundle.size}</span>\n                    <span className=\"text-blue-600 font-bold\">{bundle.price}</span>\n                  </div>\n                  <span className=\"text-gray-500 text-sm mt-2 block\">{bundle.validity}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n        );\n      case 'airtime':\n        return (\n          <div className=\"mt-4\">\n            <span className=\"text-gray-900 font-bold mb-3 block\">Select Amount</span>\n            <div className=\"flex flex-wrap gap-3\">\n              {airtimeOptions.map(option => (\n                <button\n                  key={option.id}\n                  className=\"bg-white rounded-xl p-4 flex-1 min-w-[30%] items-center border border-gray-200\"\n                  type=\"button\"\n                >\n                  <span className=\"text-blue-600 font-bold\">{option.amount}</span>\n                </button>\n              ))}\n            </div>\n            <div className=\"mt-4\">\n              <span className=\"text-gray-900 font-bold mb-2 block\">Or Enter Custom Amount</span>\n              <input\n                className=\"bg-gray-100 rounded-xl p-4 w-full\"\n                placeholder=\"Enter amount\"\n                value={amount}\n                onChange={e => setAmount(e.target.value)}\n                type=\"number\"\n              />\n            </div>\n          </div>\n        );\n      case 'food':\n        return (\n          <div className=\"mt-4\">\n            <span className=\"text-gray-900 font-bold mb-3 block\">Select Voucher</span>\n            {foodVouchers.map(voucher => (\n              <button\n                key={voucher.id}\n                className=\"bg-white rounded-xl p-4 mb-3 flex justify-between items-center border border-gray-200 w-full text-left\"\n                type=\"button\"\n              >\n                <span>\n                  <span className=\"text-gray-900 font-bold block\">{voucher.name}</span>\n                  <span className=\"text-gray-600 text-sm block\">Min spend: {voucher.minSpend}</span>\n                </span>\n                <span className=\"text-blue-600 font-bold\">{voucher.discount}</span>\n              </button>\n            ))}\n          </div>\n        );\n      default:\n        return (\n          <div className=\"mt-4 bg-white rounded-xl p-6 flex items-center justify-center\">\n            <span className=\"text-gray-500 text-center\">Select a service to get started</span>\n          </div>\n        );\n    }\n  }\n\n  return (\n  <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      {/* Top bar (sticky) */}\n      <div className=\"sticky top-0 bg-white z-20 border-b\">\n        <div className=\"px-6 py-4 relative max-w-5xl mx-auto\">\n          <button onClick={() => window.history.back()} aria-label=\"Go back\" className=\"absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-md hover:bg-gray-100\">\n            <ChevronLeft size={20} color=\"#374151\" />\n          </button>\n          <div className=\"text-center\">\n            <h1 className=\"text-gray-900 text-2xl font-bold\">Bills & Services</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"px-4 pt-6\">\n        <p className=\"text-gray-600 text-center mb-4\">Purchase bundles, airtime, food vouchers and more</p>\n      </div>\n      <div className=\"flex-1 px-4 pt-4 overflow-y-auto\">\n        {/* Service Selection */}\n        <div className=\"bg-white rounded-2xl p-4 shadow\">\n          <span className=\"text-gray-900 text-lg font-bold mb-4 block\">Select Service</span>\n          <div className=\"flex flex-wrap gap-3\">\n            {services.map(service => (\n              <button\n                key={service.id}\n                className={`flex-1 min-w-[45%] rounded-xl p-4 flex flex-col items-center ${selectedService === service.id ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50 border border-gray-200'}`}\n                type=\"button\"\n                onClick={() => setSelectedService(service.id)}\n              >\n                {service.icon}\n                <span className=\"text-gray-900 font-semibold mt-2 block\">{service.title}</span>\n                <span className=\"text-gray-500 text-xs text-center mt-1 block\">{service.description}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n        {/* Service Options */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow\">\n          {renderServiceOptions()}\n        </div>\n        {/* Payment Method */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow\">\n          <div className=\"flex items-center mb-4\">\n            <CreditCard color=\"gray\" size={24} />\n            <span className=\"text-gray-900 text-lg font-bold ml-2\">Payment Method</span>\n          </div>\n          <div className=\"flex justify-between items-center p-4 bg-gray-50 rounded-xl\">\n            <span className=\"text-gray-900\">Wallet Balance</span>\n            <span className=\"text-gray-900 font-bold\">$1,248.75</span>\n          </div>\n          <div className=\"mt-4 flex justify-between items-center p-4 bg-gray-50 rounded-xl\">\n            <span className=\"text-gray-900\">AI Credits</span>\n            <span className=\"text-gray-900 font-bold\">1,250 credits</span>\n          </div>\n        </div>\n        {/* Purchase Button */}\n        <button className=\"mt-6 mb-8 bg-blue-600 rounded-2xl p-5 flex items-center justify-center w-full\" type=\"button\">\n          <span className=\"text-white text-lg font-bold mr-2\">Purchase Now</span>\n          <ArrowRight color=\"white\" size={24} />\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8197},"client/src/not-used-pages/create-group.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport {\n  Users,\n  Plus,\n  Search,\n  Shield,\n  Camera,\n  X,\n  Check,\n} from 'lucide-react';\n\ntype Member = {\n  id: string;\n  name: string;\n  username: string;\n  avatar: string;\n};\n\nconst mockPotentialMembers: Member[] = [\n  { id: '1', name: 'Alex Johnson', username: '@alexj', avatar: 'https://i.pravatar.cc/150?img=1' },\n  { id: '2', name: 'Sam Wilson', username: '@samw', avatar: 'https://i.pravatar.cc/150?img=2' },\n  { id: '3', name: 'Taylor Kim', username: '@taylork', avatar: 'https://i.pravatar.cc/150?img=3' },\n  { id: '4', name: 'Jordan Smith', username: '@jordans', avatar: 'https://i.pravatar.cc/150?img=4' },\n  { id: '5', name: 'Casey Brown', username: '@caseyb', avatar: 'https://i.pravatar.cc/150?img=5' },\n  { id: '6', name: 'Morgan Lee', username: '@morganl', avatar: 'https://i.pravatar.cc/150?img=6' },\n  { id: '7', name: 'Riley Davis', username: '@rileyd', avatar: 'https://i.pravatar.cc/150?img=7' },\n  { id: '8', name: 'Quinn Miller', username: '@quinnm', avatar: 'https://i.pravatar.cc/150?img=8' },\n];\n\nexport default function CreateGroupPage() {\n  const [, setLocation] = useLocation();\n  const [groupName, setGroupName] = useState('');\n  const [groupDescription, setGroupDescription] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);\n  const [step, setStep] = useState(1); // 1: Group info, 2: Invite members, 3: Permissions\n\n  const filteredMembers = mockPotentialMembers.filter(member =>\n    member.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    member.username.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const toggleMemberSelection = (id: string) => {\n    setSelectedMembers(sel =>\n      sel.includes(id) ? sel.filter(memberId => memberId !== id) : [...sel, id]\n    );\n  };\n\n  // Step 1: Group Info\n  const renderGroupInfo = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"relative w-full mt-4 mb-6\">\n        <button type=\"button\" onClick={() => setLocation('/group-list')} aria-label=\"Cancel and go back\" className=\"absolute left-0 top-0 p-2 rounded-md hover:bg-gray-100\">\n          Cancel\n        </button>\n\n        <div className=\"text-2xl font-bold text-gray-900 text-center\">Create New Group</div>\n        <div className=\"text-gray-600 text-center mt-2\">Set up your group chat details</div>\n      </div>\n\n      <div className=\"bg-white rounded-2xl p-6 shadow-sm mb-6\">\n        <div className=\"flex flex-col items-center mb-6\">\n          <div className=\"w-24 h-24 rounded-full bg-gray-100 flex items-center justify-center relative\">\n            <Camera color=\"#6B7280\" size={32} />\n            <button type=\"button\" className=\"absolute bottom-0 right-0 bg-blue-500 rounded-full p-2 border-2 border-white\">\n              <Plus color=\"white\" size={16} />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"mb-4\">\n          <div className=\"text-gray-700 font-medium mb-2\">Group Name</div>\n          <input\n            className=\"border border-gray-300 rounded-xl p-4 text-gray-900 w-full\"\n            placeholder=\"Enter group name\"\n            value={groupName}\n            onChange={e => setGroupName(e.target.value)}\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <div className=\"text-gray-700 font-medium mb-2\">Description (Optional)</div>\n          <textarea\n            className=\"border border-gray-300 rounded-xl p-4 text-gray-900 w-full h-24 resize-none\"\n            placeholder=\"What is this group about?\"\n            value={groupDescription}\n            onChange={e => setGroupDescription(e.target.value)}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl w-full\"\n          onClick={() => setIsPrivate(!isPrivate)}\n        >\n          <div className=\"flex items-center\">\n            <Shield color={isPrivate ? '#3B82F6' : '#6B7280'} size={20} />\n            <span className=\"font-medium text-gray-900 ml-3\">Private Group</span>\n          </div>\n          <div className={`w-12 h-6 rounded-full flex items-center ${isPrivate ? 'bg-blue-500 justify-end' : 'bg-gray-300 justify-start'} p-1`}>\n            <div className=\"w-5 h-5 rounded-full bg-white\" />\n          </div>\n        </button>\n      </div>\n\n      <button\n        type=\"button\"\n        className={`py-4 rounded-2xl w-full font-bold items-center ${groupName.trim() ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-500'}`}\n        disabled={!groupName.trim()}\n        onClick={() => setStep(2)}\n      >\n        Continue\n      </button>\n    </div>\n  );\n\n  // Step 2: Invite Members\n  const renderInviteMembers = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"text-2xl font-bold text-gray-900 mb-2\">Invite Members</div>\n      <div className=\"text-gray-600 mb-6\">\n        {selectedMembers.length > 0\n          ? `${selectedMembers.length} member${selectedMembers.length > 1 ? 's' : ''} selected`\n          : 'Select members to invite'}\n      </div>\n\n      <div className=\"bg-white rounded-2xl p-4 shadow-sm mb-4\">\n        <div className=\"flex items-center bg-gray-100 rounded-xl px-4 mb-4\">\n          <Search color=\"#6B7280\" size={20} />\n          <input\n            className=\"flex-1 p-4 text-gray-900 bg-transparent outline-none\"\n            placeholder=\"Search members\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n          />\n        </div>\n\n        <div className=\"divide-y divide-gray-100\">\n          {filteredMembers.map(item => {\n            const isSelected = selectedMembers.includes(item.id);\n            return (\n              <div key={item.id} className=\"flex items-center py-3\">\n                <div className=\"relative\">\n                  <img src={item.avatar} alt={item.name} className=\"w-12 h-12 rounded-full\" />\n                  {isSelected && (\n                    <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <Check color=\"white\" size={14} />\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex-1 ml-3\">\n                  <div className=\"font-medium text-gray-900\">{item.name}</div>\n                  <div className=\"text-gray-500 text-sm\">{item.username}</div>\n                </div>\n                {!isSelected ? (\n                  <button\n                    type=\"button\"\n                    className=\"w-8 h-8 rounded-full border-2 border-gray-300 flex items-center justify-center\"\n                    onClick={() => toggleMemberSelection(item.id)}\n                  >\n                    <Plus color=\"#6B7280\" size={16} />\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\"\n                    onClick={() => toggleMemberSelection(item.id)}\n                  >\n                    <X color=\"#6B7280\" size={16} />\n                  </button>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"flex gap-3\">\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-gray-200 font-bold text-gray-700\"\n          onClick={() => setStep(1)}\n        >\n          Back\n        </button>\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-blue-500 font-bold text-white\"\n          onClick={() => setStep(3)}\n        >\n          Continue{selectedMembers.length > 0 ? ` (${selectedMembers.length})` : ''}\n        </button>\n      </div>\n    </div>\n  );\n\n  // Step 3: Permissions\n  const renderPermissions = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"text-2xl font-bold text-gray-900 mb-2\">Group Permissions</div>\n      <div className=\"text-gray-600 mb-6\">Set what members can do in this group</div>\n\n      <div className=\"bg-white rounded-2xl p-6 shadow-sm mb-6\">\n        <div className=\"flex items-center mb-6\">\n          <div className=\"w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center mr-4\">\n            <Users color=\"#3B82F6\" size={24} />\n          </div>\n          <div>\n            <div className=\"font-bold text-gray-900\">{groupName || 'New Group'}</div>\n            <div className=\"text-gray-500\">{selectedMembers.length} member{selectedMembers.length !== 1 ? 's' : ''}</div>\n          </div>\n        </div>\n\n        <div className=\"mb-6\">\n          <div className=\"font-bold text-gray-900 mb-4\">Who can:</div>\n\n          {/* Send Messages */}\n          <div className=\"bg-gray-50 rounded-xl p-4 mb-4\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <div className=\"font-medium text-gray-900\">Send Messages</div>\n              <div className=\"flex\">\n                <button className=\"bg-blue-500 rounded-full px-4 py-2 mr-2 text-white text-sm\">All</button>\n                <button className=\"bg-gray-200 rounded-full px-4 py-2 text-gray-700 text-sm\">Admins</button>\n              </div>\n            </div>\n            <div className=\"text-gray-500 text-sm\">Control who can send messages in this group</div>\n          </div>\n\n          {/* Add Members */}\n          <div className=\"bg-gray-50 rounded-xl p-4 mb-4\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <div className=\"font-medium text-gray-900\">Add Members</div>\n              <div className=\"flex\">\n                <button className=\"bg-blue-500 rounded-full px-4 py-2 mr-2 text-white text-sm\">All</button>\n                <button className=\"bg-gray-200 rounded-full px-4 py-2 text-gray-700 text-sm\">Admins</button>\n              </div>\n            </div>\n            <div className=\"text-gray-500 text-sm\">Control who can invite new members to the group</div>\n          </div>\n\n          {/* Edit Group Info */}\n          <div className=\"bg-gray-50 rounded-xl p-4\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <div className=\"font-medium text-gray-900\">Edit Group Info</div>\n              <div className=\"flex\">\n                <button className=\"bg-gray-200 rounded-full px-4 py-2 mr-2 text-gray-700 text-sm\">All</button>\n                <button className=\"bg-blue-500 rounded-full px-4 py-2 text-white text-sm\">Admins</button>\n              </div>\n            </div>\n            <div className=\"text-gray-500 text-sm\">Control who can change group name and description</div>\n          </div>\n        </div>\n\n        <button type=\"button\" className=\"flex items-center justify-between p-4 bg-blue-50 rounded-xl w-full\">\n          <div className=\"flex items-center\">\n            <Shield color=\"#3B82F6\" size={20} />\n            <span className=\"font-medium text-blue-600 ml-3\">Advanced Permissions</span>\n          </div>\n          <Plus color=\"#3B82F6\" size={20} />\n        </button>\n      </div>\n\n      <div className=\"flex gap-3\">\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-gray-200 font-bold text-gray-700\"\n          onClick={() => setStep(2)}\n        >\n          Back\n        </button>\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-blue-500 font-bold text-white\"\n          onClick={() => {}}\n        >\n          Create Group\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n  <div className=\"min-h-screen bg-gray-50 p-4 pt-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <button type=\"button\" onClick={() => setLocation('/group-list')} className=\"text-blue-500\">\n          Cancel\n        </button>\n        <div className=\"flex items-center\">\n          {[1, 2, 3].map(num => (\n            <div key={num} className=\"flex items-center\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold ${step >= num ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-500'}`}>{num}</div>\n              {num < 3 && (\n                <div className={`h-1 w-8 ${step > num ? 'bg-blue-500' : 'bg-gray-300'}`} />\n              )}\n            </div>\n          ))}\n        </div>\n        <span className=\"text-gray-400 w-10 text-right\">{step}/3</span>\n      </div>\n      {step === 1 && renderGroupInfo()}\n      {step === 2 && renderInviteMembers()}\n      {step === 3 && renderPermissions()}\n    </div>\n  );\n}","size_bytes":12611},"client/src/not-used-pages/group-call.tsx":{"content":"import { useState, useEffect } from 'react';\nimport {\n  Mic,\n  MicOff,\n  Phone,\n  Video,\n  VideoOff,\n  Users,\n  Paperclip,\n  Send,\n  Volume2,\n} from 'lucide-react';\n\nconst participantAvatars = [\n  'https://randomuser.me/api/portraits/men/1.jpg',\n  'https://randomuser.me/api/portraits/women/2.jpg',\n  'https://randomuser.me/api/portraits/men/3.jpg',\n  'https://randomuser.me/api/portraits/women/4.jpg',\n];\n\nexport default function GroupCallPage() {\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isSpeakerOn, setIsSpeakerOn] = useState(true);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [participants, _setParticipants] = useState([\n    { id: 1, name: 'Alex Morgan', isMuted: false, isVideoOn: true, isSpeaking: true },\n    { id: 2, name: 'Taylor Swift', isMuted: true, isVideoOn: false, isSpeaking: false },\n    { id: 3, name: 'Jamie Foxx', isMuted: false, isVideoOn: true, isSpeaking: false },\n    { id: 4, name: 'Jordan Lee', isMuted: false, isVideoOn: false, isSpeaking: false },\n  ]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n    if (isRecording) {\n      interval = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRecording]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const toggleRecording = () => {\n    setIsRecording(r => !r);\n    if (!isRecording) setRecordingTime(0);\n  };\n  const toggleMute = () => setIsMuted(m => !m);\n  const toggleVideo = () => setIsVideoOn(v => !v);\n  const toggleSpeaker = () => setIsSpeakerOn(s => !s);\n  const endCall = () => alert('Call ended');\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-900\">\n      {/* Header with call info */}\n      <div className=\"p-4 bg-gray-800\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-white text-lg font-bold\">Team Meeting</div>\n          <div className=\"text-gray-300\">{formatTime(recordingTime)}</div>\n        </div>\n        <div className=\"text-gray-400 text-sm mt-1\">Group call â€¢ 4 participants</div>\n      </div>\n\n      {/* Main video area */}\n      <div className=\"flex-1 relative\">\n        {/* Active speaker video */}\n        <div className=\"flex-1 bg-black flex items-center justify-center relative\">\n          <img\n            src=\"https://images.unsplash.com/photo-1507679799987-c73779587ccf?w=900&auto=format&fit=crop&q=60\"\n            alt=\"Active Speaker\"\n            className=\"w-full h-full object-cover rounded-lg\"\n            style={{ maxHeight: '60vh' }}\n          />\n          <div className=\"absolute bottom-4 left-4 bg-black/50 px-3 py-1 rounded-full\">\n            <span className=\"text-white font-medium\">Alex Morgan</span>\n          </div>\n        </div>\n\n        {/* Participants grid */}\n        <div className=\"absolute top-4 right-4 flex flex-row flex-wrap w-1/3 gap-2\">\n          {participants.slice(0, 3).map((participant, idx) => (\n            <div key={participant.id} className=\"relative\">\n              <img\n                src={participantAvatars[idx % participantAvatars.length]}\n                alt={participant.name}\n                className=\"w-16 h-16 rounded-lg border-2 border-blue-500 object-cover\"\n              />\n              {participant.isSpeaking && (\n                <div className=\"absolute -top-1 -right-1 bg-green-500 w-5 h-5 rounded-full border-2 border-gray-900\" />\n              )}\n            </div>\n          ))}\n          {participants.length > 3 && (\n            <div className=\"w-16 h-16 bg-gray-700 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold\">+{participants.length - 3}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Recording indicator */}\n        {isRecording && (\n          <div className=\"absolute top-4 left-4 flex flex-row items-center bg-red-500/90 px-3 py-1 rounded-full\">\n            <div className=\"w-3 h-3 bg-white rounded-full mr-2\" />\n            <span className=\"text-white font-medium\">REC</span>\n          </div>\n        )}\n      </div>\n\n      {/* Audio recording section */}\n      <div className=\"bg-gray-800 p-4\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <span className=\"text-white font-bold\">Audio Recording</span>\n          <div className=\"flex flex-row items-center\">\n            <span className=\"text-gray-300 mr-2\">{formatTime(recordingTime)}</span>\n            {isRecording ? (\n              <button \n                onClick={toggleRecording}\n                className=\"bg-red-500 w-10 h-10 rounded-full flex items-center justify-center\"\n              >\n                <div className=\"w-5 h-5 bg-white rounded-sm\" />\n              </button>\n            ) : (\n              <button \n                onClick={toggleRecording}\n                className=\"bg-blue-500 w-10 h-10 rounded-full flex items-center justify-center\"\n              >\n                <div className=\"w-0 h-0 border-l-8 border-l-white border-t-6 border-t-transparent border-b-6 border-b-transparent ml-1\" />\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Recording progress bar */}\n        <div className=\"h-2 bg-gray-700 rounded-full mb-2\">\n          <div \n            className=\"h-full bg-blue-500 rounded-full\" \n            style={{ width: `${Math.min(100, recordingTime / 10)}%` }}\n          />\n        </div>\n        <span className=\"text-gray-400 text-xs\">\n          {isRecording ? 'Recording in progress...' : 'Tap record to start audio capture'}\n        </span>\n      </div>\n\n      {/* File sharing section */}\n      <div className=\"bg-gray-800 p-4\">\n        <span className=\"text-white font-bold mb-3 block\">Share Files</span>\n        <div className=\"flex flex-row gap-2\">\n          <button className=\"flex-1 bg-gray-700 rounded-lg p-3 flex flex-col items-center\">\n            <Paperclip color=\"white\" size={20} />\n            <span className=\"text-white text-xs mt-1\">Document</span>\n          </button>\n          <button className=\"flex-1 bg-gray-700 rounded-lg p-3 flex flex-col items-center\">\n            <img \n              src=\"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=900&auto=format&fit=crop&q=60\" \n              alt=\"Image\" \n              className=\"w-5 h-5 mb-1 object-contain\" />\n            <span className=\"text-white text-xs\">Image</span>\n          </button>\n          <button className=\"flex-1 bg-gray-700 rounded-lg p-3 flex flex-col items-center\">\n            <Send color=\"white\" size={20} />\n            <span className=\"text-white text-xs mt-1\">Send</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Call controls */}\n      <div className=\"bg-gray-800 p-6\">\n        <div className=\"flex flex-row justify-around items-center\">\n          <button \n            onClick={toggleMute}\n            className={`w-14 h-14 rounded-full flex items-center justify-center ${isMuted ? 'bg-red-500' : 'bg-gray-700'}`}\n          >\n            {isMuted ? (\n              <MicOff color=\"white\" size={24} />\n            ) : (\n              <Mic color=\"white\" size={24} />\n            )}\n          </button>\n\n          <button \n            onClick={toggleVideo}\n            className={`w-14 h-14 rounded-full flex items-center justify-center ${!isVideoOn ? 'bg-red-500' : 'bg-gray-700'}`}\n          >\n            {isVideoOn ? (\n              <Video color=\"white\" size={24} />\n            ) : (\n              <VideoOff color=\"white\" size={24} />\n            )}\n          </button>\n\n          <button \n            onClick={toggleSpeaker}\n            className={`w-14 h-14 rounded-full flex items-center justify-center ${isSpeakerOn ? 'bg-blue-500' : 'bg-gray-700'}`}\n          >\n            <Volume2 color=\"white\" size={24} />\n          </button>\n\n          <button className=\"w-14 h-14 rounded-full flex items-center justify-center bg-gray-700\">\n            <Users color=\"white\" size={24} />\n          </button>\n\n          <button \n            onClick={endCall}\n            className=\"w-14 h-14 rounded-full flex items-center justify-center bg-red-500\"\n          >\n            <Phone color=\"white\" size={24} style={{ transform: 'rotate(135deg)' }} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8566},"client/src/not-used-pages/group-chat.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport {\n  Send,\n  Mic,\n  MoreVertical,\n  Phone,\n  Video,\n  Plus,\n  Smile,\n  Camera,\n  Wallet,\n  Check,\n  Clock,\n  WifiOff,\n  X,\n} from 'lucide-react';\n\ntype Participant = {\n  id: string;\n  name: string;\n  avatar: string;\n  online?: boolean;\n};\n\ntype Message = {\n  id: string;\n  userId: string;\n  text: string;\n  timestamp: string;\n  isOwn?: boolean;\n  isImage?: boolean;\n  imageUrl?: string;\n};\n\ntype Transaction = {\n  id: string;\n  title: string;\n  amount: number;\n  date: string;\n  type: 'income' | 'expense';\n  initiator: string;\n};\n\nconst participants: Participant[] = [\n  { id: '1', name: 'Alex Morgan', avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=600&q=60', online: true },\n  { id: '2', name: 'Taylor Swift', avatar: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=600&q=60', online: true },\n  { id: '3', name: 'Chris Evans', avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=600&q=60', online: false },\n  { id: '4', name: 'Emma Watson', avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=600&q=60', online: true },\n  { id: '5', name: 'John Doe', avatar: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=600&q=60', online: false },\n];\n\nconst mockMessages: Message[] = [\n  { id: '1', userId: '1', text: 'Hey everyone! Ready for the meeting tomorrow?', timestamp: '10:30 AM' },\n  { id: '2', userId: '2', text: \"Yes, I've prepared the presentation slides\", timestamp: '10:32 AM' },\n  { id: '3', userId: 'currentUser', text: \"Great! I'll bring the project report\", timestamp: '10:33 AM', isOwn: true },\n  { id: '4', userId: '3', text: \"Don't forget about the client feedback we received yesterday\", timestamp: '10:35 AM' },\n  { id: '5', userId: '4', text: \"I've incorporated those changes into the proposal\", timestamp: '10:40 AM' },\n  { id: '6', userId: 'currentUser', text: 'Perfect! Looking forward to it', timestamp: '10:42 AM', isOwn: true },\n  { id: '7', userId: '5', text: 'See you all tomorrow at 10am', timestamp: '10:45 AM' },\n  { id: '8', userId: 'currentUser', text: 'image', timestamp: '10:50 AM', isOwn: true, isImage: true, imageUrl: 'https://images.unsplash.com/photo-1480694313141-fce5e697ee25?w=900&q=60' },\n];\n\nconst groupWallet = {\n  balance: 1250.75,\n  currency: 'â‚µ',\n  members: [\n    { id: '1', name: 'Alex Morgan', contribution: 500, avatar: participants[0].avatar },\n    { id: '2', name: 'Taylor Swift', contribution: 300, avatar: participants[1].avatar },\n    { id: 'currentUser', name: 'You', contribution: 450.75, avatar: participants[2].avatar },\n  ],\n  recentTransactions: [\n    { id: '1', title: 'Project Expenses', amount: -150.25, date: '2023-05-15', type: 'expense', initiator: 'Alex Morgan' },\n    { id: '2', title: 'Team Contribution', amount: 500, date: '2023-05-12', type: 'income', initiator: 'Taylor Swift' },\n    { id: '3', title: 'Development Tools', amount: -200.5, date: '2023-05-10', type: 'expense', initiator: 'You' },\n  ] as Transaction[],\n};\n\nexport default function GroupChatPage(): JSX.Element {\n  const [messages, setMessages] = useState<Message[]>(mockMessages);\n  const [inputText, setInputText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUsers, setTypingUsers] = useState<string[]>([]);\n  const [showWallet, setShowWallet] = useState(false);\n  const [showSendModal, setShowSendModal] = useState(false);\n  const [sendAmount, setSendAmount] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [offlineCommands, setOfflineCommands] = useState<string[]>([]);\n  const [showOfflineCommands, setShowOfflineCommands] = useState(false);\n  const [_pendingTransaction, _setPendingTransaction] = useState<any>(null);\n\n  const scrollRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const typingTimer = setTimeout(() => {\n      if (Math.random() > 0.7) {\n        setTypingUsers(['Taylor Swift']);\n        setIsTyping(true);\n      } else {\n        setIsTyping(false);\n        setTypingUsers([]);\n      }\n    }, 3000);\n\n    return () => clearTimeout(typingTimer);\n  }, [messages]);\n\n  useEffect(() => {\n    // scroll to bottom when messages change\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = () => {\n    if (inputText.trim() === '') return;\n\n    const newMessage: Message = {\n      id: String(messages.length + 1),\n      userId: 'currentUser',\n      text: inputText,\n      timestamp: 'Now',\n      isOwn: true,\n    };\n\n    setMessages((m) => [...m, newMessage]);\n    setInputText('');\n  };\n\n  const _handleOfflineCommand = (command: string) => {\n    if (command.toLowerCase().includes('send')) {\n      const amountMatch = command.match(/â‚µ(\\d+)/);\n      const recipientMatch = command.match(/to\\s+(\\w+)/i);\n      if (amountMatch && recipientMatch) {\n        const amount = amountMatch[1];\n        const recipientName = recipientMatch[1];\n        _setPendingTransaction({ amount, recipient: recipientName });\n        setShowSendModal(true);\n      }\n    }\n    setOfflineCommands((c) => [command, ...c].slice(0, 10));\n  };\n\n  const renderMessage = (item: Message) => {\n    const isOwn = !!item.isOwn;\n    const user = participants.find((p) => p.id === item.userId) || { name: 'Unknown', avatar: '' };\n\n    if (item.isImage && item.imageUrl) {\n      return (\n        <div className={`flex mb-4 ${isOwn ? 'justify-end' : 'justify-start'}`} key={item.id}>\n          <div className={`max-w-[80%] ${isOwn ? 'bg-blue-500' : 'bg-gray-200'} rounded-2xl p-2`}> \n            <img src={item.imageUrl} alt=\"shared\" className=\"w-64 h-48 rounded-xl object-cover\" />\n            <div className=\"flex items-center justify-end mt-1\">\n              <span className=\"text-xs text-gray-500\">{item.timestamp}</span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={`flex mb-4 ${isOwn ? 'justify-end' : 'justify-start'}`} key={item.id}>\n        {!isOwn && (\n          <img src={user.avatar} alt={user.name} className=\"w-8 h-8 rounded-full mr-2 self-end\" />\n        )}\n        <div className={`max-w-[80%] ${isOwn ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'} rounded-2xl p-3`}>\n          {!isOwn && <div className=\"font-bold text-sm mb-1\">{user.name}</div>}\n          <div>{item.text}</div>\n          <div className=\"flex justify-end mt-1 items-center\">\n            <span className={`text-xs ${isOwn ? 'text-blue-100' : 'text-gray-500'} mr-1`}>{item.timestamp}</span>\n            {isOwn && <Check size={14} color=\"#BFDBFE\" />}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 min-h-screen bg-white flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-white p-4 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"relative\">\n              <img src={participants[0].avatar} alt=\"group\" className=\"w-10 h-10 rounded-full\" />\n              <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white\" />\n            </div>\n            <div className=\"ml-3\">\n              <div className=\"font-bold text-lg\">Project Team</div>\n              <div className=\"text-gray-500 text-sm\">{participants.filter((p) => p.online).length} online</div>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button className=\"p-2\" aria-label=\"wallet\" onClick={() => setShowWallet(true)}>\n              <Wallet size={20} color=\"#4A90E2\" />\n            </button>\n            <button className=\"p-2\">\n              <Phone size={20} color=\"#4A90E2\" />\n            </button>\n            <button className=\"p-2\">\n              <Video size={20} color=\"#4A90E2\" />\n            </button>\n            <button className=\"p-2\">\n              <MoreVertical size={20} color=\"#4A90E2\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Container */}\n      <div ref={scrollRef} className=\"flex-1 p-4 overflow-auto\">\n        <div className=\"mb-4 flex justify-center\">\n          <div className=\"bg-white rounded-2xl p-3\">\n            <div className=\"text-gray-500 text-sm\">Today, June 15</div>\n          </div>\n        </div>\n\n        <div>\n          {messages.map((m) => renderMessage(m))}\n        </div>\n\n        {isTyping && typingUsers.length > 0 && (\n          <div className=\"flex mb-4 items-center\">\n            <img src={participants.find((p) => p.name === typingUsers[0])?.avatar} alt=\"typing\" className=\"w-8 h-8 rounded-full mr-2\" />\n            <div className=\"bg-gray-200 rounded-2xl p-3\">\n              <div className=\"text-gray-800\">{typingUsers[0]} is typing...</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Offline AI Indicator */}\n      <div className=\"bg-orange-100 px-4 py-2 flex items-center\">\n        <WifiOff size={16} color=\"#F39C12\" />\n        <div className=\"text-orange-800 text-xs ml-2 flex-1\">Offline mode active. AI commands will be queued for later processing.</div>\n        <button className=\"text-orange-800 font-bold text-xs\" onClick={() => setShowOfflineCommands(true)}>View Commands</button>\n      </div>\n\n      {/* Input Area */}\n      <div className=\"bg-white p-3 border-t border-gray-200\">\n        <div className=\"flex items-center\">\n          <button className=\"p-2\"><Plus size={24} color=\"#4B5563\" /></button>\n          <button className=\"p-2\"><Camera size={24} color=\"#4B5563\" /></button>\n          <div className=\"flex-1 bg-gray-100 rounded-full flex items-center px-4 py-2 mx-2\">\n            <textarea\n              className=\"flex-1 bg-transparent resize-none outline-none\" \n              placeholder=\"Type a message or command...\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              rows={1}\n            />\n            <button className=\"ml-2\"><Smile size={24} color=\"#4B5563\" /></button>\n          </div>\n\n          <div>\n            {inputText ? (\n              <button className=\"p-2 bg-blue-500 rounded-full ml-2 text-white\" onClick={handleSend} aria-label=\"send\">\n                <Send size={20} color=\"white\" />\n              </button>\n            ) : (\n              <button className=\"p-2\"><Mic size={24} color=\"#4B5563\" /></button>\n            )}\n          </div>\n        </div>\n\n        <button className=\"flex items-center justify-between bg-blue-50 p-3 rounded-xl mt-2 w-full\" onClick={() => setShowWallet(true)}>\n          <div className=\"flex items-center\">\n            <Wallet size={20} color=\"#3B82F6\" />\n            <div className=\"ml-2 font-medium\">Group Wallet</div>\n          </div>\n          <div className=\"font-bold text-blue-600\">â‚µ{groupWallet.balance.toFixed(2)}</div>\n        </button>\n      </div>\n\n      {/* Wallet Modal */}\n      {showWallet && (\n        <div className=\"fixed inset-0 bg-black/40 z-40 flex items-center justify-center\">\n          <div className=\"bg-white w-full max-w-2xl rounded-2xl overflow-auto max-h-[90vh]\">\n            <div className=\"bg-white p-4 flex items-center justify-between\">\n              <div className=\"text-xl font-bold\">Group Wallet</div>\n              <button onClick={() => setShowWallet(false)}><X size={24} /></button>\n            </div>\n            <div className=\"p-4\">\n              <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-6 mb-6 text-white\">\n                <div className=\"text-lg mb-2\">Total Balance</div>\n                <div className=\"text-3xl font-bold mb-4\">â‚µ{groupWallet.balance.toFixed(2)}</div>\n                <button className=\"bg-white py-2 rounded-full px-4 text-blue-600 font-bold\" onClick={() => setShowSendModal(true)}>Send Money</button>\n              </div>\n\n              <div>\n                <div className=\"text-lg font-bold mb-3\">Members</div>\n                <div className=\"space-y-3 mb-6\">\n                  {groupWallet.members.map((m) => (\n                    <div key={m.id} className=\"flex items-center p-3 bg-gray-50 rounded-xl\">\n                      <img src={m.avatar} className=\"w-10 h-10 rounded-full mr-3\" alt={m.name} />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{m.name}</div>\n                        <div className=\"text-gray-500 text-sm\">â‚µ{m.contribution.toFixed(2)}</div>\n                      </div>\n                      {m.id === 'currentUser' && (\n                        <button className=\"bg-blue-500 px-3 py-1 rounded-full text-white\" onClick={() => setShowSendModal(true)}>Send</button>\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"text-lg font-bold mb-3\">Recent Transactions</div>\n                <div className=\"space-y-3\">\n                  {groupWallet.recentTransactions.map((t) => (\n                    <div key={t.id} className=\"flex items-center p-3 bg-gray-50 rounded-xl\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${t.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>\n                        <Wallet size={20} color={t.type === 'income' ? '#10B981' : '#EF4444'} />\n                      </div>\n                      <div className=\"flex-1 ml-3\">\n                        <div className=\"font-medium\">{t.title}</div>\n                        <div className=\"text-gray-500 text-sm\">{t.date} â€¢ {t.initiator}</div>\n                      </div>\n                      <div className={`font-medium ${t.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>{t.type === 'income' ? '+' : ''}â‚µ{Math.abs(t.amount).toFixed(2)}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Send Modal */}\n      {showSendModal && (\n        <div className=\"fixed inset-0 z-50 flex items-end sm:items-center justify-center\">\n          <div className=\"bg-black/40 absolute inset-0\" onClick={() => setShowSendModal(false)} />\n          <div className=\"bg-white w-full max-w-md rounded-t-3xl p-6 relative\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-xl font-bold\">Send Money</div>\n              <button onClick={() => setShowSendModal(false)}><X size={24} /></button>\n            </div>\n            <div className=\"mb-4\">\n              <div className=\"text-gray-500 mb-2\">Amount</div>\n              <div className=\"flex items-end\">\n                <div className=\"text-3xl font-bold mr-2\">â‚µ</div>\n                <input className=\"flex-1 text-3xl font-bold outline-none\" value={sendAmount} onChange={(e) => setSendAmount(e.target.value)} placeholder=\"0.00\" />\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <div className=\"text-gray-500 mb-2\">Recipient</div>\n              <input className=\"w-full border-b border-gray-300 pb-2 outline-none\" value={recipient} onChange={(e) => setRecipient(e.target.value)} placeholder=\"Enter name\" />\n            </div>\n\n            <button className=\"bg-blue-500 py-3 rounded-full w-full text-white font-bold\" onClick={() => {\n              if (sendAmount && recipient) {\n                alert(`Sent â‚µ${sendAmount} to ${recipient}`);\n                setShowSendModal(false);\n                setSendAmount('');\n                setRecipient('');\n              }\n            }}>Send</button>\n          </div>\n        </div>\n      )}\n\n      {/* Offline Commands Modal */}\n      {showOfflineCommands && (\n        <div className=\"fixed inset-0 bg-black/40 z-40 flex items-center justify-center\">\n          <div className=\"bg-white w-full max-w-2xl rounded-2xl p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"text-2xl font-bold\">Offline Commands</div>\n              <button onClick={() => setShowOfflineCommands(false)}><X size={24} /></button>\n            </div>\n            <div>\n              {offlineCommands.length === 0 ? (\n                <div className=\"flex flex-col items-center py-12\">\n                  <WifiOff size={48} color=\"#F39C12\" />\n                  <div className=\"text-gray-500 mt-4 text-center\">No offline commands yet. Try saying something like \"Send â‚µ20 to Ama\"</div>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {offlineCommands.map((cmd, idx) => (\n                    <div key={idx} className=\"bg-gray-50 rounded-xl p-4 flex items-center\">\n                      <Clock size={16} color=\"#9CA3AF\" />\n                      <div className=\"ml-2 flex-1 text-gray-700\">{cmd}</div>\n                      <button><Check size={16} color=\"#10B981\" /></button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n// end of file\n","size_bytes":17058},"client/src/not-used-pages/group-list.tsx":{"content":"import { useState } from 'react';\nimport {\n  Users,\n  MessageCircle,\n  Plus,\n  Search,\n  Camera,\n  Check,\n  Lock,\n  Globe,\n  ChevronLeft,\n} from 'lucide-react';\n\ntype Group = {\n  id: string;\n  name: string;\n  members: number;\n  unread: number;\n  isPrivate: boolean;\n  description: string;\n  avatar: string;\n};\n\ntype Member = {\n  id: string;\n  name: string;\n  username: string;\n  avatar: string;\n};\n\nconst mockGroups: Group[] = [\n  {\n    id: '1',\n    name: 'Design Team',\n    members: 12,\n    unread: 3,\n    isPrivate: true,\n    description: 'UI/UX designers working on mobile projects',\n    avatar: 'https://images.unsplash.com/photo-1521791136064-7986c2920216?w=900&auto=format&fit=crop&q=60',\n  },\n  {\n    id: '2',\n    name: 'Marketing Team',\n    members: 8,\n    unread: 0,\n    isPrivate: false,\n    description: 'Campaign planning and brand strategy',\n    avatar: 'https://images.unsplash.com/photo-1576267423048-15c0040fec78?w=900&auto=format&fit=crop&q=60',\n  },\n  {\n    id: '3',\n    name: 'Engineering',\n    members: 24,\n    unread: 12,\n    isPrivate: true,\n    description: 'Frontend and backend development team',\n    avatar: 'https://images.unsplash.com/photo-1507679799987-c73779587ccf?w=900&auto=format&fit=crop&q=60',\n  },\n  {\n    id: '4',\n    name: 'Product Managers',\n    members: 6,\n    unread: 1,\n    isPrivate: false,\n    description: 'Product strategy and roadmap planning',\n    avatar: 'https://images.unsplash.com/photo-1541085929998-15c0040fec78?w=900&auto=format&fit=crop&q=60',\n  },\n];\n\nconst mockPotentialMembers: Member[] = [\n  { id: '1', name: 'Alex Johnson', username: '@alexj', avatar: 'https://i.pravatar.cc/150?img=1' },\n  { id: '2', name: 'Sam Wilson', username: '@samw', avatar: 'https://i.pravatar.cc/150?img=2' },\n  { id: '3', name: 'Taylor Kim', username: '@taylork', avatar: 'https://i.pravatar.cc/150?img=3' },\n  { id: '4', name: 'Jordan Smith', username: '@jordans', avatar: 'https://i.pravatar.cc/150?img=4' },\n  { id: '5', name: 'Casey Brown', username: '@caseyb', avatar: 'https://i.pravatar.cc/150?img=5' },\n  { id: '6', name: 'Morgan Lee', username: '@morganl', avatar: 'https://i.pravatar.cc/150?img=6' },\n  { id: '7', name: 'Riley Davis', username: '@rileyd', avatar: 'https://i.pravatar.cc/150?img=7' },\n  { id: '8', name: 'Quinn Miller', username: '@quinnm', avatar: 'https://i.pravatar.cc/150?img=8' },\n];\n\nexport default function GroupListPage() {\n  const [groupName, setGroupName] = useState('');\n  const [groupDescription, setGroupDescription] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);\n  const [step, setStep] = useState(1);\n  const [showCreateGroup, setShowCreateGroup] = useState(false);\n\n  const filteredMembers = mockPotentialMembers.filter(member =>\n    member.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    member.username.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const _toggleMemberSelection = (id: string) => {\n    setSelectedMembers(sel =>\n      sel.includes(id) ? sel.filter(memberId => memberId !== id) : [...sel, id]\n    );\n  };\n\n  // Create Group Steps\n  const renderGroupInfo = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center\">\n          <button onClick={() => window.history.back()} aria-label=\"Go back\" className=\"p-2 mr-3 rounded-md hover:bg-gray-100\">\n            <ChevronLeft size={20} color=\"#374151\" />\n          </button>\n          <div className=\"text-2xl font-bold text-gray-900\">Create New Group</div>\n        </div>\n      </div>\n      <div className=\"text-gray-600 mb-6\">Set up your group chat details</div>\n      <div className=\"bg-white rounded-2xl p-6 shadow-sm mb-6\">\n        <div className=\"flex flex-col items-center mb-6\">\n          <div className=\"w-24 h-24 rounded-full bg-gray-100 flex items-center justify-center relative\">\n            <Camera color=\"#6B7280\" size={32} />\n            <button type=\"button\" className=\"absolute bottom-0 right-0 bg-blue-500 rounded-full p-2 border-2 border-white\">\n              <Plus color=\"white\" size={16} />\n            </button>\n          </div>\n        </div>\n        <div className=\"mb-4\">\n          <div className=\"text-gray-700 font-medium mb-2\">Group Name</div>\n          <input\n            className=\"border border-gray-300 rounded-xl p-4 text-gray-900 w-full\"\n            placeholder=\"Enter group name\"\n            value={groupName}\n            onChange={e => setGroupName(e.target.value)}\n          />\n        </div>\n        <div className=\"mb-6\">\n          <div className=\"text-gray-700 font-medium mb-2\">Description (Optional)</div>\n          <textarea\n            className=\"border border-gray-300 rounded-xl p-4 text-gray-900 w-full h-24 resize-none\"\n            placeholder=\"What is this group about?\"\n            value={groupDescription}\n            onChange={e => setGroupDescription(e.target.value)}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl w-full\"\n          onClick={() => setIsPrivate(!isPrivate)}\n        >\n          <div className=\"flex items-center\">\n            {isPrivate ? (\n              <Lock color=\"#3B82F6\" size={20} />\n            ) : (\n              <Globe color=\"#6B7280\" size={20} />\n            )}\n            <span className=\"font-medium text-gray-900 ml-3\">{isPrivate ? 'Private Group' : 'Public Group'}</span>\n          </div>\n          <div className={`w-12 h-6 rounded-full flex items-center ${isPrivate ? 'bg-blue-500 justify-end' : 'bg-gray-300 justify-start'} p-1`}>\n            <div className=\"w-5 h-5 rounded-full bg-white\" />\n          </div>\n        </button>\n      </div>\n      <div className=\"flex gap-3\">\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-gray-200 font-bold text-gray-700\"\n          onClick={() => setShowCreateGroup(false)}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          className={`flex-1 py-4 rounded-2xl font-bold items-center ${groupName.trim() ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-500'}`}\n          disabled={!groupName.trim()}\n          onClick={() => setStep(2)}\n        >\n          Continue\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderInviteMembers = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"text-2xl font-bold text-gray-900 mb-2\">Invite Members</div>\n      <div className=\"text-gray-600 mb-6\">\n        {selectedMembers.length > 0\n          ? `${selectedMembers.length} member${selectedMembers.length > 1 ? 's' : ''} selected`\n          : 'Select members to invite'}\n      </div>\n      <div className=\"bg-white rounded-2xl p-4 shadow-sm mb-4\">\n        <div className=\"flex items-center bg-gray-100 rounded-xl px-4 mb-4\">\n          <Search color=\"#6B7280\" size={20} />\n          <input\n            className=\"flex-1 p-4 text-gray-900 bg-transparent outline-none\"\n            placeholder=\"Search members\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n          />\n        </div>\n        <div className=\"divide-y divide-gray-100\">\n          {filteredMembers.map(item => {\n            const isSelected = selectedMembers.includes(item.id);\n            return (\n              <div key={item.id} className=\"flex items-center py-3\">\n                <div className=\"relative\">\n                  <img src={item.avatar} alt={item.name} className=\"w-12 h-12 rounded-full\" />\n                  {isSelected && (\n                    <div className=\"absolute bottom-0 right-0 bg-green-500 rounded-full p-1 border-2 border-white\">\n                      <Check color=\"white\" size={12} />\n                    </div>\n                  )}\n                </div>\n                <div className=\"ml-3 flex-1\">\n                  <div className=\"font-medium text-gray-900\">{item.name}</div>\n                  <div className=\"text-gray-500 text-sm\">{item.username}</div>\n                </div>\n                <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${isSelected ? 'bg-blue-500 border-blue-500' : 'border-gray-300'}`}>\n                  {isSelected && <Check color=\"white\" size={16} />}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"flex gap-3\">\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-gray-200 font-bold text-gray-700\"\n          onClick={() => setStep(1)}\n        >\n          Back\n        </button>\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-blue-500 font-bold text-white\"\n          onClick={() => setStep(3)}\n        >\n          Continue\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderPermissions = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"text-2xl font-bold text-gray-900 mb-2\">Group Permissions</div>\n      <div className=\"text-gray-600 mb-6\">Set permissions for group members</div>\n      <div className=\"bg-white rounded-2xl p-6 shadow-sm mb-6\">\n        <div className=\"mb-6\">\n          <div className=\"font-medium text-gray-900 mb-4\">Who can invite members?</div>\n          <div className=\"flex gap-3\">\n            <button className=\"flex-1 p-4 bg-blue-50 rounded-xl items-center border border-blue-200 font-medium text-blue-600\">Admins Only</button>\n            <button className=\"flex-1 p-4 bg-gray-100 rounded-xl items-center font-medium text-gray-700\">All Members</button>\n          </div>\n        </div>\n        <div className=\"mb-6\">\n          <div className=\"font-medium text-gray-900 mb-4\">Message permissions</div>\n          <div className=\"flex gap-3\">\n            <button className=\"flex-1 p-4 bg-blue-50 rounded-xl items-center border border-blue-200 font-medium text-blue-600\">All Members</button>\n            <button className=\"flex-1 p-4 bg-gray-100 rounded-xl items-center font-medium text-gray-700\">Admins Only</button>\n          </div>\n        </div>\n        <div className=\"mb-6\">\n          <div className=\"font-medium text-gray-900 mb-4\">Media sharing</div>\n          <div className=\"flex gap-3\">\n            <button className=\"flex-1 p-4 bg-blue-50 rounded-xl items-center border border-blue-200 font-medium text-blue-600\">Enabled</button>\n            <button className=\"flex-1 p-4 bg-gray-100 rounded-xl items-center font-medium text-gray-700\">Admins Only</button>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex gap-3\">\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-gray-200 font-bold text-gray-700\"\n          onClick={() => setStep(2)}\n        >\n          Back\n        </button>\n        <button\n          type=\"button\"\n          className=\"flex-1 py-4 rounded-2xl bg-blue-500 font-bold text-white\"\n          onClick={() => {\n            setShowCreateGroup(false);\n            setStep(1);\n            setGroupName('');\n            setGroupDescription('');\n            setSelectedMembers([]);\n          }}\n        >\n          Create Group\n        </button>\n      </div>\n    </div>\n  );\n\n  // Groups List\n  const renderGroupsList = () => (\n    <div className=\"flex flex-col\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"flex items-center\">\n          <button onClick={() => window.history.back()} aria-label=\"Go back\" className=\"p-2 mr-3 rounded-md hover:bg-gray-100\">\n            <ChevronLeft size={20} color=\"#374151\" />\n          </button>\n          <div className=\"text-2xl font-bold text-gray-900\">Your Groups</div>\n        </div>\n        <button \n          className=\"bg-blue-500 rounded-full p-3\"\n          onClick={() => setShowCreateGroup(true)}\n        >\n          <Plus color=\"white\" size={20} />\n        </button>\n      </div>\n      <div className=\"bg-white rounded-2xl p-4 shadow-sm mb-4\">\n        <div className=\"flex items-center bg-gray-100 rounded-xl px-4 mb-4\">\n          <Search color=\"#6B7280\" size={20} />\n          <input\n            className=\"flex-1 p-4 text-gray-900 bg-transparent outline-none\"\n            placeholder=\"Search groups\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n          />\n        </div>\n        <div className=\"divide-y divide-gray-100\">\n          {mockGroups.map(item => (\n            <div key={item.id} className=\"flex items-center py-4 border-b border-gray-100\">\n              <div className=\"relative\">\n                <img src={item.avatar} alt={item.name} className=\"w-14 h-14 rounded-full object-cover\" />\n                {item.isPrivate && (\n                  <div className=\"absolute bottom-0 right-0 bg-blue-500 rounded-full p-1\">\n                    <Lock color=\"white\" size={12} />\n                  </div>\n                )}\n              </div>\n              <div className=\"ml-4 flex-1\">\n                <div className=\"flex items-center\">\n                  <span className=\"font-bold text-gray-900 text-lg\">{item.name}</span>\n                  {item.unread > 0 && (\n                    <div className=\"ml-2 bg-red-500 rounded-full w-5 h-5 flex items-center justify-center\">\n                      <span className=\"text-white text-xs font-bold\">{item.unread}</span>\n                    </div>\n                  )}\n                </div>\n                <div className=\"text-gray-600 text-sm mt-1\">{item.description}</div>\n                <div className=\"flex items-center mt-1\">\n                  <Users color=\"#6B7280\" size={14} />\n                  <span className=\"text-gray-500 text-sm ml-1\">{item.members} members</span>\n                </div>\n              </div>\n              <MessageCircle color=\"#6B7280\" size={20} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {showCreateGroup ? (\n        step === 1 ? renderGroupInfo() :\n        step === 2 ? renderInviteMembers() :\n        renderPermissions()\n      ) : (\n        renderGroupsList()\n      )}\n    </div>\n  );\n}","size_bytes":14220},"client/src/not-used-pages/team-collaboration.tsx":{"content":"import React from 'react';\n\nexport default function TeamCollab() { return <div className=\"p-6\">Team Collaboration</div>; }\n","size_bytes":123},"client/src/pages/about-support.tsx":{"content":"import React from 'react';\nimport TopBar from '@/components/TopBar';\nimport { Info, Globe, Mail, Users, Heart, ExternalLink } from 'lucide-react';\n\nconst appInfo = {\n  name: 'Zenux AI Chat',\n  version: '1.2.4',\n  build: '245',\n};\n\nconst features = [\n  'AI-Powered Conversations',\n  'Voice Message Support',\n  'File Sharing & Processing',\n  'Multi-Device Sync',\n  'End-to-End Encryption',\n  'Customizable Interface',\n];\n\nconst externalLinks = [\n  { name: 'Website', url: 'https://zenux-ai.example.com', icon: Globe },\n  { name: 'Documentation', url: 'https://docs.zenux-ai.example.com', icon: Info },\n  { name: 'Support Center', url: 'https://support.zenux-ai.example.com', icon: Mail },\n  { name: 'Community Forum', url: 'https://community.zenux-ai.example.com', icon: Users },\n];\n\nconst credits = [\n  { name: 'React Native', role: 'Framework' },\n  { name: 'NativeWind', role: 'Styling' },\n  { name: 'Lucide Icons', role: 'Icon Library' },\n  { name: 'Expo', role: 'Development Tools' },\n];\n\nexport default function AboutSupportSettingsPage({ onBack }: { onBack?: () => void }) {\n  const openLink = (url: string) => {\n    window.open(url, '_blank', 'noopener');\n  };\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 overflow-auto pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      <TopBar title=\"About & Support\" onBack={onBack} />\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* App Information */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm flex flex-col items-center\">\n          <div className=\"w-16 h-16 bg-blue-500 dark:bg-blue-700 rounded-full flex items-center justify-center mb-3\">\n            <span className=\"text-white text-2xl font-bold\">Z</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{appInfo.name}</div>\n          <div className=\"text-gray-500 dark:text-gray-400 mt-1\">Version {appInfo.version} (Build {appInfo.build})</div>\n          <div className=\"text-gray-400 dark:text-gray-500 text-sm mt-2\">Advanced AI Chat Platform</div>\n        </div>\n\n        {/* Features */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Key Features</div>\n          <div className=\"flex flex-row flex-wrap gap-2\">\n            {features.map((feature, index) => (\n              <span key={index} className=\"bg-blue-50 dark:bg-blue-900 px-3 py-2 rounded-full text-blue-700 dark:text-blue-200 text-sm\">{feature}</span>\n            ))}\n          </div>\n        </div>\n\n        {/* External Resources */}\n        <div className=\"bg-white rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 mb-4\">External Resources</div>\n          {externalLinks.map((link, index) => {\n            const IconComponent = link.icon;\n            return (\n              <button\n                key={index}\n                className=\"flex flex-row items-center justify-between py-3 border-b border-gray-100 last:border-0 w-full\"\n                onClick={() => openLink(link.url)}\n              >\n                <span className=\"flex flex-row items-center\">\n                  <IconComponent size={20} className=\"text-blue-500\" />\n                  <span className=\"text-base text-gray-900 ml-3\">{link.name}</span>\n                </span>\n                <ExternalLink size={20} className=\"text-gray-400\" />\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Credits */}\n        <div className=\"bg-white rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 mb-4\">Credits &amp; Acknowledgements</div>\n          {credits.map((credit, index) => (\n            <div key={index} className=\"flex flex-row items-center justify-between py-3 border-b border-gray-100 last:border-0\">\n              <span className=\"text-base text-gray-900\">{credit.name}</span>\n              <span className=\"text-gray-500 text-sm\">{credit.role}</span>\n            </div>\n          ))}\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg flex flex-row items-start\">\n            <Heart size={16} className=\"text-gray-400 mt-0.5 mr-2\" />\n            <span className=\"text-xs text-gray-600\">\n              We appreciate all the open-source projects and libraries that made this application possible.\n            </span>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n          <div className=\"flex flex-col items-center mb-4\">\n            <span className=\"text-gray-500 text-sm\">Â© 2023 Zenux AI Technologies</span>\n            <span className=\"text-gray-400 text-xs mt-1\">All rights reserved</span>\n          </div>\n          <div className=\"flex flex-row justify-center gap-4\">\n            <button className=\"text-blue-500 text-sm\">Terms of Service</button>\n            <button className=\"text-blue-500 text-sm\">Privacy Policy</button>\n            <button className=\"text-blue-500 text-sm\">Licenses</button>\n          </div>\n        </div>\n      </div>\n      {/* Footer */}\n      <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n        <div className=\"flex flex-col items-center mb-4\">\n          <span className=\"text-gray-500 text-sm\">Â© 2023 Zenux AI Technologies</span>\n          <span className=\"text-gray-400 text-xs mt-1\">All rights reserved</span>\n        </div>\n        <div className=\"flex flex-row justify-center gap-4\">\n          <button className=\"text-blue-500 text-sm\">Terms of Service</button>\n          <button className=\"text-blue-500 text-sm\">Privacy Policy</button>\n          <button className=\"text-blue-500 text-sm\">Licenses</button>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":5921},"client/src/pages/appearance.tsx":{"content":"import React, { useState } from 'react';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport TopBar from '@/components/TopBar';\nimport { Sun, Moon, Monitor, DollarSign, ChevronLeft } from 'lucide-react';\n\nconst themes = [\n  { id: 'light', name: 'Light', icon: Sun },\n  { id: 'dark', name: 'Dark', icon: Moon },\n  { id: 'system', name: 'System', icon: Monitor },\n];\n\nconst currencies = [\n  { id: 'GHS', name: 'Cedis', symbol: 'GHS' },\n  { id: 'USD', name: 'Euro', symbol: 'â‚¬' },\n];\n\nexport default function AppearanceSettingsPage({ onBack }: { onBack?: () => void }) {\n  const { theme, setTheme } = useTheme();\n  const [currency, setCurrency] = useState('USD');\n\n  return (\n     <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n      {/* Header */}\n      <TopBar title=\"Appearance & Theme\" onBack={onBack} />\n\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* Theme Selection */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 border border-gray-200 dark:border-gray-700\">\n          <div className=\"text-gray-800 dark:text-gray-100 font-semibold mb-4\">Theme</div>\n          <div className=\"flex flex-col gap-3\">\n            {themes.map((item) => {\n              const IconComponent = item.icon;\n              return (\n                <button\n                  key={item.id}\n                  className={`flex flex-row items-center p-3 rounded-lg border transition-all ${theme === item.id ? 'border-blue-500 bg-blue-50 dark:bg-blue-900' : 'border-gray-200 dark:border-gray-700 dark:bg-gray-900'}`}\n                  onClick={() => setTheme(item.id as 'light' | 'dark' | 'system')}\n                >\n                  <IconComponent size={20} className=\"mr-3\" color={theme === item.id ? '#2563EB' : '#6B7280'} />\n                  <span className={`font-medium ${theme === item.id ? 'text-blue-600 dark:text-blue-400' : 'text-gray-800 dark:text-gray-100'}`}>{item.name}</span>\n                  {theme === item.id && (\n                    <span className=\"ml-auto w-5 h-5 rounded-full bg-blue-600 flex items-center justify-center\">\n                      <span className=\"w-2 h-2 rounded-full bg-white dark:bg-gray-700 block\" />\n                    </span>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Currency Selection */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 border border-gray-200 dark:border-gray-700\">\n          <div className=\"text-gray-800 dark:text-gray-100 font-semibold mb-4\">Currency</div>\n          <div className=\"flex flex-col gap-3\">\n            {currencies.map((item) => (\n              <button\n                key={item.id}\n                className={`flex flex-row items-center p-3 rounded-lg border transition-all ${currency === item.id ? 'border-blue-500 bg-blue-50 dark:bg-blue-900' : 'border-gray-200 dark:border-gray-700 dark:bg-gray-900'}`}\n                onClick={() => setCurrency(item.id)}\n              >\n                <DollarSign size={20} className=\"mr-3\" color={currency === item.id ? '#2563EB' : '#6B7280'} />\n                <div className=\"flex-1 text-left\">\n                  <span className={`font-medium ${currency === item.id ? 'text-blue-600 dark:text-blue-400' : 'text-gray-800 dark:text-gray-100'}`}>{item.name}</span>\n                  <div className=\"text-gray-500 dark:text-gray-400 text-sm\">{item.symbol}</div>\n                </div>\n                {currency === item.id && (\n                  <span className=\"ml-auto w-5 h-5 rounded-full bg-blue-600 flex items-center justify-center\">\n                    <span className=\"w-2 h-2 rounded-full bg-white block\" />\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":3934},"client/src/pages/billing.tsx":{"content":"import React, { useState } from 'react';\nimport { CreditCard, Calendar, Download, Crown, Check, X, ChevronRight, Lock, Info } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\n\nexport default function BillingPage() {\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const [selectedPlan, setSelectedPlan] = useState<'free' | 'plus' | 'pro' | 'proplus'>('plus');\n  const [_showPaymentFlow, _setShowPaymentFlow] = useState(false);\n\n  const usageData = {\n    messages: { used: 850, limit: 1000 },\n    files: { used: 12, limit: 20 },\n    voice: { used: 45, limit: 60 },\n    api: { used: 150, limit: 500 },\n    resetDate: '2023-10-15',\n  };\n\n  const plans = [\n    {\n      id: 'free',\n      name: 'Free Plan',\n      price: billingCycle === 'monthly' ? 'â‚µ0' : 'â‚µ0',\n      period: billingCycle === 'monthly' ? '/month' : '/year',\n      features: [\n        '50 messages/month',\n        '2 file uploads',\n        'Basic AI access',\n        'Community support',\n      ],\n      limitations: [\n        'Resets monthly',\n        '2 uploads max',\n        'No voice',\n        'No API',\n        'Support only via forum',\n      ],\n      color: 'gray',\n      gradient: ['#9CA3AF', '#6B7280'],\n      current: selectedPlan === 'free',\n    },\n    {\n      id: 'plus',\n      name: 'Plus Plan',\n      price: billingCycle === 'monthly' ? 'â‚µ20' : 'â‚µ216',\n      period: billingCycle === 'monthly' ? '/month' : '/year',\n      features: [\n        'Unlimited messages',\n        '10 file uploads/month',\n        'Voice chat (60 min)',\n        'Advanced AI',\n        'Email support',\n      ],\n      limitations: [\n        'Voice minutes tracked',\n        'File upload counter',\n        'Advanced models unlocked',\n        'Priority queue',\n      ],\n      color: 'blue',\n      gradient: ['#3B82F6', '#60A5FA'],\n      current: selectedPlan === 'plus',\n    },\n    {\n      id: 'pro',\n      name: 'Pro Plan',\n      price: billingCycle === 'monthly' ? 'â‚µ40' : 'â‚µ432',\n      period: billingCycle === 'monthly' ? '/month' : '/year',\n      features: [\n        'Unlimited messages',\n        '50 file uploads/month',\n        'Voice chat (180 min)',\n        'Premium AI',\n        'Priority support',\n        'API access',\n      ],\n      limitations: [\n        'Voice minutes tracked',\n        'File upload counter',\n        'Premium models unlocked',\n        'Priority queue',\n      ],\n      color: 'purple',\n      gradient: ['#8B5CF6', '#A78BFA'],\n      current: selectedPlan === 'pro',\n    },\n    {\n      id: 'proplus',\n      name: 'Pro+ Plan',\n      price: billingCycle === 'monthly' ? 'â‚µ120' : 'â‚µ1296',\n      period: billingCycle === 'monthly' ? '/month' : '/year',\n      features: [\n        'Unlimited everything',\n        'Unlimited file uploads',\n        'Unlimited voice chat',\n        'Ultimate AI',\n        'Dedicated support',\n        'API access',\n        'Early access to new features',\n      ],\n      limitations: [],\n      color: 'red',\n      gradient: ['#EF4444', '#F87171'],\n      current: selectedPlan === 'proplus',\n    },\n  ];\n\n  const billingHistory = [\n    { id: 1, plan: 'Pro Plan', amount: 'â‚µ50.00', cycle: 'Monthly', method: 'Credit Card', status: 'Paid', date: '2023-09-15', invoice: '#' },\n    { id: 2, plan: 'Pro Plan', amount: 'â‚µ50.00', cycle: 'Monthly', method: 'Credit Card', status: 'Paid', date: '2023-08-15', invoice: '#' },\n    { id: 3, plan: 'Plus Plan', amount: 'â‚µ20.00', cycle: 'Monthly', method: 'PayPal', status: 'Paid', date: '2023-07-15', invoice: '#' },\n  ];\n\n  function ProgressBar({ progress }: { progress: number }) {\n    return (\n      <div className=\"h-2 w-full bg-gray-200 rounded-full overflow-hidden\">\n        <div\n          className={`h-full ${progress > 0.8 ? 'bg-red-500' : 'bg-blue-500'}`}\n          style={{ width: `${progress * 100}%` }}\n        />\n      </div>\n    );\n  }\n\n  function renderUsageCard(title: string, used: number, limit: number, unit: string) {\n    const progress = used / limit;\n    const isCritical = progress > 0.8;\n    return (\n      <div className=\"bg-white rounded-xl p-4 mb-4 shadow-sm\">\n        <div className=\"flex justify-between mb-2\">\n          <span className=\"text-gray-700 font-medium\">{title}</span>\n          <span className={`font-medium ${isCritical ? 'text-red-500' : 'text-gray-600'}`}>{used}/{limit} {unit}</span>\n        </div>\n        <ProgressBar progress={progress} />\n        {isCritical && (\n          <button className=\"mt-2 text-blue-500 text-sm font-medium\" type=\"button\">Upgrade now</button>\n        )}\n      </div>\n    );\n  }\n\n  function renderPlanCard(plan: typeof plans[0]) {\n    const textClass = plan.color === 'gray' ? 'text-gray-900' : 'text-white';\n\n    return (\n      <button\n        key={plan.id}\n        className={`rounded-2xl overflow-hidden mb-6 w-full text-left ${plan.current ? 'border-2 border-blue-500' : ''}`}\n        type=\"button\"\n        onClick={() => setSelectedPlan(plan.id as any)}\n      >\n        <div\n          className=\"p-6\"\n          style={{\n            backgroundImage: `linear-gradient(135deg, ${plan.gradient[0]}, ${plan.gradient[1]})`,\n            backgroundColor: plan.gradient[0], // fallback if gradient not rendered\n          }}\n        >\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <span className={`${textClass} text-xl font-bold block`}>{plan.name}</span>\n              <div className=\"flex items-baseline mt-1\">\n                <span className={`${textClass} text-3xl font-bold`}>{plan.price}</span>\n                <span className={`${textClass} text-sm ml-1`}>{plan.period}</span>\n              </div>\n            </div>\n            {plan.current && (\n              <span className=\"bg-white/20 rounded-full p-2\">\n                <Check size={20} color=\"white\" />\n              </span>\n            )}\n          </div>\n          <div className=\"mt-6\">\n            {plan.features.map((feature, index) => (\n              <div key={index} className=\"flex items-center mt-2\">\n                <Check size={16} color=\"white\" />\n                <span className={`${textClass} ml-2`}>{feature}</span>\n              </div>\n            ))}\n          </div>\n          {plan.limitations.length > 0 && (\n            <div className=\"mt-4 pt-4 border-t border-white/30\">\n              {plan.limitations.map((limitation, index) => (\n                <div key={index} className=\"flex items-center mt-2\">\n                  <X size={14} color=\"white\" />\n                  <span className={`${textClass} ml-2 text-sm`} style={{ opacity: 0.8 }}>{limitation}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </button>\n    );\n  }\n\n  return (\n  <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n  <TopBar title=\"Billing\" onBack={() => window.history.back()} />\n      <div className=\"flex-1 px-4 py-6 overflow-y-auto\">\n        {/* Billing Cycle Toggle */}\n        <div className=\"bg-white rounded-2xl p-4 mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"font-medium text-gray-900\">Billing Cycle</span>\n            <div className=\"flex items-center\">\n              <span className={`mr-3 ${billingCycle === 'monthly' ? 'text-gray-900 font-medium' : 'text-gray-500'}`}>Monthly</span>\n\n              <button\n                role=\"switch\"\n                aria-checked={billingCycle === 'yearly'}\n                onClick={() => setBillingCycle(billingCycle === 'monthly' ? 'yearly' : 'monthly')}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 ${billingCycle === 'yearly' ? 'bg-blue-600' : 'bg-gray-300'}`}\n              >\n                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${billingCycle === 'yearly' ? 'translate-x-5' : 'translate-x-1'}`} />\n              </button>\n\n              <span className={`ml-3 ${billingCycle === 'yearly' ? 'text-gray-900 font-medium' : 'text-gray-500'}`}>Yearly</span>\n              <span className=\"ml-4 bg-green-100 px-2 py-1 rounded-full\">\n                <span className=\"text-green-700 text-xs font-medium\">Save 10%</span>\n              </span>\n            </div>\n          </div>\n        </div>\n        {/* Usage Stats */}\n        <span className=\"text-lg font-bold text-gray-900 mb-4 block\">Usage</span>\n        {renderUsageCard('Messages', usageData.messages.used, usageData.messages.limit, 'msgs')}\n        {renderUsageCard('File Uploads', usageData.files.used, usageData.files.limit, 'files')}\n        {renderUsageCard('Voice Minutes', usageData.voice.used, usageData.voice.limit, 'min')}\n        {renderUsageCard('API Calls', usageData.api.used, usageData.api.limit, 'calls')}\n        {/* Plans */}\n        <span className=\"text-lg font-bold text-gray-900 mt-6 mb-4 block\">Plans</span>\n        {plans.map(renderPlanCard)}\n        {/* Payment Methods */}\n        <div className=\"bg-white rounded-2xl p-4 mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center\">\n              <CreditCard size={20} color=\"#6B7280\" />\n              <span className=\"font-medium text-gray-900 ml-2\">Payment Methods</span>\n            </div>\n            <ChevronRight size={20} color=\"#6B7280\" />\n          </div>\n          <div className=\"flex items-center mt-4\">\n            <span className=\"bg-gray-100 p-3 rounded-lg\">\n              <span className=\"font-medium\">â€¢â€¢â€¢â€¢ 4242</span>\n            </span>\n            <span className=\"ml-3\">\n              <span className=\"font-medium\">Visa</span>\n              <span className=\"text-gray-500 text-sm block\">Expires 12/25</span>\n            </span>\n            <span className=\"ml-auto bg-green-100 px-2 py-1 rounded-full\">\n              <span className=\"text-green-700 text-xs font-medium\">Primary</span>\n            </span>\n          </div>\n        </div>\n        {/* Billing History */}\n        <span className=\"text-lg font-bold text-gray-900 mb-4 block\">Billing History</span>\n        {billingHistory.map((item) => (\n          <div key={item.id} className=\"bg-white rounded-2xl p-4 mb-4\">\n            <div className=\"flex justify-between\">\n              <span>\n                <span className=\"font-medium text-gray-900 block\">{item.plan}</span>\n                <span className=\"text-gray-500 text-sm block\">{item.date}</span>\n              </span>\n              <span className=\"items-end\">\n                <span className=\"font-medium text-gray-900 block\">{item.amount}</span>\n                <span className=\"flex items-center mt-1\">\n                  <span className=\"text-gray-500 text-sm mr-1\">{item.method}</span>\n                  <Lock size={12} color=\"#6B7280\" />\n                </span>\n              </span>\n            </div>\n            <div className=\"flex justify-between mt-3\">\n              <span className=\"flex items-center\">\n                <span className=\"bg-green-100 p-1 rounded-full\">\n                  <Check size={12} color=\"#059669\" />\n                </span>\n                <span className=\"text-green-700 text-sm ml-1\">{item.status}</span>\n              </span>\n              <button className=\"flex items-center\" type=\"button\">\n                <Download size={16} color=\"#3B82F6\" />\n                <span className=\"text-blue-500 text-sm ml-1\">Invoice</span>\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11607},"client/src/pages/challenges.tsx":{"content":"import React, { useState } from 'react';\nimport { CheckCircle, Trophy, Users, Clock } from 'lucide-react';\n\nconst challenges = [\n  {\n    id: 1,\n    title: \"JavaScript Basics\",\n    description: \"Master fundamental JS concepts\",\n    participants: 2450,\n    duration: \"7 days\",\n    difficulty: \"Beginner\",\n    image: \"https://images.unsplash.com/photo-1634715972006-c16b5518f501?w=500&h=300&fit=crop\"\n  },\n  {\n    id: 2,\n    title: \"React Components\",\n    description: \"Build reusable UI components\",\n    participants: 1890,\n    duration: \"14 days\",\n    difficulty: \"Intermediate\",\n    image: \"https://images.unsplash.com/photo-1634715972006-c16b5518f501?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0\"\n  },\n  {\n    id: 3,\n    title: \"API Integration\",\n    description: \"Connect to RESTful services\",\n    participants: 1420,\n    duration: \"10 days\",\n    difficulty: \"Intermediate\",\n    image: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0\"\n  },\n  {\n    id: 4,\n    title: \"State Management\",\n    description: \"Redux and Context patterns\",\n    participants: 960,\n    duration: \"14 days\",\n    difficulty: \"Advanced\",\n    image: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0\"\n  },\n  {\n    id: 5,\n    title: \"Testing Strategies\",\n    description: \"Jest and React Testing Library\",\n    participants: 720,\n    duration: \"7 days\",\n    difficulty: \"Intermediate\",\n    image: \"https://images.unsplash.com/photo-1634715972006-c16b5518f501?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0\"\n  },\n  {\n    id: 6,\n    title: \"Performance Optimization\",\n    description: \"Improve app speed and UX\",\n    participants: 590,\n    duration: \"10 days\",\n    difficulty: \"Advanced\",\n    image: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=500&h=300&fit=crop\"\n  }\n];\n\nconst ChallengesScreen: React.FC = () => {\n  const [selectedChallenges, setSelectedChallenges] = useState<number[]>([]);\n\n  const toggleChallenge = (id: number) => {\n    setSelectedChallenges(selectedChallenges.includes(id)\n      ? selectedChallenges.filter(challengeId => challengeId !== id)\n      : [...selectedChallenges, id]\n    );\n  };\n\n  return (\n  <div className=\"min-h-screen bg-white flex flex-col pb-[env(safe-area-inset-bottom)]\">\n      {/* Header */}\n      <div className=\"bg-white p-6 border-b border-gray-100\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Code Challenges</h1>\n        <p className=\"text-gray-600 mt-2\">Select coding challenges to enhance your skills</p>\n      </div>\n\n      {/* Challenge List */}\n      <div className=\"flex-1 p-4\">\n        <div className=\"flex flex-wrap gap-4\">\n          {challenges.map((challenge) => (\n            <div\n              key={challenge.id}\n              className={`flex-1 min-w-[300px] max-w-[350px] bg-white rounded-xl border-2 ${selectedChallenges.includes(challenge.id) ? 'border-blue-500' : 'border-gray-100'} shadow-sm overflow-hidden cursor-pointer`}\n              onClick={() => toggleChallenge(challenge.id)}\n            >\n              <div className=\"relative\">\n                <img\n                  src={challenge.image}\n                  alt={challenge.title}\n                  className=\"w-full h-32 object-cover\"\n                />\n                {selectedChallenges.includes(challenge.id) && (\n                  <div className=\"absolute top-2 right-2 bg-blue-500 rounded-full p-1\">\n                    <CheckCircle size={20} color=\"white\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"p-4\">\n                <h2 className=\"font-bold text-lg text-gray-900\">{challenge.title}</h2>\n                <p className=\"text-gray-600 text-sm mt-1\">{challenge.description}</p>\n                <div className=\"flex items-center mt-3\">\n                  <Users size={16} color=\"#6B7280\" />\n                  <span className=\"text-gray-500 text-sm ml-1\">{challenge.participants} developers</span>\n                </div>\n                <div className=\"flex items-center mt-1\">\n                  <Clock size={16} color=\"#6B7280\" />\n                  <span className=\"text-gray-500 text-sm ml-1\">{challenge.duration}</span>\n                </div>\n                <div className=\"mt-2\">\n                  <span className={`text-xs font-semibold px-2 py-1 rounded-full ${challenge.difficulty === 'Beginner' ? 'bg-green-100 text-green-800' : challenge.difficulty === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>\n                    {challenge.difficulty}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Selected Challenges Summary */}\n        {selectedChallenges.length > 0 && (\n          <div className=\"mt-6 bg-blue-50 rounded-xl p-4 border border-blue-100 pb-[env(safe-area-inset-bottom)]\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Trophy size={20} color=\"#3B82F6\" />\n                <span className=\"font-bold text-blue-800 ml-2\">Selected Challenges</span>\n              </div>\n              <span className=\"font-bold text-blue-800\">{selectedChallenges.length} selected</span>\n            </div>\n            <div className=\"mt-3\">\n              {selectedChallenges.map(id => {\n                const challenge = challenges.find(c => c.id === id);\n                return (\n                  <div key={id} className=\"flex items-center mt-1\">\n                    <span className=\"text-blue-700 text-sm\">â€¢ {challenge?.title}</span>\n                  </div>\n                );\n              })}\n            </div>\n            <button className=\"mt-4 bg-blue-500 rounded-lg py-3 w-full text-center font-bold text-white\">Start Challenges</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChallengesScreen;\n","size_bytes":5946},"client/src/pages/checkout.tsx":{"content":"// ...existing code...\nimport React, { useState } from 'react';\nimport { ArrowLeft, CreditCard, Wallet, Gift, ShieldCheck, Check } from 'lucide-react';\n\nexport default function CheckoutPage() {\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('wallet');\n\n  const paymentMethods = [\n    { id: 'wallet', title: 'Wallet Balance', icon: <Wallet color=\"#4A90E2\" size={24} />, balance: '$1,248.75' },\n    { id: 'card', title: 'Credit Card', icon: <CreditCard color=\"#4A90E2\" size={24} />, lastDigits: '**** 4289' },\n    { id: 'credits', title: 'AI Credits', icon: <Gift color=\"#4A90E2\" size={24} />, balance: '1,250 credits' },\n  ];\n\n  const orderDetails = {\n    item: 'Data Bundle - 5GB',\n    price: '$18.00',\n    validity: '15 days',\n    description: 'High-speed mobile data for 15 days',\n  };\n\n  const orderSummary = {\n    subtotal: '$18.00',\n    tax: '$1.08',\n    total: '$19.08',\n  };\n\n  return (\n  <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col pb-[env(safe-area-inset-bottom)] dark:text-white\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6 px-6 bg-white\">\n        <div className=\"flex items-center mb-2\">\n          <button className=\"mr-3\" type=\"button\">\n            <ArrowLeft color=\"#2C3E50\" size={24} />\n          </button>\n          <span className=\"text-gray-900 dark:text-gray-100 text-2xl font-bold\">Checkout</span>\n        </div>\n        <span className=\"text-gray-600 dark:text-gray-400\">Review your order and payment details</span>\n      </div>\n      <div className=\"flex-1 px-4 pt-4 overflow-y-auto\">\n        {/* Order Summary */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-4 shadow mb-6\">\n          <span className=\"text-gray-900 dark:text-gray-100 text-lg font-bold mb-4 block\">Order Summary</span>\n          <div className=\"flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900 rounded-xl mb-4\">\n            <div>\n              <span className=\"text-gray-900 dark:text-gray-100 font-bold block\">{orderDetails.item}</span>\n              <span className=\"text-gray-600 dark:text-gray-400 text-sm mt-1 block\">{orderDetails.description}</span>\n            </div>\n            <span className=\"text-gray-900 dark:text-gray-100 font-bold\">{orderDetails.price}</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Subtotal</span>\n            <span className=\"text-gray-900 dark:text-gray-100\">{orderSummary.subtotal}</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Tax</span>\n            <span className=\"text-gray-900 dark:text-gray-100\">{orderSummary.tax}</span>\n          </div>\n          <div className=\"flex justify-between py-3 border-t border-gray-200 dark:border-gray-700 mt-2\">\n            <span className=\"text-gray-900 dark:text-gray-100 font-bold\">Total</span>\n            <span className=\"text-gray-900 dark:text-gray-100 font-bold text-lg\">{orderSummary.total}</span>\n          </div>\n        </div>\n        {/* Payment Method */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow mb-6\">\n          <span className=\"text-gray-900 dark:text-gray-100 text-lg font-bold mb-4 block\">Payment Method</span>\n          {paymentMethods.map((method) => (\n            <button\n              key={method.id}\n              className={`flex items-center p-4 rounded-xl mb-3 w-full text-left ${\n                selectedPaymentMethod === method.id ? 'bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700' : 'bg-gray-50 dark:bg-gray-800'\n              }`}\n              type=\"button\"\n              onClick={() => setSelectedPaymentMethod(method.id)}\n            >\n              <span className=\"mr-3\">{method.icon}</span>\n              <span className=\"flex-1\">\n                <span className=\"text-gray-900 dark:text-gray-100 font-semibold block\">{method.title}</span>\n                <span className=\"text-gray-600 dark:text-gray-400 text-sm block\">\n                  {method.balance ? `Balance: ${method.balance}` : method.lastDigits}\n                </span>\n              </span>\n              {selectedPaymentMethod === method.id && (\n                <span className=\"w-6 h-6 rounded-full bg-blue-600 dark:bg-blue-700 flex items-center justify-center\">\n                  <Check color=\"white\" size={16} />\n                </span>\n              )}\n            </button>\n          ))}\n        </div>\n        {/* Security Info */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow mb-6\">\n          <div className=\"flex items-center mb-3\">\n            <ShieldCheck color=\"#2ECC71\" size={24} />\n            <span className=\"text-gray-900 dark:text-gray-100 text-lg font-bold ml-2\">Secure Payment</span>\n          </div>\n          <span className=\"text-gray-600 dark:text-gray-400 block\">\n            Your payment information is encrypted and securely processed. <br />\n            We do not store your credit card details.\n          </span>\n        </div>\n        {/* Confirm Button */}\n        <button className=\"mt-6 mb-8 bg-blue-600 rounded-2xl p-5 w-full flex items-center justify-center\" type=\"button\">\n          <span className=\"text-white text-lg font-bold\">Confirm Payment</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5348},"client/src/pages/code-execution.tsx":{"content":"import React, { useState } from 'react';\nimport { Play, ChevronDown, Copy, Trash2, Clock } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\nimport { useApp } from '@/contexts/AppContext';\n\nconst CodeExecutionScreen = () => {\n  const { user } = useApp();\n  const [selectedLanguage, setSelectedLanguage] = useState('python');\n  const [code, setCode] = useState('print(\"Hello, World!\")');\n  const [output, setOutput] = useState('Hello, World!');\n  const [isLanguageSelectorOpen, setIsLanguageSelectorOpen] = useState(false);\n\n  const languages = [\n    { id: 'python', name: 'Python', color: 'bg-yellow-500' },\n    { id: 'javascript', name: 'JavaScript', color: 'bg-yellow-600' },\n    { id: 'sql', name: 'SQL', color: 'bg-blue-500' },\n    { id: 'java', name: 'Java', color: 'bg-red-500' },\n    { id: 'cpp', name: 'C++', color: 'bg-blue-700' },\n    { id: 'react', name: 'React', color: 'bg-cyan-500' },\n  ];\n\n  const runCode = () => {\n    // Send the code to the AI assistant to get execution explanation or simulated output\n    (async () => {\n      try {\n        const conversationId = `code-exec-${Date.now()}`;\n        const payload = {\n          message: `Execute or explain this ${selectedLanguage} code:\\n\\n${code}`,\n          conversation_id: conversationId,\n          user_id: (user as any)?.id || 'anonymous',\n          enhanced: true,\n          enhanced_v2: true,\n        };\n\n        // Attach access token if available\n        const { data: sessionData } = await (await import('@/lib/supabase')).supabase.auth.getSession();\n        const token = sessionData?.session?.access_token;\n        const headers: Record<string,string> = { 'Content-Type': 'application/json' };\n        if (token) headers['Authorization'] = `Bearer ${token}`;\n\n        const res = await fetch('/api/ai/chat', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify(payload),\n        });\n\n        if (!res.ok) {\n          setOutput('AI execution service failed. Showing local simulated output.');\n          return;\n        }\n\n        const text = await res.text();\n        setOutput(text || 'No output from AI');\n      } catch (err) { void err; setOutput('Failed to contact AI service. Showing simulated output.'); }\n    })();\n  };\n\n  const clearOutput = () => {\n    setOutput('');\n  };\n\n  const copyCode = () => {\n    // In a real app, this would copy to clipboard\n    console.log('Code copied to clipboard');\n  };\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-white dark:bg-gray-900\">\n      <TopBar title=\"Code Executor\" />\n  <div className=\"flex-1 p-4 max-w-2xl mx-auto w-full pt-24\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Code Executor</h1>\n          <p className=\"text-gray-500 mt-1\">Run code in multiple languages</p>\n        </div>\n\n        {/* Language Selector */}\n        <div className=\"mb-4\">\n          <label className=\"text-gray-700 font-medium mb-2 block\">Language</label>\n          <button\n            type=\"button\"\n            className=\"flex items-center justify-between bg-gray-50 dark:bg-gray-800 rounded-xl p-4 border border-gray-200 dark:border-gray-700 w-full\"\n            onClick={() => setIsLanguageSelectorOpen(!isLanguageSelectorOpen)}\n          >\n            <span className=\"text-gray-800 font-medium\">\n              {languages.find(lang => lang.id === selectedLanguage)?.name}\n            </span>\n            <ChevronDown\n              color=\"#6b7280\"\n              size={20}\n              className={`${isLanguageSelectorOpen ? 'rotate-180' : ''} transition-transform`}\n            />\n          </button>\n\n          {isLanguageSelectorOpen && (\n            <div className=\"mt-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\">\n              {languages.map((language) => (\n                <button\n                  key={language.id}\n                  type=\"button\"\n                  className=\"flex items-center p-3 border-b border-gray-100 last:border-b-0 w-full\"\n                  onClick={() => {\n                    setSelectedLanguage(language.id);\n                    setIsLanguageSelectorOpen(false);\n                  }}\n                >\n                  <span className={`w-3 h-3 rounded-full ${language.color} mr-3 inline-block`}></span>\n                  <span className=\"text-gray-800\">{language.name}</span>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Code Editor */}\n        <div className=\"mb-4 flex-1 flex flex-col\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-gray-700 font-medium\">Code Editor</span>\n            <div className=\"flex\">\n              <button onClick={copyCode} className=\"mr-3 p-1\" title=\"Copy code\">\n                <Copy color=\"#6b7280\" size={18} />\n              </button>\n              <button onClick={() => setCode('')} className=\"p-1\" title=\"Clear code\">\n                <Trash2 color=\"#6b7280\" size={18} />\n              </button>\n            </div>\n          </div>\n          <textarea\n            className=\"bg-gray-50 dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4 font-mono text-gray-800 dark:text-gray-100 text-base flex-1 resize-none min-h-[120px]\"\n            value={code}\n            onChange={e => setCode(e.target.value)}\n            placeholder=\"Enter your code here...\"\n          />\n        </div>\n\n        {/* Run Button */}\n        <button\n          className=\"bg-blue-500 rounded-xl py-4 mb-4 flex items-center justify-center w-full\"\n          onClick={runCode}\n        >\n          <Play color=\"white\" size={20} className=\"mr-2\" />\n          <span className=\"text-white font-bold text-lg\">Run Code</span>\n        </button>\n\n        {/* Output Panel */}\n        <div className=\"flex-1\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-gray-700 dark:text-gray-200 font-medium\">Output</span>\n            <button onClick={clearOutput} className=\"p-1\" title=\"Clear output\">\n              <Trash2 color=\"#6b7280\" size={18} />\n            </button>\n          </div>\n          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 min-h-[80px]\">\n            <div className=\"p-4\">\n              {output ? (\n                <pre className=\"font-mono text-gray-800 dark:text-gray-100 whitespace-pre-wrap\">{output}</pre>\n              ) : (\n                <div className=\"flex items-center py-8\">\n                  <Clock color=\"#9ca3af\" size={20} className=\"mr-2\" />\n                  <span className=\"text-gray-400 dark:text-gray-500\">Run code to see output</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeExecutionScreen;\n","size_bytes":6896},"client/src/pages/contacts.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Search, UserPlus, Phone, Mail, Users } from \"lucide-react\";\n\ntype Contact = {\n  id: string;\n  name: string;\n  phone: string;\n  email: string;\n  avatar: string;\n};\n\nconst mockContacts: Contact[] = [\n  { id: '1', name: 'Alex Johnson', phone: '+1 (555) 123-4567', email: 'alex.johnson@example.com', avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dXNlcnxlbnwwfHwwfHx8MA%3D%3D' },\n  { id: '2', name: 'Taylor Smith', phone: '+1 (555) 987-6543', email: 'taylor.smith@example.com', avatar: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTF8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n  { id: '3', name: 'Jordan Williams', phone: '+1 (555) 456-7890', email: 'jordan.w@example.com', avatar: 'https://images.unsplash.com/photo-1605993439219-9d09d2020fa5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTN8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n  { id: '4', name: 'Casey Davis', phone: '+1 (555) 234-5678', email: 'casey.davis@example.com', avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mjh8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n  { id: '5', name: 'Riley Brown', phone: '+1 (555) 876-5432', email: 'riley.brown@example.com', avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MzJ8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n  { id: '6', name: 'Morgan Lee', phone: '+1 (555) 345-6789', email: 'morgan.lee@example.com', avatar: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTd8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n  { id: '7', name: 'Jamie Miller', phone: '+1 (555) 765-4321', email: 'jamie.miller@example.com', avatar: 'https://images.unsplash.com/photo-1578445714074-946b536079aa?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTl8fFByb2Zlc3Npb25hbCUyMGF2YXRhciUyMHdpdGglMjBnbGFzc2VzfGVufDB8fDB8fHww' },\n  { id: '8', name: 'Quinn Garcia', phone: '+1 (555) 567-8901', email: 'quinn.garcia@example.com', avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dXNlcnxlbnwwfHwwfHx8MA%3D%3D' },\n];\n\nexport default function ContactsPage() {\n  const [contacts, setContacts] = useState<Contact[]>(mockContacts);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredContacts, setFilteredContacts] = useState<Contact[]>(mockContacts);\n  // no in-file navigation required yet\n\n  useEffect(() => {\n    if (searchQuery.trim() === \"\") {\n      setFilteredContacts(contacts);\n    } else {\n      const q = searchQuery.toLowerCase();\n      setFilteredContacts(\n        contacts.filter(\n          (c) =>\n            c.name.toLowerCase().includes(q) ||\n            c.phone.includes(q) ||\n            c.email.toLowerCase().includes(q)\n        )\n      );\n    }\n  }, [searchQuery, contacts]);\n\n  const importContactsFromDevice = () => {\n    // placeholder: real device contact import requires native permissions\n    alert('Import from device would be implemented with native permissions.');\n    const newContacts: Contact[] = [\n      { id: '9', name: 'Sam Wilson', phone: '+1 (555) 111-2222', email: 'sam.wilson@example.com', avatar: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTF8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n      { id: '10', name: 'Jordan Taylor', phone: '+1 (555) 333-4444', email: 'jordan.taylor@example.com', avatar: 'https://images.unsplash.com/photo-1605993439219-9d09d2020fa5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTN8fHVzZXJ8ZW58MHx8MHx8fDA%3D' },\n    ];\n    setContacts((prev) => [...prev, ...newContacts]);\n  };\n\n  const renderContact = (contact: Contact) => (\n  <div key={contact.id} className=\"flex items-center p-4 bg-white dark:bg-gray-800 rounded-xl mb-3 shadow-sm border border-gray-100 dark:border-gray-700\">\n      <img src={contact.avatar} alt={contact.name} className=\"w-14 h-14 rounded-full mr-4 object-cover\" />\n      <div className=\"flex-1\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-bold text-gray-800 dark:text-gray-100\">{contact.name}</h3>\n        </div>\n  <div className=\"flex items-center mt-1 text-sm text-gray-600 dark:text-gray-300\">\n          <Phone size={14} color=\"#3498DB\" className=\"mr-2\" />\n          <span>{contact.phone}</span>\n        </div>\n  <div className=\"flex items-center mt-1 text-sm text-gray-600 dark:text-gray-300\">\n          <Mail size={14} color=\"#3498DB\" className=\"mr-2\" />\n          <span>{contact.email}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n  <div className=\"flex-1 bg-gray-50 dark:bg-gray-900 min-h-screen dark:text-white\">\n  <div className=\"bg-white dark:bg-gray-800 pt-12 pb-6 px-4 shadow-sm\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">Contacts</h2>\n          <button\n            className=\"bg-blue-500 hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-800 rounded-full p-3\"\n            onClick={() => importContactsFromDevice()}\n            aria-label=\"Import contacts\"\n          >\n            <UserPlus size={20} color=\"white\" />\n          </button>\n        </div>\n\n  <div className=\"flex items-center bg-gray-100 dark:bg-gray-800 rounded-full px-4 py-3\">\n          <Search size={20} color=\"#7F8C8D\" className=\"mr-2\" />\n          <input\n            className=\"flex-1 bg-transparent outline-none text-gray-700 dark:text-gray-100\"\n            placeholder=\"Search contacts...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </div>\n      </div>\n\n  <div className=\"flex-row justify-between px-4 py-3 bg-white dark:bg-gray-800 mb-4 flex items-center\">\n        <div className=\"flex items-center\">\n          <Users size={18} color=\"#3498DB\" className=\"mr-2\" />\n    <span className=\"text-gray-700 dark:text-gray-200\">{contacts.length} contacts</span>\n        </div>\n  <button className=\"text-blue-500 dark:text-blue-300 font-medium\" onClick={importContactsFromDevice}>Import from device</button>\n      </div>\n\n  <div className=\"px-4 pb-8\">\n        {filteredContacts.length > 0 ? (\n          <div className=\"\">\n            {filteredContacts.map((c) => renderContact(c))}\n          </div>\n        ) : (\n          <div className=\"flex-1 items-center justify-center text-center py-8\">\n            <p className=\"text-gray-500 dark:text-gray-400 text-lg\">No contacts found</p>\n            <button\n              className=\"mt-4 bg-blue-500 hover:bg-blue-600 dark:bg-blue-700 dark:hover:bg-blue-800 rounded-full px-6 py-3 text-white font-medium\"\n              onClick={importContactsFromDevice}\n            >\n              Import Contacts\n            </button>\n          </div>\n        )}\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":7389},"client/src/pages/crack-the-code.tsx":{"content":"import React, { useState } from 'react';\nimport { Trophy, Flame, Coins, Clock, CheckCircle2, Star, TrendingUp, Calendar } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\n\nconst CodeChallengesScreen: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<'challenges' | 'history' | 'leaderboard'>('challenges');\n\n  // Mock data for challenges\n  const challenges = [\n    {\n      id: '1',\n      title: 'JavaScript Functions',\n      difficulty: 'Beginner',\n      points: 50,\n      completed: true,\n      timeEstimate: '15 min',\n      description: 'Practice basic JavaScript function concepts',\n      category: 'JavaScript',\n    },\n    {\n      id: '2',\n      title: 'React Components',\n      difficulty: 'Intermediate',\n      points: 100,\n      completed: false,\n      timeEstimate: '30 min',\n      description: 'Build reusable React components',\n      category: 'React',\n    },\n    {\n      id: '3',\n      title: 'API Integration',\n      difficulty: 'Advanced',\n      points: 200,\n      completed: false,\n      timeEstimate: '45 min',\n      description: 'Connect to external APIs using fetch',\n      category: 'API',\n    },\n    {\n      id: '4',\n      title: 'Data Structures',\n      difficulty: 'Intermediate',\n      points: 150,\n      completed: true,\n      timeEstimate: '35 min',\n      description: 'Implement common data structures',\n      category: 'Algorithms',\n    },\n  ];\n\n  // Mock data for history\n  const history = [\n    {\n      id: '1',\n      title: 'CSS Grid Layout',\n      points: 75,\n      date: '2023-05-15',\n      credits: 10,\n    },\n    {\n      id: '2',\n      title: 'JavaScript Loops',\n      points: 50,\n      date: '2023-05-14',\n      credits: 5,\n    },\n    {\n      id: '3',\n      title: 'HTML Semantics',\n      points: 25,\n      date: '2023-05-12',\n      credits: 3,\n    },\n  ];\n\n  // Mock data for leaderboard\n  const leaderboard = [\n    { id: '1', name: 'You', points: 1250, position: 1, isUser: true },\n    { id: '2', name: 'Alex Johnson', points: 1120, position: 2, isUser: false },\n    { id: '3', name: 'Sam Wilson', points: 980, position: 3, isUser: false },\n    { id: '4', name: 'Taylor Reed', points: 875, position: 4, isUser: false },\n    { id: '5', name: 'Jordan Kim', points: 760, position: 5, isUser: false },\n  ];\n\n  // Stats data\n  const stats = {\n    streak: 7,\n    totalPoints: 1250,\n    credits: 42,\n    challengesCompleted: 24,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900 flex flex-col pb-[env(safe-area-inset-bottom)]\">\n      <TopBar title=\"Crack the Code\" />\n      {/* Stats Summary */}\n  <div className=\"flex flex-row justify-between items-center px-4 py-6 pt-24\">\n        <div className=\"flex items-center gap-2\">\n          <Flame color=\"orange\" size={20} />\n          <span className=\"font-bold text-lg\">{stats.streak}</span>\n          <span className=\"text-gray-500 text-xs\">Day Streak</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Coins color=\"gold\" size={20} />\n          <span className=\"font-bold text-lg\">{stats.credits}</span>\n          <span className=\"text-gray-500 text-xs\">AI Credits</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <TrendingUp color=\"#6366f1\" size={20} />\n          <span className=\"font-bold text-lg\">{stats.totalPoints}</span>\n          <span className=\"text-gray-500 text-xs\">Total Points</span>\n        </div>\n      </div>\n\n      {/* Tabs */}\n  <div className=\"flex flex-row bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        {['challenges', 'history', 'leaderboard'].map((tab) => (\n          <button\n            key={tab}\n            className={`flex-1 py-4 text-center ${activeTab === tab ? 'border-b-2 border-indigo-600' : ''}`}\n            onClick={() => setActiveTab(tab as typeof activeTab)}\n          >\n            <span className={`${activeTab === tab ? 'text-indigo-600 font-bold' : 'text-gray-500'} capitalize`}>\n              {tab}\n            </span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 px-4 py-4 overflow-y-auto\">\n        {activeTab === 'challenges' && (\n          <div>\n            <span className=\"text-lg font-bold mb-4 block\">Available Challenges</span>\n            {challenges.map((challenge) => (\n              <div\n                key={challenge.id}\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-4 shadow-sm border border-gray-100 dark:border-gray-700\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-lg font-bold text-gray-900\">{challenge.title}</span>\n                      {challenge.completed ? (\n                        <CheckCircle2 color=\"green\" size={20} />\n                      ) : null}\n                    </div>\n                    <span className=\"text-gray-500 text-sm mt-1 block\">{challenge.description}</span>\n                    <div className=\"flex flex-row mt-3 gap-2\">\n                      <span className=\"bg-indigo-100 px-2 py-1 rounded-full text-indigo-700 text-xs font-medium\">{challenge.category}</span>\n                      <span className=\"bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full text-gray-700 dark:text-gray-200 text-xs font-medium\">{challenge.difficulty}</span>\n                      <span className=\"bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full text-green-700 dark:text-green-300 text-xs font-medium\">{challenge.points} pts</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-between items-center mt-3 pt-3 border-t border-gray-100\">\n                  <div className=\"flex items-center\">\n                    <Clock color=\"gray\" size={16} />\n                    <span className=\"text-gray-500 text-sm ml-1\">{challenge.timeEstimate}</span>\n                  </div>\n                  <button className=\"bg-indigo-600 px-4 py-2 rounded-lg text-white text-sm font-medium\">\n                    {challenge.completed ? 'Review' : 'Start'}\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {activeTab === 'history' && (\n          <div>\n            <span className=\"text-lg font-bold mb-4 block\">Challenge History</span>\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-4\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <span className=\"text-gray-900 font-bold\">Recent Activity</span>\n                <span className=\"flex items-center gap-1\">\n                  <Calendar color=\"gray\" size={16} />\n                  <span className=\"text-gray-500 text-sm\">Last 30 days</span>\n                </span>\n              </div>\n              {history.map((item, index) => (\n                <div\n                  key={item.id}\n                  className={`flex justify-between items-center py-3 ${index !== history.length - 1 ? 'border-b border-gray-100' : ''}`}\n                >\n                  <div>\n                    <span className=\"font-medium text-gray-900 block\">{item.title}</span>\n                    <span className=\"text-gray-500 text-sm block\">{item.date}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Coins color=\"gold\" size={16} />\n                    <span className=\"text-gray-900 font-bold\">+{item.credits}</span>\n                    <Star color=\"orange\" size={16} />\n                    <span className=\"text-gray-900 font-bold\">+{item.points}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4\">\n              <span className=\"text-gray-900 font-bold mb-3 block\">Achievements</span>\n              <div className=\"flex flex-row flex-wrap gap-2\">\n                <div className=\"bg-yellow-100 dark:bg-yellow-900 rounded-lg p-3 flex-1 min-w-[40%] text-center\">\n                  <Trophy color=\"gold\" size={24} />\n                  <span className=\"text-yellow-800 font-bold mt-1 block\">5 Days Streak</span>\n                  <span className=\"text-yellow-600 text-xs block mt-1\">Completed challenges for 5 consecutive days</span>\n                </div>\n                <div className=\"bg-blue-100 dark:bg-blue-900 rounded-lg p-3 flex-1 min-w-[40%] text-center\">\n                  <CheckCircle2 color=\"blue\" size={24} />\n                  <span className=\"text-blue-800 font-bold mt-1 block\">10 Solved</span>\n                  <span className=\"text-blue-600 text-xs block mt-1\">Solved 10 coding challenges</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'leaderboard' && (\n          <div>\n            <span className=\"text-lg font-bold mb-4 block\">Leaderboard</span>\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl overflow-hidden\">\n              {leaderboard.map((user) => (\n                <div\n                  key={user.id}\n                  className={`flex items-center p-4 ${user.isUser ? 'bg-indigo-50 dark:bg-indigo-900 border-l-4 border-indigo-500' : 'border-b border-gray-100 dark:border-gray-700'}`}\n                >\n                  <span className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center mr-3 font-bold text-gray-700\">{user.position}</span>\n                  <span className={`flex-1 font-medium ${user.isUser ? 'text-indigo-700' : 'text-gray-900'}`}>{user.name}</span>\n                  <span className=\"flex items-center gap-1\">\n                    <Star color=\"orange\" size={16} />\n                    <span className=\"font-bold text-gray-900\">{user.points}</span>\n                  </span>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 bg-white dark:bg-gray-800 rounded-xl p-4\">\n              <span className=\"text-gray-900 font-bold mb-3 block\">Weekly Challenge</span>\n              <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg p-4\">\n                <span className=\"text-white font-bold text-lg block\">Algorithm Master</span>\n                <span className=\"text-indigo-100 text-sm mt-1 block\">Solve 5 algorithm challenges this week</span>\n                <div className=\"flex items-center mt-3\">\n                  <div className=\"flex-1 bg-indigo-400 h-2 rounded-full overflow-hidden\">\n                    <div className=\"bg-white dark:bg-gray-700 h-2 rounded-full\" style={{ width: '60%' }}></div>\n                  </div>\n                  <span className=\"text-white text-sm ml-2\">3/5</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CodeChallengesScreen;\n","size_bytes":10938},"client/src/pages/credit.tsx":{"content":"\nimport React from 'react';\nimport { useLocation } from 'wouter';\nimport { Wallet, CreditCard, Send, QrCode, BarChart3, ArrowUpRight, ArrowDownLeft } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\n\nconst transactions = [\n  { id: 1, title: 'AI Subscription', amount: -19.99, date: '2023-05-15', type: 'expense' },\n  { id: 2, title: 'Voice Credits', amount: -4.99, date: '2023-05-12', type: 'expense' },\n  { id: 3, title: 'Referral Bonus', amount: 10.00, date: '2023-05-10', type: 'income' },\n  { id: 4, title: 'File Processing', amount: -2.49, date: '2023-05-08', type: 'expense' },\n  { id: 5, title: 'Premium Upgrade', amount: -29.99, date: '2023-05-01', type: 'expense' },\n];\n\nexport default function WalletPage() {\n  // balance visibility removed â€” using credits view\n  const credits = {\n    ai: 1250,\n    voice: 250,\n    project: 12,\n    image: 300,\n  };\n  const [, setLocation] = useLocation();\n\n  return (\n  <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n  {/* Header */}\n  <TopBar title=\"My Wallet\" onBack={() => window.history.back()} />\n      <div className=\"pt-12 pb-6 px-6 bg-white\">\n        {/* Credits Card */}\n        <div className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-gray-800 text-lg font-semibold\">Credits</h3>\n              <p className=\"text-sm text-gray-500\">Your available allocation across credit types</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"text-sm text-blue-600 hover:underline\" onClick={() => alert('Manage credits coming soon')}>Manage</button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center mr-3\">\n                <Wallet color=\"#0EA5A4\" size={20} />\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-gray-900\">{credits.ai}</div>\n                <div className=\"text-xs text-gray-500\">AI Credits</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center mr-3\">\n                <CreditCard color=\"#7C3AED\" size={20} />\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-gray-900\">{credits.voice}</div>\n                <div className=\"text-xs text-gray-500\">Voice Tokens</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 rounded-full bg-indigo-100 flex items-center justify-center mr-3\">\n                <Send color=\"#4338CA\" size={20} />\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-gray-900\">{credits.project}</div>\n                <div className=\"text-xs text-gray-500\">Project Credits</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center p-3 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center mr-3\">\n                <QrCode color=\"#CA8A04\" size={20} />\n              </div>\n              <div>\n                <div className=\"text-lg font-bold text-gray-900\">{credits.image}</div>\n                <div className=\"text-xs text-gray-500\">Image/Gen Credits</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Quick Actions */}\n      <div className=\"flex justify-around py-6 px-4 bg-white\">\n        <div className=\"flex flex-col items-center\">\n          <button\n            className=\"w-14 h-14 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2 shadow\"\n            onClick={() => setLocation('/send-receive')}\n            type=\"button\"\n            aria-label=\"Send Money\"\n          >\n            <Send color=\"gray\" size={24} />\n          </button>\n          <span className=\"text-gray-700 dark:text-gray-300\">Send</span>\n        </div>\n        <div className=\"flex flex-col items-center\">\n          <button\n            className=\"w-14 h-14 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2 shadow\"\n            onClick={() => setLocation('/send-receive')}\n            type=\"button\"\n            aria-label=\"Request Money\"\n          >\n            <ArrowDownLeft color=\"gray\" size={24} />\n          </button>\n          <span className=\"text-gray-700 dark:text-gray-300\">Request</span>\n        </div>\n        <div className=\"flex flex-col items-center\">\n          <button\n            className=\"w-14 h-14 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2 shadow\"\n            onClick={() => alert('Scan functionality coming soon.')}\n            type=\"button\"\n            aria-label=\"Scan\"\n          >\n            <QrCode color=\"gray\" size={24} />\n          </button>\n          <span className=\"text-gray-700 dark:text-gray-300\">Scan</span>\n        </div>\n        <div className=\"flex flex-col items-center\">\n          <button\n            className=\"w-14 h-14 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2 shadow\"\n            onClick={() => setLocation('/top-up')}\n            type=\"button\"\n            aria-label=\"Top Up\"\n          >\n            <CreditCard color=\"gray\" size={24} />\n          </button>\n          <span className=\"text-gray-700 dark:text-gray-300\">Top Up</span>\n        </div>\n      </div>\n      {/* Recent Transactions */}\n      <div className=\"bg-gray-100 px-4 pt-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <span className=\"text-gray-900 text-xl font-bold\">Recent Transactions</span>\n          <button type=\"button\" className=\"text-blue-600\">See All</button>\n        </div>\n        <div className=\"space-y-2\">\n          {transactions.map((transaction) => (\n            <div key={transaction.id} className=\"flex items-center py-4 border-b border-gray-200\">\n              <div className={`w-12 h-12 rounded-full flex items-center justify-center ${transaction.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>\n                {transaction.type === 'income' ? (\n                  <ArrowDownLeft color=\"green\" size={24} />\n                ) : (\n                  <ArrowUpRight color=\"red\" size={24} />\n                )}\n              </div>\n              <div className=\"flex-1 ml-4\">\n                <span className=\"text-gray-900 font-semibold block\">{transaction.title}</span>\n                <span className=\"text-gray-500 text-sm block\">{transaction.date}</span>\n              </div>\n              <span className={`font-bold ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>\n                {transaction.type === 'income' ? '+' : ''}${Math.abs(transaction.amount).toFixed(2)}\n              </span>\n            </div>\n          ))}\n        </div>\n        {/* Analytics Section */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow\">\n          <div className=\"flex items-center mb-4\">\n            <BarChart3 color=\"gray\" size={24} />\n            <span className=\"text-gray-900 text-lg font-bold ml-2\">Usage Analytics</span>\n          </div>\n          <div className=\"h-40 rounded-xl overflow-hidden mb-4\">\n            <img \n              src=\"https://images.unsplash.com/photo-1641312874336-6279a832a3dc?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8VGVjaG5vbG9neSUyMGlubm92YXRpb258ZW58MHx8MHx8fDA%3D\" \n              alt=\"Analytics\" \n              className=\"w-full h-full object-cover\" \n            />\n          </div>\n          <span className=\"text-gray-600 text-center block\">\n            You've used 75% of your monthly AI credits\n          </span>\n        </div>\n        {/* Cryptocurrency Section */}\n        <div className=\"mt-6 bg-white rounded-2xl p-4 shadow mb-6\">\n          <div className=\"flex items-center mb-4\">\n            <Wallet color=\"gray\" size={24} />\n            <span className=\"text-gray-900 text-lg font-bold ml-2\">Digital Assets</span>\n          </div>\n          <div className=\"flex justify-between mb-3\">\n            <span className=\"text-gray-600\">AI Credits</span>\n            <span className=\"text-gray-900 font-bold\">1,250 credits</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Voice Tokens</span>\n            <span className=\"text-gray-900 font-bold\">250 tokens</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8934},"client/src/pages/generation-ui.tsx":{"content":"import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';\nimport { Send, Eye, ChevronDown } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\n\nconst ScaffoldGenerator: React.FC = () => {\n  const [messages, setMessages] = useState([\n    { id: 1, text: \"Hello! I'm your UI assistant. What kind of project would you like to create?\", sender: 'ai' },\n    { id: 2, text: \"I want to create a React Native app with a clean dashboard\", sender: 'user' },\n    { id: 3, text: \"Great! I've generated a dashboard with home, profile, and settings screens. You can preview or edit any page.\", sender: 'ai' },\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [pages] = useState([\n    { id: 1, name: 'Home', type: 'Home' },\n    { id: 2, name: 'Profile', type: 'Profile' },\n    { id: 3, name: 'Settings', type: 'Settings' },\n    { id: 4, name: 'Dashboard', type: 'Dashboard' },\n  ]);\n  const [activePage, setActivePage] = useState(4); // Set to Dashboard by default\n  const [activeView, setActiveView] = useState<'chat' | 'preview'>('preview');\n  const [showPageMenu, setShowPageMenu] = useState(false);\n  const [isPreviewMode, setIsPreviewMode] = useState(true);\n  const [showPreviewMenu, setShowPreviewMenu] = useState(false);\n  const scrollViewRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HTMLDivElement | null>(null);\n  const navRef = useRef<HTMLDivElement | null>(null);\n  const previewCardRef = useRef<HTMLDivElement | null>(null);\n  const resizeTimeout = useRef<number | null>(null);\n\n  // Auto-scroll when messages change or when switching to chat view.\n  useEffect(() => {\n    const el = scrollViewRef.current;\n    if (!el) return;\n    // only auto-scroll when in chat view so we don't unexpectedly jump when preview is active\n    if (activeView !== 'chat') return;\n    // scroll to bottom\n    el.scrollTop = el.scrollHeight;\n  }, [messages, activeView]);\n\n  // Compute preview card height as viewport minus header and nav heights.\n  useLayoutEffect(() => {\n    const setPreviewHeight = () => {\n      const headerH = headerRef.current ? headerRef.current.offsetHeight : 0;\n      const navH = navRef.current ? navRef.current.offsetHeight : 0;\n      const margin = 24; // extra spacing above/below\n      const available = Math.max(280, window.innerHeight - headerH - navH - margin);\n      if (previewCardRef.current) {\n        previewCardRef.current.style.setProperty('--preview-height', `${available}px`);\n        // ensure the card has a bottom gap at least equal to nav height + small offset\n        previewCardRef.current.style.setProperty('--preview-bottom-gap', `${navH + 12}px`);\n      }\n    };\n\n    setPreviewHeight();\n\n    const handleResize = () => {\n      if (resizeTimeout.current) window.clearTimeout(resizeTimeout.current);\n      resizeTimeout.current = window.setTimeout(() => setPreviewHeight(), 80);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // observe header/nav size changes\n    const ro = new ResizeObserver(() => setPreviewHeight());\n    if (headerRef.current) ro.observe(headerRef.current);\n    if (navRef.current) ro.observe(navRef.current);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      ro.disconnect();\n      if (resizeTimeout.current) window.clearTimeout(resizeTimeout.current);\n    };\n  }, []);\n\n  const handleSend = () => {\n    if (inputText.trim() === '') return;\n    const newMessage = {\n      id: messages.length + 1,\n      text: inputText,\n      sender: 'user'\n    };\n    setMessages([...messages, newMessage]);\n    setInputText('');\n    setTimeout(() => {\n      const aiResponse = {\n        id: messages.length + 2,\n        text: \"I've updated the page as requested. You can preview the changes now.\",\n        sender: 'ai'\n      };\n      setMessages(prev => [...prev, aiResponse]);\n    }, 1000);\n  };\n\n  // Removed unused handlePageSelect function\n\n  const handleCopyCode = () => {\n    const code = `// Generated UI Code\\nimport React from 'react';\\n// ...`;\n    try {\n      navigator.clipboard.writeText(code);\n      // optional: show toast (not implemented)\n    } catch (e) {\n      console.error('copy failed', e);\n    }\n  };\n\n  const handleEditPage = (pageName: string) => {\n    setInputText(`@${pageName}: `);\n  };\n\n  const dashboardData = {\n    stats: [\n      { title: 'Total Users', value: '12,361', change: '+12.3%' },\n      { title: 'Revenue', value: '$24,780', change: '+8.2%' },\n      { title: 'Conversion', value: '4.7%', change: '+1.1%' },\n      { title: 'Active Sessions', value: '1,294', change: '+3.4%' },\n    ],\n    chartData: [\n      { month: 'Jan', value: 4000 },\n      { month: 'Feb', value: 3000 },\n      { month: 'Mar', value: 2000 },\n      { month: 'Apr', value: 2780 },\n      { month: 'May', value: 1890 },\n      { month: 'Jun', value: 2390 },\n    ]\n  };\n\n  const renderDashboardPreview = () => (\n    <div className=\"p-4\">\n      <div className=\"flex flex-row flex-wrap gap-4 mb-6\">\n        {dashboardData.stats.map((stat, index) => (\n          <div key={index} className=\"flex-1 min-w-[40%] bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n            <p className=\"text-gray-500 text-sm mb-1\">{stat.title}</p>\n            <p className=\"text-2xl font-bold text-gray-800\">{stat.value}</p>\n            <p className=\"text-green-500 text-sm mt-1\">{stat.change} from last month</p>\n          </div>\n        ))}\n      </div>\n      <div className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100 mb-6\">\n        <div className=\"flex flex-row justify-between items-center mb-4\">\n          <span className=\"text-lg font-semibold text-gray-800\">Performance Overview</span>\n          <button className=\"flex flex-row items-center\">\n            <span className=\"text-blue-500 mr-1\">Monthly</span>\n            <ChevronDown color=\"#3B82F6\" size={16} />\n          </button>\n        </div>\n        <div className=\"h-48 bg-gray-100 rounded-lg flex justify-center items-center\">\n          <img \n            src=\"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8RGF0YSUyMGFuYWx5dGljc3xlbnwwfHwwfHx8MA%3D%3D\" \n            alt=\"Chart\" \n            style={{ width: '80%', height: 180, objectFit: 'contain' }}\n          />\n        </div>\n      </div>\n      <div className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n        <span className=\"text-lg font-semibold text-gray-800 mb-4 block\">Recent Activity</span>\n        <div className=\"flex flex-row items-center mb-4\">\n          <div className=\"w-10 h-10 rounded-full bg-blue-100 flex justify-center items-center mr-3\">\n            <span className=\"text-blue-500 font-bold\">JD</span>\n          </div>\n          <div className=\"flex-1\">\n            <span className=\"font-medium text-gray-800\">John Doe</span>\n            <span className=\"text-gray-500 text-sm block\">Updated the dashboard UI</span>\n          </div>\n          <span className=\"text-gray-400 text-sm\">2h ago</span>\n        </div>\n        <div className=\"flex flex-row items-center mb-4\">\n          <div className=\"w-10 h-10 rounded-full bg-green-100 flex justify-center items-center mr-3\">\n            <span className=\"text-green-500 font-bold\">SA</span>\n          </div>\n          <div className=\"flex-1\">\n            <span className=\"font-medium text-gray-800\">Sarah Adams</span>\n            <span className=\"text-gray-500 text-sm block\">Created new user profile</span>\n          </div>\n          <span className=\"text-gray-400 text-sm\">4h ago</span>\n        </div>\n        <div className=\"flex flex-row items-center\">\n          <div className=\"w-10 h-10 rounded-full bg-purple-100 flex justify-center items-center mr-3\">\n            <span className=\"text-purple-500 font-bold\">MJ</span>\n          </div>\n          <div className=\"flex-1\">\n            <span className=\"font-medium text-gray-800\">Mike Johnson</span>\n            <span className=\"text-gray-500 text-sm block\">Fixed authentication bug</span>\n          </div>\n          <span className=\"text-gray-400 text-sm\">1d ago</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCodePreview = () => (\n    <div className=\"p-4\">\n      <div className=\"bg-gray-900 rounded-xl p-4\">\n        <pre className=\"text-green-400 font-mono text-sm whitespace-pre-wrap\">\n{`// Generated UI Code\\nimport React from 'react';\\nimport { View, Text, ScrollView } from 'react-native';\\n\\nexport default function Dashboard() {\\n  return (\\n    <ScrollView className=\"flex-1 p-4\">\\n      <Text className=\"text-2xl font-bold text-gray-800\">Dashboard</Text>\\n      <Text className=\"text-gray-500 mt-1\">Welcome back, John!</Text>\\n\\n      {/* Stats Cards */}\\n      <View className=\"flex-row flex-wrap gap-4 mt-6\">\\n        <View className=\"flex-1 min-w-[40%] bg-white rounded-xl p-4\">\\n          <Text className=\"text-gray-500 text-sm\">Total Users</Text>\\n          <Text className=\"text-2xl font-bold\">12,361</Text>\\n          <Text className=\"text-green-500 text-sm\">+12.3% from last month</Text>\\n        </View>\\n        {/* More stat cards here */}\\n      </View>\\n\\n      {/* Chart Section */}\\n      <View className=\"bg-white rounded-xl p-4 mt-6\">\\n        <Text className=\"text-lg font-semibold\">Performance Overview</Text>\\n        {/* Chart implementation */}\\n      </View>\\n\\n      {/* Recent Activity */}\\n      <View className=\"bg-white rounded-xl p-4 mt-6\">\\n        <Text className=\"text-lg font-semibold mb-4\">Recent Activity</Text>\\n        {/* Activity items */}\\n      </View>\\n    </ScrollView>\\n  );\\n}`}\n        </pre>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden bg-gray-50\">\n      {/* Header (TopBar) */}\n      <TopBar ref={headerRef} title=\"UI Scaffold Generator\" />\n      {/* Main Content */}\n      <div className=\"flex-1 relative\">\n        {/* Chat Panel */}\n        <div className={`absolute inset-0 flex flex-col bg-gray-50 transition-transform duration-300 transform ${activeView === 'chat' ? 'translate-x-0' : 'translate-x-full'}`}>\n          <div \n            ref={scrollViewRef}\n            className=\"flex-1 p-4 overflow-y-auto pb-20\"\n          >\n            {messages.map((message) => (\n              <div \n                key={message.id} \n                className={`mb-4 max-w-[80%] ${message.sender === 'user' ? 'ml-auto' : ''}`}\n              >\n                <div \n                  className={`p-3 rounded-2xl ${\n                    message.sender === 'user' \n                      ? 'bg-blue-500 rounded-tr-none' \n                      : 'bg-gray-100 rounded-tl-none'\n                  }`}\n                >\n                  <span \n                    className={`${\n                      message.sender === 'user' ? 'text-white' : 'text-gray-800'\n                    }`}\n                  >\n                    {message.text}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n          {/* Input Area */}\n          <div className=\"p-4 border-t border-gray-200 bg-white\">\n            <div className=\"flex flex-row items-center space-x-2\">\n              <textarea\n                value={inputText}\n                onChange={e => setInputText(e.target.value)}\n                placeholder=\"Type your request...\"\n                className=\"flex-1 bg-gray-100 rounded-full px-4 py-2 resize-none focus:outline-none\"\n                rows={1}\n              />\n              <button \n                onClick={handleSend}\n                className=\"bg-blue-500 hover:bg-blue-600 rounded-full p-2.5 text-white\"\n              >\n                <Send size={18} />\n              </button>\n            </div>\n          </div>\n        </div>\n        {/* Preview Panel */}\n        <div className={`absolute inset-0 flex flex-col bg-white transition-transform duration-300 transform ${activeView === 'preview' ? 'translate-x-0' : '-translate-x-full'}`}>\n          {/* Preview Header removed - controls will be placed elsewhere */}\n          {/* Preview Content - render inside a centered phone-like card */}\n          <div className=\"flex-1 overflow-hidden relative\">\n            {/* top-right preview menu (three dots) */}\n            <div className=\"absolute top-3 right-3 z-20\">\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowPreviewMenu(prev => !prev)}\n                  className=\"p-2 rounded-md hover:bg-gray-100\"\n                  aria-label=\"Preview menu\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"w-6 h-6\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z\" />\n                  </svg>\n                </button>\n                {showPreviewMenu && (\n                  <div className=\"absolute right-0 mt-2 w-44 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5\">\n                    <button onClick={() => { handleCopyCode(); setShowPreviewMenu(false); }} className=\"w-full text-left px-4 py-2 hover:bg-gray-50\">Copy code</button>\n                    <button onClick={() => { setIsPreviewMode(prev => !prev); setShowPreviewMenu(false); }} className=\"w-full text-left px-4 py-2 hover:bg-gray-50\">Toggle view</button>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center p-6\">\n        <div ref={previewCardRef} className=\"w-full max-w-[420px] bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\"\n          style={{ marginBottom: 'var(--preview-bottom-gap, 24px)' }}>\n                {/* Phone screen area - fixed height but capped to viewport minus header/nav so it never overlaps nav */}\n       <div className=\"bg-white overflow-hidden flex flex-col mt-4 mb-20\"\n         style={{ height: 'var(--preview-height)', maxHeight: 'calc(100vh - 80px)' }}>\n                  {/* Scrollable phone screen content area with fixed height */}\n                  <div className=\"flex-1 h-full overflow-y-auto\">\n                    {isPreviewMode ? renderDashboardPreview() : renderCodePreview()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Bar */}\n  <div ref={navRef} className=\"bg-white h-14 flex items-center justify-between px-4 border-t border-gray-200\">\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setActiveView('chat')}\n            className={`flex items-center space-x-2 px-3 py-1.5 rounded-md ${activeView === 'chat' ? 'text-blue-600 bg-blue-50' : 'text-gray-600 hover:bg-gray-50'}`}\n          >\n            <Send size={18} />\n            <span className=\"text-sm font-medium\">Chat</span>\n          </button>\n          <button\n            onClick={() => setActiveView('preview')}\n            className={`flex items-center space-x-2 px-3 py-1.5 rounded-md ${activeView === 'preview' ? 'text-blue-600 bg-blue-50' : 'text-gray-600 hover:bg-gray-50'}`}\n          >\n            <Eye size={18} />\n            <span className=\"text-sm font-medium\">Preview</span>\n          </button>\n        </div>\n        \n      {/* Page Selector Dropdown */}\n        <div className=\"relative\">\n          <button\n            type=\"button\"\n            className=\"flex items-center space-x-2 px-4 py-2 rounded-lg text-gray-600\"\n            onClick={() => setShowPageMenu((prev) => !prev)}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" className=\"w-5 h-5\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\" />\n            </svg>\n            <span className=\"font-medium\">Pages</span>\n          </button>\n          {showPageMenu && (\n            <div className=\"origin-bottom-right absolute right-0 bottom-full mb-2 w-56 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\">\n              <div className=\"py-2\">\n                {pages.map((page) => (\n                  <button\n                    key={page.id}\n                    onClick={() => { setActivePage(page.id); setShowPageMenu(false); }}\n                    className={`w-full text-left px-4 py-3 hover:bg-blue-50 ${activePage === page.id ? 'bg-blue-100 text-blue-700 font-semibold' : 'text-gray-700'}`}\n                  >\n                    {page.name}\n                  </button>\n                ))}\n                <button\n                  onClick={() => { handleEditPage(pages.find(p => p.id === activePage)?.name || ''); setShowPageMenu(false); }}\n                  className=\"w-full text-left px-4 py-3 text-gray-400 hover:bg-gray-50\"\n                >\n                  + Add Page\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScaffoldGenerator;\n\n\n","size_bytes":17394},"client/src/pages/image-video-gen.tsx":{"content":"import { useState } from 'react';\nimport TopBar from '@/components/TopBar';\nimport {\n  Sparkles,\n  Image as ImageIcon,\n  Video as VideoIcon,\n  Search,\n  Download,\n  Heart,\n  Share2,\n  Settings,\n  Wand2,\n  X,\n  ChevronLeft,\n  ChevronRight,\n  Play,\n  Pause,\n  Volume2,\n  VolumeX,\n} from 'lucide-react';\n\ntype GeneratedContent = {\n  id: string;\n  type: 'image' | 'video';\n  title: string;\n  description: string;\n  likes: number;\n  downloads: number;\n  image: string;\n  isLiked: boolean;\n};\n\nconst mockGeneratedContent: GeneratedContent[] = [\n  {\n    id: '1',\n    type: 'image',\n    title: 'Abstract Art',\n    description: 'Generated with prompt: \"Abstract art with vibrant colors\"',\n    likes: 24,\n    downloads: 12,\n    image: 'https://images.unsplash.com/photo-1694903110330-cc64b7e1d21d?w=900&auto=format&fit=crop&q=60',\n    isLiked: false,\n  },\n  {\n    id: '2',\n    type: 'video',\n    title: 'Cyberpunk Scene',\n    description: 'Generated with prompt: \"Futuristic cyberpunk city\"',\n    likes: 42,\n    downloads: 31,\n    image: 'https://plus.unsplash.com/premium_photo-1700769221371-e6fbd55753ee?w=900&auto=format&fit=crop&q=60',\n    isLiked: true,\n  },\n  {\n    id: '3',\n    type: 'image',\n    title: 'Minimalist Design',\n    description: 'Generated with prompt: \"Clean, minimalist graphic design\"',\n    likes: 18,\n    downloads: 9,\n    image: 'https://images.unsplash.com/photo-1544654423372-91c3d0dade3b?w=900&auto=format&fit=crop&q=60',\n    isLiked: false,\n  },\n  {\n    id: '4',\n    type: 'image',\n    title: 'Digital Art',\n    description: 'Generated with prompt: \"Digital art with geometric shapes\"',\n    likes: 35,\n    downloads: 22,\n    image: 'https://images.unsplash.com/photo-1729179666011-38d13280b92f?w=900&auto=format&fit=crop&q=60',\n    isLiked: false,\n  },\n];\n\nconst mockPrompts = [\n  'Abstract art with vibrant colors',\n  'Futuristic cyberpunk city',\n  'Minimalist graphic design',\n  'Digital art with geometric shapes',\n  '3D rendering of a mountain landscape',\n];\n\nexport default function ImageVideoGenPage() {\n  const [activeTab, setActiveTab] = useState<'images' | 'videos'>('images');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [prompt, setPrompt] = useState('');\n  const [generatedContent, setGeneratedContent] = useState(mockGeneratedContent);\n  const [recentPrompts] = useState(mockPrompts);\n  const [showPromptInput, setShowPromptInput] = useState(false);\n  const [selectedMedia, setSelectedMedia] = useState<{id: string, uri: string, type: 'image' | 'video'} | null>(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  const toggleLike = (id: string) => {\n    setGeneratedContent(prev => prev.map(item =>\n      item.id === id ? { ...item, isLiked: !item.isLiked } : item\n    ));\n  };\n\n  const generateContent = () => {\n    if (!prompt.trim()) return;\n    const newContent: GeneratedContent = {\n      id: `${generatedContent.length + 1}`,\n      type: activeTab === 'images' ? 'image' : 'video',\n      title: prompt.substring(0, 20) + (prompt.length > 20 ? '...' : ''),\n      description: `Generated with prompt: \"${prompt}\"`,\n      likes: 0,\n      downloads: 0,\n      image: 'https://images.unsplash.com/photo-1694903110330-cc64b7e1d21d?w=900&auto=format&fit=crop&q=60',\n      isLiked: false,\n    };\n    setGeneratedContent([newContent, ...generatedContent]);\n    setPrompt('');\n    setShowPromptInput(false);\n  };\n\n  const filteredContent = generatedContent.filter(item =>\n    (activeTab === 'images' ? item.type === 'image' : item.type === 'video') &&\n    (item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n     item.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const openMediaViewer = (id: string, uri: string, type: 'image' | 'video') => {\n    setSelectedMedia({ id, uri, type });\n  };\n  const closeMediaViewer = () => setSelectedMedia(null);\n  const navigateMedia = (direction: 'prev' | 'next') => {\n    if (!selectedMedia) return;\n    const currentIndex = filteredContent.findIndex(item => item.id === selectedMedia.id);\n    if (currentIndex === -1) return;\n    let newIndex;\n    if (direction === 'prev') {\n      newIndex = currentIndex > 0 ? currentIndex - 1 : filteredContent.length - 1;\n    } else {\n      newIndex = currentIndex < filteredContent.length - 1 ? currentIndex + 1 : 0;\n    }\n    const newItem = filteredContent[newIndex];\n    setSelectedMedia({\n      id: newItem.id,\n      uri: newItem.image,\n      type: newItem.type,\n    });\n  };\n\n  return (\n  <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n      {/* Top Bar */}\n      <TopBar title=\"AI Generation\" />\n      <div className=\"px-4\">\n        {/* Search Bar */}\n        <div className=\"flex items-center bg-gray-100 dark:bg-gray-800 rounded-xl mb-4\">\n          <Search color=\"#6B7280\" size={20} />\n          <input\n            className=\"flex-1 p-4 text-gray-900 dark:text-gray-100 bg-transparent outline-none\"\n            placeholder=\"Search generated content...\"\n            value={searchQuery}\n            onChange={e => setSearchQuery(e.target.value)}\n          />\n        </div>\n        {/* Tab Selector */}\n        <div className=\"flex bg-gray-100 rounded-lg p-1 mb-4\">\n          <button\n            className={`flex-1 py-3 rounded-md flex items-center justify-center ${activeTab === 'images' ? 'bg-white dark:bg-gray-900 shadow-sm' : ''}`}\n            onClick={() => setActiveTab('images')}\n          >\n            <ImageIcon color={activeTab === 'images' ? '#3B82F6' : '#6B7280'} size={18} />\n            <span className={`font-medium ml-2 ${activeTab === 'images' ? 'text-blue-500 dark:text-blue-300' : 'text-gray-500 dark:text-gray-400'}`}>Images</span>\n          </button>\n          <button\n            className={`flex-1 py-3 rounded-md flex items-center justify-center ${activeTab === 'videos' ? 'bg-white dark:bg-gray-900 shadow-sm' : ''}`}\n            onClick={() => setActiveTab('videos')}\n          >\n            <VideoIcon color={activeTab === 'videos' ? '#3B82F6' : '#6B7280'} size={18} />\n            <span className={`font-medium ml-2 ${activeTab === 'videos' ? 'text-blue-500 dark:text-blue-300' : 'text-gray-500 dark:text-gray-400'}`}>Videos</span>\n          </button>\n        </div>\n        {/* Generate Button */}\n        <button\n          className=\"bg-blue-500 flex items-center justify-center py-4 rounded-xl mb-4 w-full\"\n          onClick={() => setShowPromptInput(!showPromptInput)}\n        >\n          <Wand2 color=\"white\" size={20} />\n          <span className=\"text-white font-bold text-lg ml-2\">{showPromptInput ? 'Cancel' : 'Generate New Content'}</span>\n        </button>\n        {/* Prompt Input */}\n        {showPromptInput && (\n          <div className=\"mb-4\">\n            <div className=\"flex bg-white rounded-xl p-4 mb-3\">\n              <textarea\n                className=\"flex-1 text-gray-900 bg-transparent outline-none resize-none\"\n                placeholder=\"Enter your creative prompt...\"\n                value={prompt}\n                onChange={e => setPrompt(e.target.value)}\n                rows={2}\n              />\n            </div>\n            {/* Recent Prompts */}\n            <div className=\"text-gray-500 font-medium mb-2\">Recent Prompts:</div>\n            <div className=\"flex gap-2 mb-3 overflow-x-auto\">\n              {recentPrompts.map((recentPrompt, index) => (\n                <button\n                  key={index}\n                  className=\"bg-gray-100 px-3 py-2 rounded-lg text-gray-700 text-sm\"\n                  onClick={() => setPrompt(recentPrompt)}\n                >\n                  {recentPrompt}\n                </button>\n              ))}\n            </div>\n            <button\n              className=\"bg-blue-600 py-3 rounded-xl w-full text-white font-bold\"\n              onClick={generateContent}\n            >\n              Generate\n            </button>\n          </div>\n        )}\n      </div>\n      {/* Content Grid */}\n      <div className=\"flex-1 p-4\">\n        <div className=\"flex flex-wrap gap-4\">\n          {filteredContent.map(item => (\n            <button\n              key={item.id}\n              className=\"bg-white rounded-xl overflow-hidden shadow-sm flex-1 min-w-[45%] text-left\"\n              onClick={() => openMediaViewer(item.id, item.image, item.type)}\n            >\n              <img\n                src={item.image}\n                alt={item.title}\n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-3\">\n                <div className=\"font-bold text-gray-900 mb-1 truncate\">{item.title}</div>\n                <div className=\"text-gray-500 text-sm mb-3 truncate\">{item.description}</div>\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <button\n                      className=\"flex items-center mr-3\"\n                      onClick={e => {\n                        e.stopPropagation();\n                        toggleLike(item.id);\n                      }}\n                    >\n                      <Heart\n                        color={item.isLiked ? '#EF4444' : '#6B7280'}\n                        size={16}\n                        fill={item.isLiked ? '#EF4444' : 'none'}\n                      />\n                      <span className=\"text-gray-500 text-sm ml-1\">{item.likes}</span>\n                    </button>\n                    <span className=\"flex items-center\">\n                      <Download color=\"#6B7280\" size={16} />\n                      <span className=\"text-gray-500 text-sm ml-1\">{item.downloads}</span>\n                    </span>\n                  </div>\n                  <button className=\"ml-2\">\n                    <Share2 color=\"#6B7280\" size={16} />\n                  </button>\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Media Viewer Modal */}\n      {selectedMedia && (\n        <div className=\"fixed inset-0 z-50 flex flex-col bg-black\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center p-4 bg-black\">\n            <button onClick={closeMediaViewer}>\n              <X color=\"white\" size={28} />\n            </button>\n            <span className=\"text-white font-bold text-lg\">\n              {selectedMedia.type === 'image' ? 'Image Viewer' : 'Video Player'}\n            </span>\n            <div className=\"w-7\" />\n          </div>\n          {/* Media Content */}\n          <div className=\"flex-1 flex items-center justify-center\">\n            {selectedMedia.type === 'image' ? (\n              <img\n                src={selectedMedia.uri}\n                alt=\"Selected\"\n                className=\"max-w-full max-h-[70vh] object-contain\"\n              />\n            ) : (\n              <div className=\"w-full h-[70vh] bg-gray-800 flex items-center justify-center relative\">\n                <img\n                  src={selectedMedia.uri}\n                  alt=\"Video\"\n                  className=\"max-w-full max-h-[70vh] object-contain\"\n                />\n                <button\n                  className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\"\n                  onClick={() => setIsPlaying(p => !p)}\n                >\n                  {isPlaying ? <Pause color=\"white\" size={48} /> : <Play color=\"white\" size={48} />}\n                </button>\n              </div>\n            )}\n          </div>\n          {/* Media Controls */}\n          <div className=\"flex justify-between items-center p-4 bg-black\">\n            <button onClick={() => navigateMedia('prev')}>\n              <ChevronLeft color=\"white\" size={28} />\n            </button>\n            <div className=\"flex items-center\">\n              {selectedMedia.type === 'video' && (\n                <button className=\"mr-4\" onClick={() => setIsMuted(m => !m)}>\n                  {isMuted ? <VolumeX color=\"white\" size={24} /> : <Volume2 color=\"white\" size={24} />}\n                </button>\n              )}\n              <button>\n                <Download color=\"white\" size={24} />\n              </button>\n            </div>\n            <button onClick={() => navigateMedia('next')}>\n              <ChevronRight color=\"white\" size={28} />\n            </button>\n          </div>\n        </div>\n      )}\n      {/* Settings Modal */}\n      {showSettings && (\n        <div className=\"fixed inset-0 z-50 flex items-end\">\n          <div className=\"bg-white rounded-t-3xl p-6 w-full max-w-lg mx-auto\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <span className=\"text-xl font-bold text-gray-900\">Settings</span>\n              <button onClick={() => setShowSettings(false)}>\n                <X color=\"#6B7280\" size={28} />\n              </button>\n            </div>\n            <div className=\"overflow-y-auto max-h-[60vh]\">\n              <div className=\"mb-6\">\n                <div className=\"text-lg font-semibold text-gray-900 mb-4\">AI Model</div>\n                <div className=\"bg-gray-100 rounded-xl p-4\">\n                  <span className=\"text-gray-700\">Stable Diffusion v4.2</span>\n                </div>\n              </div>\n              <div className=\"mb-6\">\n                <div className=\"text-lg font-semibold text-gray-900 mb-4\">Quality</div>\n                <div className=\"flex justify-between\">\n                  {[256, 512, 768, 1024].map(size => (\n                    <button\n                      key={size}\n                      className=\"bg-gray-100 rounded-lg p-3 flex-1 items-center mx-1\"\n                    >\n                      <span className=\"text-gray-700\">{size}p</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n              <div className=\"mb-6\">\n                <div className=\"text-lg font-semibold text-gray-900 mb-4\">Style</div>\n                <div className=\"flex flex-wrap\">\n                  {['Realistic', 'Anime', 'Cartoon', 'Abstract', 'Cyberpunk', 'Minimalist'].map(style => (\n                    <button\n                      key={style}\n                      className=\"bg-gray-100 rounded-lg px-4 py-2 m-1\"\n                    >\n                      <span className=\"text-gray-700\">{style}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n              <div className=\"mb-6\">\n                <div className=\"text-lg font-semibold text-gray-900 mb-4\">Export Options</div>\n                <div className=\"flex justify-between items-center bg-gray-100 rounded-xl p-4 mb-3\">\n                  <span className=\"text-gray-700\">Watermark</span>\n                  <div className=\"w-12 h-6 bg-blue-500 rounded-full\" />\n                </div>\n                <div className=\"flex justify-between items-center bg-gray-100 rounded-xl p-4\">\n                  <span className=\"text-gray-700\">Auto-enhance</span>\n                  <div className=\"w-12 h-6 bg-gray-300 rounded-full\" />\n                </div>\n              </div>\n              <button\n                className=\"bg-blue-500 py-4 rounded-xl w-full text-white font-bold mb-4\"\n                onClick={() => setShowSettings(false)}\n              >\n                Save Settings\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15484},"client/src/pages/language.tsx":{"content":"import React, { useState } from 'react';\nimport TopBar from '@/components/TopBar';\nimport { ChevronLeft, Check } from 'lucide-react';\n\nconst languages = [\n  { id: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸', region: 'United States' },\n  { id: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸', region: 'EspaÃ±a' },\n  { id: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·', region: 'France' },\n  { id: 'de', name: 'Deutsch', flag: 'ðŸ‡©ðŸ‡ª', region: 'Deutschland' },\n  { id: 'ja', name: 'æ—¥æœ¬èªž', flag: 'ðŸ‡¯ðŸ‡µ', region: 'æ—¥æœ¬' },\n  { id: 'zh', name: 'ä¸­æ–‡', flag: 'ðŸ‡¨ðŸ‡³', region: 'ä¸­å›½' },\n  { id: 'ko', name: 'í•œêµ­ì–´', flag: 'ðŸ‡°ðŸ‡·', region: 'ëŒ€í•œë¯¼êµ­' },\n  { id: 'pt', name: 'PortuguÃªs', flag: 'ðŸ‡µðŸ‡¹', region: 'Portugal' },\n];\n\nexport default function LanguageSettingsPage({ onBack }: { onBack?: () => void }) {\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n\n  const selectLanguage = (id: string) => {\n    setSelectedLanguage(id);\n    // Persist selection if needed\n  };\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      {/* Header */}\n      <TopBar title=\"Language\" onBack={onBack} />\n  <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto overflow-auto\">\n  <div className=\"text-gray-500 dark:text-gray-400 text-sm mb-3\">Select your preferred language</div>\n        <div className=\"flex flex-col gap-3\">\n          {languages.map((lang) => (\n            <button\n              key={lang.id}\n              className={`flex flex-row items-center justify-between bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 transition-all ${selectedLanguage === lang.id ? 'ring-2 ring-blue-500' : ''}`}\n              onClick={() => selectLanguage(lang.id)}\n            >\n              <span className=\"text-xl mr-3\">{lang.flag}</span>\n              <div className=\"flex-1 text-left\">\n                <div className=\"text-base text-gray-800 dark:text-gray-100\">{lang.name}</div>\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">{lang.region}</div>\n              </div>\n              {selectedLanguage === lang.id && <Check size={20} className=\"text-emerald-500 dark:text-emerald-400\" />}\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":2454},"client/src/pages/login.tsx":{"content":"\nimport React, { useState, useContext } from 'react';\nimport { useLocation } from 'wouter';\nimport { Eye, EyeOff, Mail, Lock, Facebook, Twitter, Github } from 'lucide-react';\nimport { AuthContext } from '../contexts/AuthContext';\n\nexport default function LoginPage() {\n        const [, setLocation] = useLocation();\n        const [email, setEmail] = useState('');\n        const [password, setPassword] = useState('');\n        const [showPassword, setShowPassword] = useState(false);\n        const [emailError, setEmailError] = useState('');\n        const [passwordError, setPasswordError] = useState('');\n        const { signIn, authLoading, signInWithGoogle, signInWithGitHub } = useContext(AuthContext);\n        const [formError, setFormError] = useState('');\n\n        const validateForm = () => {\n                let isValid = true;\n                setEmailError('');\n                setPasswordError('');\n                if (!email) {\n                        setEmailError('Email is required');\n                        isValid = false;\n                } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n                        setEmailError('Please enter a valid email');\n                        isValid = false;\n                }\n                if (!password) {\n                        setPasswordError('Password is required');\n                        isValid = false;\n                } else if (password.length < 6) {\n                        setPasswordError('Password must be at least 6 characters');\n                        isValid = false;\n                }\n                return isValid;\n        };\n\n        const handleLogin = async () => {\n                console.log('Login button clicked');\n                if (validateForm()) {\n                        setFormError('');\n                        try {\n                                console.log('Calling signIn with', email, password);\n                                                                const res = await signIn(email, password);\n                                                                console.log('signIn result:', res);\n                                                                if (res?.error) setFormError(res.error.message || 'Login failed');\n                                                                else if (res?.user) {\n                                                                        setLocation('/home');\n                                                                }\n                        } catch (err: any) {\n                                console.error('Login error:', err);\n                                setFormError(err?.message ?? 'Login failed');\n                        }\n                } else {\n                        console.log('Validation failed');\n                }\n        };\n\n        const handleSocialLogin = async (provider: string) => {\n                try {\n                        if (provider === 'Google') {\n                                await signInWithGoogle();\n                        } else if (provider === 'GitHub') {\n                                await signInWithGitHub();\n                        } else {\n                                alert(`Login with ${provider} is not yet implemented`);\n                        }\n                } catch (err: any) {\n                        setFormError(err?.message ?? `${provider} login failed`);\n                }\n        };\n\n        return (\n                <div className=\"min-h-screen flex items-center justify-center bg-background mobile-safe-container\">\n                        <div className=\"w-full max-w-md px-6 py-12 bg-card rounded-xl shadow\">\n                                {/* Header */}\n                                <div className=\"mb-12 text-center\">\n                                        <h1 className=\"text-3xl font-bold text-gray-800 dark:text-gray-100 mb-2\">Welcome Back</h1>\n                                        <p className=\"text-gray-600 dark:text-gray-400\">Sign in to continue your journey</p>\n                                </div>\n                                {/* Login Form */}\n                                <div className=\"bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg mb-8\">\n                                        {/* Email Field */}\n                                        <div className=\"mb-5\">\n                                                <div className=\"flex items-center border border-gray-300 rounded-xl px-4 py-3 bg-white\">\n                                                        <Mail size={20} color=\"#6B7280\" />\n                                                        <input\n                                                                className=\"flex-1 ml-3 text-gray-800 outline-none bg-transparent\"\n                                                                type=\"email\"\n                                                                placeholder=\"Email address\"\n                                                                value={email}\n                                                                onChange={e => setEmail(e.target.value)}\n                                                                autoCapitalize=\"none\"\n                                                        />\n                                                </div>\n                                                {emailError && (\n                                                        <div className=\"text-red-500 text-sm mt-1 ml-1\">{emailError}</div>\n                                                )}\n                                        </div>\n                                        {/* Password Field */}\n                                        <div className=\"mb-6\">\n                                                <div className=\"flex items-center border border-gray-300 rounded-xl px-4 py-3 bg-white\">\n                                                        <Lock size={20} color=\"#6B7280\" />\n                                                        <input\n                                                                className=\"flex-1 ml-3 text-gray-800 outline-none bg-transparent\"\n                                                                type={showPassword ? 'text' : 'password'}\n                                                                placeholder=\"Password\"\n                                                                value={password}\n                                                                onChange={e => setPassword(e.target.value)}\n                                                        />\n                                                        <button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"ml-2\">\n                                                                {showPassword ? (\n                                                                        <EyeOff size={20} color=\"#6B7280\" />\n                                                                ) : (\n                                                                        <Eye size={20} color=\"#6B7280\" />\n                                                                )}\n                                                        </button>\n                                                </div>\n                                                {passwordError && (\n                                                        <div className=\"text-red-500 text-sm mt-1 ml-1\">{passwordError}</div>\n                                                )}\n                                        </div>\n                                        {/* Forgot Password */}\n                                        <div className=\"mb-6 text-right\">\n                                                <button type=\"button\" className=\"text-blue-600 font-medium\">Forgot Password?</button>\n                                        </div>\n                                        {/* Login Button */}\n                                        <button\n                                                className=\"w-full bg-blue-600 rounded-xl py-4 text-white font-bold text-lg mb-6\"\n                                                onClick={handleLogin}\n                                                disabled={authLoading}\n                                                type=\"button\"\n                                        >\n                                                Sign In\n                                        </button>\n                                        {formError && <div className=\"text-red-500 text-sm mt-1\">{formError}</div>}\n                                        {/* Divider */}\n                                        <div className=\"flex items-center mb-6\">\n                                                <div className=\"flex-1 h-px bg-gray-300\" />\n                                                <span className=\"text-gray-500 mx-4\">OR</span>\n                                                <div className=\"flex-1 h-px bg-gray-300\" />\n                                        </div>\n                                        {/* Social Login Buttons */}\n                                        <div className=\"flex justify-between mb-8\">\n                                                <button\n                                                        className=\"flex-1 mx-1 bg-white border border-gray-300 rounded-xl py-3 flex items-center justify-center\"\n                                                        type=\"button\"\n                                                        onClick={() => handleSocialLogin('Facebook')}\n                                                >\n                                                        <Facebook size={24} color=\"#3B82F6\" />\n                                                </button>\n                                                <button\n                                                        className=\"flex-1 mx-1 bg-white border border-gray-300 rounded-xl py-3 flex items-center justify-center\"\n                                                        type=\"button\"\n                                                        onClick={() => handleSocialLogin('Twitter')}\n                                                >\n                                                        <Twitter size={24} color=\"#3B82F6\" />\n                                                </button>\n                                                <button\n                                                        className=\"flex-1 mx-1 bg-white border border-gray-300 rounded-xl py-3 flex items-center justify-center\"\n                                                        type=\"button\"\n                                                        onClick={() => handleSocialLogin('GitHub')}\n                                                >\n                                                        <Github size={24} color=\"#374151\" />\n                                                </button>\n                                        </div>\n                                </div>\n                                {/* Sign Up Link */}\n                                <div className=\"flex justify-center\">\n                                        <span className=\"text-gray-600\">Don't have an account? </span>\n                                        <button type=\"button\" className=\"text-blue-600 font-bold ml-1\" onClick={() => setLocation('/signup')}>Sign Up</button>\n                                </div>\n                        </div>\n                        {/* Safe area bottom padding */}\n                        <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n                </div>\n        );\n}\n","size_bytes":11699},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n  <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n  <Card className=\"w-full max-w-md mx-4 dark:bg-gray-800\">\n  <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":873},"client/src/pages/notifications.tsx":{"content":"import React, { useState } from 'react';\nimport TopBar from '@/components/TopBar';\nimport { Bell, Shield, Info, ChevronRight } from 'lucide-react';\n\nconst notificationTypesList = [\n  { id: 'messages', name: 'Messages', enabled: false },\n  { id: 'mentions', name: 'Mentions', enabled: false },\n  { id: 'reactions', name: 'Reactions', enabled: false },\n  { id: 'voice', name: 'Voice Messages', enabled: false },\n  { id: 'files', name: 'File Sharing', enabled: false },\n  { id: 'updates', name: 'App Updates', enabled: false },\n];\n\nexport default function NotificationSettingsPage({ onBack }: { onBack?: () => void }) {\n  const [masterNotification, setMasterNotification] = useState(true);\n  const [notificationTypes] = useState(notificationTypesList);\n  const [browserPermissions, setBrowserPermissions] = useState(false);\n\n  const toggleNotificationType = (_id: string) => {\n    // In a real app, this would update the specific notification type\n    alert('Feature Disabled: This notification type is currently disabled');\n  };\n\n  const requestBrowserPermissions = () => {\n    if (window.confirm('This feature requires browser permissions. Would you like to enable them?')) {\n      setBrowserPermissions(true);\n    }\n  };\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 overflow-auto pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      <TopBar title=\"Notifications\" onBack={onBack} />\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* Master Toggle */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"flex flex-row items-center\">\n              <Bell size={24} className=\"text-blue-500 mr-3\" />\n              <div>\n                <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Notifications</div>\n                <div className=\"text-gray-500 dark:text-gray-400 text-sm\">Enable or disable all notifications</div>\n              </div>\n            </div>\n            <button\n              className={`w-12 h-6 rounded-full ${masterNotification ? 'bg-blue-500' : 'bg-gray-300'} flex items-center px-1 transition-all duration-300`}\n              onClick={() => setMasterNotification(!masterNotification)}\n            >\n              <span className={`w-5 h-5 bg-white rounded-full block transition-transform duration-300 ${masterNotification ? 'translate-x-6' : 'translate-x-0'}`} />\n            </button>\n          </div>\n        </div>\n\n        {/* Notification Types */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Notification Types</div>\n          {notificationTypes.map((type) => (\n            <button\n              key={type.id}\n              className=\"flex flex-row items-center justify-between py-3 border-b border-gray-100 dark:border-gray-700 last:border-0 w-full\"\n              onClick={() => toggleNotificationType(type.id)}\n              disabled={!masterNotification}\n            >\n              <span className={`text-base ${masterNotification ? 'text-gray-900' : 'text-gray-400'}`}>{type.name}</span>\n              <span className=\"flex flex-row items-center\">\n                <span className={`w-10 h-5 rounded-full ${type.enabled && masterNotification ? 'bg-blue-500' : 'bg-gray-300'} flex items-center px-1 transition-all duration-300 opacity-50`}>\n                  <span className={`w-4 h-4 bg-white rounded-full block transition-transform duration-300 ${type.enabled && masterNotification ? 'translate-x-5' : 'translate-x-0'}`} />\n                </span>\n                <ChevronRight size={20} className=\"text-gray-400 ml-2\" />\n              </span>\n            </button>\n          ))}\n          <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg flex flex-row items-start\">\n            <Info size={16} className=\"text-blue-500 mt-0.5 mr-2\" />\n            <span className=\"text-xs text-blue-700 dark:text-blue-200\">\n              Notification types are currently disabled. Enable the master notification toggle to customize individual notifications.\n            </span>\n          </div>\n        </div>\n\n        {/* Browser Permissions */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Browser Permissions</div>\n          <button\n            className=\"flex flex-row items-center justify-between py-3 w-full\"\n            onClick={requestBrowserPermissions}\n          >\n            <div>\n              <div className=\"text-base text-gray-900 dark:text-gray-100\">Browser Notifications</div>\n              <div className=\"text-gray-500 dark:text-gray-400 text-sm mt-1\">\n                {browserPermissions\n                  ? 'Enabled - You will receive browser notifications'\n                  : 'Disabled - Enable to receive browser notifications'}\n              </div>\n            </div>\n            <span className=\"flex flex-row items-center\">\n              <span className={`w-10 h-5 rounded-full ${browserPermissions ? 'bg-blue-500' : 'bg-gray-300'} flex items-center px-1 transition-all duration-300`}>\n                <span className={`w-4 h-4 bg-white rounded-full block transition-transform duration-300 ${browserPermissions ? 'translate-x-5' : 'translate-x-0'}`} />\n              </span>\n              <ChevronRight size={20} className=\"text-gray-400 ml-2\" />\n            </span>\n          </button>\n          <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n            <span className=\"flex flex-row items-start\">\n              <Shield size={16} className=\"text-gray-400 mt-0.5 mr-2\" />\n              <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                Browser permissions allow the app to send notifications even when the browser is closed. \n                You can manage these permissions in your browser settings.\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":6270},"client/src/pages/onboarding.tsx":{"content":"import React, { useState } from 'react';\n\nconst onboardingData = [\n  {\n    id: 1,\n    title: \"Smart AI Chat\",\n    description:\n      \"Experience next-generation conversations with our intelligent AI assistant that understands context and provides meaningful responses.\",\n    image:\n      \"https://images.unsplash.com/photo-1694903110330-cc64b7e1d21d?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8YXJ0aWZpY2lhbCUyMGludGVsbGlnZW5jZXxlbnwwfHwwfHx8MA%3D%3D\",\n  },\n  {\n    id: 2,\n    title: \"Wallet & MoMo Transfers\",\n    description:\n      \"Securely send and receive money with our integrated wallet system. Pay bills, transfer funds, and manage your finances seamlessly.\",\n    image:\n      \"https://images.unsplash.com/photo-1640161704729-cbe966a08476?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Yml0Y29pbnxlbnwwfHwwfHx8MA%3D%3D\",\n  },\n  {\n    id: 3,\n    title: \"Affordable Stua\",\n    description:\n      \"Get exclusive data bundles and services designed specifically for students at prices that won't break the bank.\",\n    image:\n      \"https://images.unsplash.com/photo-1515073838964-4d4d56a58b21?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8U3R1ZGVudCUyMGxlYXJuZXIlMjBwdXBpbCUyMGVkdWNhdGlvbnxlbnwwfHwwfHx8MA%3D%3D\",\n  },\n  {\n    id: 4,\n    title: \"Personalized Experience\",\n    description:\n      \"Enjoy a tailored experience with smart recommendations based on your preferences and usage patterns.\",\n    image:\n      \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTh8fHRlY2hub2xvZ3l8ZW58MHx8MHx8fDA%3D\",\n  },\n];\n\nexport default function OnboardingPage() {\n  const [current, setCurrent] = useState(0);\n\n  const next = () => setCurrent((c) => Math.min(c + 1, onboardingData.length - 1));\n  const prev = () => setCurrent((c) => Math.max(c - 1, 0));\n\n  return (\n  <div className=\"min-h-screen bg-gradient-to-br from-[#4A90E2] to-[#6A5ACD] dark:from-gray-900 dark:to-gray-900 flex items-center justify-center\">\n  <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 max-w-md w-full flex flex-col items-center\">\n        <img\n          src={onboardingData[current].image}\n          alt={onboardingData[current].title}\n          className=\"w-40 h-40 object-cover rounded-xl mb-6\"\n        />\n  <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2 text-center\">\n          {onboardingData[current].title}\n        </h2>\n  <p className=\"text-gray-600 dark:text-gray-400 text-center mb-8\">\n          {onboardingData[current].description}\n        </p>\n        <div className=\"flex gap-2 mb-6\">\n          {onboardingData.map((_, idx) => (\n            <span\n              key={idx}\n              className={`w-3 h-3 rounded-full ${idx === current ? 'bg-blue-500 dark:bg-blue-400' : 'bg-gray-300 dark:bg-gray-700'}`}\n            />\n          ))}\n        </div>\n        <div className=\"flex w-full justify-between\">\n          <button\n            className=\"px-6 py-2 rounded-xl bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-100 font-semibold\"\n            onClick={prev}\n            disabled={current === 0}\n          >\n            Previous\n          </button>\n          <button\n            className=\"px-6 py-2 rounded-xl bg-blue-600 dark:bg-blue-700 text-white font-semibold\"\n            onClick={next}\n            disabled={current === onboardingData.length - 1}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":3686},"client/src/pages/payment-confirmed.tsx":{"content":"import React from 'react';\nimport { CheckCircle, Home, Receipt } from 'lucide-react';\n\nexport default function PaymentConfirmedPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col items-center justify-center px-6 py-12\">\n      {/* Confirmation Card */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-8 flex flex-col items-center shadow-lg w-full max-w-md\">\n        {/* Success Icon */}\n        <div className=\"w-24 h-24 rounded-full bg-green-100 flex items-center justify-center mb-6\">\n          <CheckCircle color=\"#2ECC71\" size={48} />\n        </div>\n        {/* Success Title */}\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">Payment Successful!</h2>\n        <p className=\"text-gray-600 text-center mb-8\">\n          Your transaction has been processed successfully\n        </p>\n        {/* Order Details */}\n        <div className=\"w-full bg-gray-50 rounded-xl p-4 mb-6\">\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Order ID</span>\n            <span className=\"text-gray-900 font-semibold\">#ORD-789456</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Item</span>\n            <span className=\"text-gray-900\">Data Bundle - 5GB</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Amount</span>\n            <span className=\"text-gray-900 font-bold\">$19.08</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Date</span>\n            <span className=\"text-gray-900\">May 15, 2023</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Payment Method</span>\n            <span className=\"text-gray-900\">Wallet Balance</span>\n          </div>\n        </div>\n        {/* Action Buttons */}\n        <div className=\"flex w-full gap-3\">\n          <button className=\"flex-1 flex flex-row items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-xl p-4\" type=\"button\">\n            <Receipt color=\"#4A90E2\" size={20} />\n            <span className=\"text-blue-600 dark:text-blue-300 font-bold ml-2\">View Receipt</span>\n          </button>\n          <button className=\"flex-1 flex flex-row items-center justify-center bg-blue-600 rounded-xl p-4\" type=\"button\">\n            <Home color=\"white\" size={20} />\n            <span className=\"text-white font-bold ml-2\">Home</span>\n          </button>\n        </div>\n      </div>\n      {/* Additional Info */}\n      <div className=\"mt-8 bg-white rounded-2xl p-6 shadow w-full max-w-md\">\n        <h3 className=\"text-gray-900 dark:text-gray-100 font-bold mb-3\">What's Next?</h3>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-2\">â€¢ Your data bundle will be activated within 24 hours</p>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-2\">â€¢ You'll receive a confirmation SMS shortly</p>\n        <p className=\"text-gray-600 dark:text-gray-400\">â€¢ Check your usage in the 'My Bundles' section</p>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":3389},"client/src/pages/plan-comparison.tsx":{"content":"import React, { useState } from 'react';\nimport { Check, X, ChevronLeft, Crown } from 'lucide-react';\n\nconst plans = [\n  {\n    id: 'free',\n    name: 'Free Plan',\n    price: (cycle: string) => (cycle === 'monthly' ? 'â‚µ0' : 'â‚µ0'),\n    period: (cycle: string) => (cycle === 'monthly' ? '/month' : '/year'),\n    color: 'gray',\n    gradient: ['#9CA3AF', '#6B7280'],\n  },\n  {\n    id: 'plus',\n    name: 'Plus Plan',\n    price: (cycle: string) => (cycle === 'monthly' ? 'â‚µ20' : 'â‚µ204'),\n    period: (cycle: string) => (cycle === 'monthly' ? '/month' : '/year'),\n    color: 'blue',\n    gradient: ['#3B82F6', '#60A5FA'],\n  },\n  {\n    id: 'pro',\n    name: 'Pro Plan',\n    price: (cycle: string) => (cycle === 'monthly' ? 'â‚µ50' : 'â‚µ510'),\n    period: (cycle: string) => (cycle === 'monthly' ? '/month' : '/year'),\n    color: 'purple',\n    gradient: ['#8B5CF6', '#A78BFA'],\n  },\n  {\n    id: 'business',\n    name: 'Business Plan',\n    price: (cycle: string) => (cycle === 'monthly' ? 'â‚µ100' : 'â‚µ1020'),\n    period: (cycle: string) => (cycle === 'monthly' ? '/month' : '/year'),\n    color: 'gold',\n    gradient: ['#F59E0B', '#FBBF24'],\n  },\n];\n\ntype FeatureCategory = {\n  category: string;\n  features: Array<{\n    name: string;\n    limits: Array<string | boolean>;\n  }>;\n};\n\nconst featureCategories: FeatureCategory[] = [\n  // ...existing featureCategories from your code...\n];\n\nexport default function PlanComparisonPage() {\n  const [selectedPlan, setSelectedPlan] = useState('plus');\n  const [billingCycle, setBillingCycle] = useState('monthly');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-white pt-12 pb-4 px-4\">\n        <div className=\"flex items-center mb-4\">\n          <button className=\"mr-4\" type=\"button\">\n            <ChevronLeft size={24} color=\"#1F2937\" />\n          </button>\n          <span className=\"text-xl font-bold text-gray-900\">Plan Comparison</span>\n        </div>\n        {/* Billing Cycle Toggle */}\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"flex bg-gray-100 rounded-full p-1\">\n            <button\n              className={`px-4 py-2 rounded-full ${billingCycle === 'monthly' ? 'bg-white shadow-sm' : ''}`}\n              type=\"button\"\n              onClick={() => setBillingCycle('monthly')}\n            >\n              <span className={`font-medium ${billingCycle === 'monthly' ? 'text-gray-900' : 'text-gray-500'}`}>Monthly</span>\n            </button>\n            <button\n              className={`px-4 py-2 rounded-full ${billingCycle === 'yearly' ? 'bg-white shadow-sm' : ''}`}\n              type=\"button\"\n              onClick={() => setBillingCycle('yearly')}\n            >\n              <span className={`font-medium ${billingCycle === 'yearly' ? 'text-gray-900' : 'text-gray-500'}`}>Yearly</span>\n            </button>\n          </div>\n        </div>\n        {/* Save Banner */}\n        {billingCycle === 'yearly' && (\n          <div className=\"bg-green-50 rounded-lg p-3 flex items-center justify-center\">\n            <span className=\"text-green-700 font-medium\">Save 15% with annual billing</span>\n          </div>\n        )}\n      </div>\n      {/* Plan Headers */}\n      <div className=\"bg-white border-b border-gray-200 overflow-x-auto\">\n        <div className=\"flex px-4 py-4\">\n          <div className=\"w-40\" />\n          {plans.map((plan) => (\n            <div key={plan.id} className=\"w-60 mx-2\">\n              <div\n                className=\"rounded-2xl p-4\"\n                style={{ background: `linear-gradient(90deg, ${plan.gradient[0]}, ${plan.gradient[1]})` }}\n              >\n                <div className=\"flex flex-col items-center\">\n                  <span className=\"text-white text-lg font-bold\">{plan.name}</span>\n                  <div className=\"flex items-baseline mt-1\">\n                    <span className=\"text-white text-2xl font-bold\">{plan.price(billingCycle)}</span>\n                    <span className=\"text-white text-sm ml-1\">{plan.period(billingCycle)}</span>\n                  </div>\n                  {selectedPlan === plan.id ? (\n                    <div className=\"mt-3 bg-white/20 rounded-full px-3 py-1 flex items-center\">\n                      <Crown size={14} color=\"white\" />\n                      <span className=\"text-white text-sm font-medium ml-1\">Current Plan</span>\n                    </div>\n                  ) : (\n                    <button\n                      className=\"mt-3 bg-white rounded-full px-4 py-2\"\n                      type=\"button\"\n                      onClick={() => setSelectedPlan(plan.id)}\n                    >\n                      <span className={`text-${plan.color}-600 font-medium`}>\n                        {selectedPlan === plan.id ? 'Selected' : 'Select Plan'}\n                      </span>\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Features Comparison */}\n      <div className=\"flex-1 px-4 overflow-y-auto\">\n        {featureCategories.map((category, categoryIndex) => (\n          <div key={categoryIndex} className=\"mb-6\">\n            <span className=\"text-lg font-bold text-gray-900 mb-3 block\">{category.category}</span>\n            {category.features.map((feature, featureIndex) => (\n              <div\n                key={featureIndex}\n                className={`flex items-center py-3 ${featureIndex !== category.features.length - 1 ? 'border-b border-gray-100' : ''}`}\n              >\n                <div className=\"w-40\">\n                  <span className=\"text-gray-700 font-medium\">{feature.name}</span>\n                </div>\n                {feature.limits.map((limit, planIndex) => (\n                  <div key={planIndex} className=\"w-60 mx-2 flex items-center justify-center\">\n                    {typeof limit === 'boolean' ? (\n                      limit ? (\n                        <span className=\"bg-green-100 rounded-full p-2\">\n                          <Check size={16} color=\"#059669\" />\n                        </span>\n                      ) : (\n                        <span className=\"bg-gray-100 rounded-full p-2\">\n                          <X size={16} color=\"#6B7280\" />\n                        </span>\n                      )\n                    ) : (\n                      <span className=\"text-gray-700 text-center\">{limit}</span>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        ))}\n        {/* CTA Section */}\n        <div className=\"py-8\">\n          <span className=\"block text-center text-gray-500 mb-4\">Questions about our plans?</span>\n          <button className=\"bg-white rounded-full py-3 px-6 border border-gray-300 mx-auto block\" type=\"button\">\n            <span className=\"text-blue-600 font-medium\">Contact Sales</span>\n          </button>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":7071},"client/src/pages/privacy-security.tsx":{"content":"import React, { useState } from 'react';\nimport TopBar from '@/components/TopBar';\nimport { Shield, Lock, Download, Trash2, AlertTriangle, ChevronRight } from 'lucide-react';\n\nexport default function PrivacySecuritySettingsPage({ onBack }: { onBack?: () => void }) {\n  const [dataCollection, setDataCollection] = useState(true);\n\n  const handleExportData = () => {\n    alert('Your data will be prepared for export. This may take a few minutes. You will receive a download link via email.');\n  };\n\n  const handleDeleteAccount = () => {\n    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone. All your data will be permanently removed.')) {\n      alert('Your account deletion request has been submitted. You will receive an email with further instructions.');\n    }\n  };\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 overflow-auto pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      <TopBar title=\"Privacy & Security\" onBack={onBack} />\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* Data Collection Consent */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"flex flex-row items-center\">\n              <Shield size={24} className=\"text-blue-500 mr-3\" />\n              <div>\n                <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Data Collection</div>\n                <div className=\"text-gray-500 dark:text-gray-400 text-sm\">Control how we collect and use your data</div>\n              </div>\n            </div>\n            <button\n              className={`w-12 h-6 rounded-full ${dataCollection ? 'bg-blue-500' : 'bg-gray-300'} flex items-center px-1 transition-all duration-300`}\n              onClick={() => setDataCollection(!dataCollection)}\n            >\n              <span className={`w-5 h-5 bg-white rounded-full block transition-transform duration-300 ${dataCollection ? 'translate-x-6' : 'translate-x-0'}`} />\n            </button>\n          </div>\n          <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n            <span className=\"text-xs text-blue-700 dark:text-blue-200\">\n              {dataCollection\n                ? 'Data collection is enabled. We collect usage data to improve our services.'\n                : 'Data collection is disabled. We will only collect essential data required for app functionality.'}\n            </span>\n          </div>\n        </div>\n\n        {/* Data Management */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Data Management</div>\n          <button\n            className=\"flex flex-row items-center justify-between py-3 border-b border-gray-100 dark:border-gray-700 w-full\"\n            onClick={handleExportData}\n          >\n            <span className=\"flex flex-row items-center\">\n              <Download size={20} className=\"text-blue-500 mr-3\" />\n              <span className=\"text-base text-gray-900 dark:text-gray-100\">Export My Data</span>\n            </span>\n            <ChevronRight size={20} className=\"text-gray-400 dark:text-gray-500\" />\n          </button>\n          <button\n            className=\"flex flex-row items-center justify-between py-3 w-full\"\n            onClick={handleDeleteAccount}\n          >\n            <span className=\"flex flex-row items-center\">\n              <Trash2 size={20} className=\"text-red-500 mr-3\" />\n              <span className=\"text-base text-red-500\">Delete Account</span>\n            </span>\n            <ChevronRight size={20} className=\"text-gray-400\" />\n          </button>\n        </div>\n\n        {/* Security Details */}\n        <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 mb-4\">Security Details</div>\n          <div className=\"py-3 border-b border-gray-100\">\n            <div className=\"flex flex-row items-center\">\n              <Lock size={20} className=\"text-emerald-500 mr-3\" />\n              <span className=\"text-base text-gray-900\">End-to-End Encryption</span>\n            </div>\n            <span className=\"text-gray-500 text-sm mt-2 ml-8 block\">\n              All messages are secured with military-grade encryption\n            </span>\n          </div>\n          <div className=\"py-3 border-b border-gray-100\">\n            <div className=\"flex flex-row items-center\">\n              <Shield size={20} className=\"text-emerald-500 mr-3\" />\n              <span className=\"text-base text-gray-900\">Two-Factor Authentication</span>\n            </div>\n            <span className=\"text-gray-500 text-sm mt-2 ml-8 block\">\n              Add an extra layer of security to your account\n            </span>\n          </div>\n          <div className=\"py-3\">\n            <div className=\"flex flex-row items-center\">\n              <AlertTriangle size={20} className=\"text-yellow-500 mr-3\" />\n              <span className=\"text-base text-gray-900\">Security Alerts</span>\n            </div>\n            <span className=\"text-gray-500 text-sm mt-2 ml-8 block\">\n              Receive notifications about suspicious activities\n            </span>\n          </div>\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n            <span className=\"text-xs text-gray-600\">\n              Our security measures protect your data at all times. We regularly audit our systems\n              to ensure your information remains safe and secure.\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":5822},"client/src/pages/profile.tsx":{"content":"import React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from '../contexts/AuthContext';\nimport TopBar from '@/components/TopBar';\nimport { ChevronLeft, Mail } from 'lucide-react';\n\nconst avatarImages = [\n  'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=100&auto=format&fit=crop&q=60',\n  'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=100&auto=format&fit=crop&q=60',\n  'https://images.unsplash.com/photo-1605993439219-9d09d2020fa5?w=100&auto=format&fit=crop&q=60',\n  'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=100&auto=format&fit=crop&q=60',\n];\n\nexport default function ProfileSettingsPage({ onBack }: { onBack?: () => void }) {\n  const { profile, user } = useContext(AuthContext);\n  const [displayName, setDisplayName] = useState(profile?.display_name || '');\n  const [email, setEmail] = useState(profile?.email || user?.email || '');\n  const [avatarUrl, setAvatarUrl] = useState(profile?.avatar_url || avatarImages[0]);\n  const [bio, setBio] = useState(profile?.bio || '');\n  const [language, setLanguage] = useState(profile?.language || 'en');\n  const [theme, setTheme] = useState(profile?.theme || 'system');\n  const [currency, setCurrency] = useState(profile?.currency || 'GHS');\n  const [notificationsEnabled, setNotificationsEnabled] = useState(profile?.notifications_enabled ?? true);\n  const [dataCollectionConsent, setDataCollectionConsent] = useState(profile?.data_collection_consent ?? false);\n  const [subscriptionPlan, setSubscriptionPlan] = useState(profile?.subscription_plan || 'free');\n  const [subscriptionStatus, setSubscriptionStatus] = useState(profile?.subscription_status || 'active');\n  const [createdAt, setCreatedAt] = useState(profile?.created_at || '');\n\n  useEffect(() => {\n    setDisplayName(profile?.display_name || '');\n    setEmail(profile?.email || user?.email || '');\n    setAvatarUrl(profile?.avatar_url || avatarImages[0]);\n    setBio(profile?.bio || '');\n    setLanguage(profile?.language || 'en');\n    setTheme(profile?.theme || 'system');\n    setCurrency(profile?.currency || 'GHS');\n    setNotificationsEnabled(profile?.notifications_enabled ?? true);\n    setDataCollectionConsent(profile?.data_collection_consent ?? false);\n    setSubscriptionPlan(profile?.subscription_plan || 'free');\n    setSubscriptionStatus(profile?.subscription_status || 'active');\n    setCreatedAt(profile?.created_at || '');\n  }, [profile, user]);\n\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n      {/* Header */}\n      <TopBar title=\"Profile Settings\" onBack={onBack} />\n\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto overflow-auto\">\n        {/* Profile Picture Section */}\n        <div className=\"bg-white dark:bg-gray-900 rounded-xl p-4 mb-6 border border-gray-200 dark:border-gray-700\">\n          <div className=\"text-gray-800 font-semibold mb-4\">Profile Picture</div>\n          <div className=\"flex flex-col items-center\">\n            <div className=\"relative\">\n              <img\n                src={avatarUrl}\n                className=\"w-24 h-24 rounded-full object-cover\"\n                alt=\"Profile\"\n                onError={e => { e.currentTarget.src = avatarImages[0]; }}\n              />\n            </div>\n            <div className=\"flex flex-row mt-4 gap-3\">\n              {avatarImages.map((avatar, index) => (\n                <button key={index} className={`w-12 h-12 rounded-full overflow-hidden border-2 ${avatarUrl === avatar ? 'border-blue-500' : 'border-gray-300'}`} onClick={() => setAvatarUrl(avatar)}>\n                  <img src={avatar} className=\"w-full h-full object-cover\" alt=\"Avatar\" />\n                </button>\n              ))}\n            </div>\n            {/* No upload button, only avatar selection and placeholder */}\n          </div>\n        </div>\n\n                \n        <div className=\"bg-white dark:bg-gray-900 rounded-xl p-4 mb-6 border border-gray-200 dark:border-gray-700\">\n          <div className=\"text-gray-800 font-semibold mb-4\">Personal Information</div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Display Name</div>\n            <input\n              className=\"bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700 w-full\"\n              value={displayName}\n              onChange={e => setDisplayName(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Email Address</div>\n            <div className=\"flex flex-row items-center bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 border border-gray-200 dark:border-gray-700\">\n              <Mail size={20} className=\"text-gray-400 mr-2\" />\n              <input\n                className=\"flex-1 text-gray-800 dark:text-gray-100 bg-transparent outline-none\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                type=\"email\"\n                disabled\n              />\n            </div>\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Bio</div>\n            <textarea\n              className=\"bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700 w-full\"\n              value={bio}\n              onChange={e => setBio(e.target.value)}\n              rows={2}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Language</div>\n            <input\n              className=\"bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700 w-full\"\n              value={language}\n              onChange={e => setLanguage(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Theme</div>\n            <input\n              className=\"bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700 w-full\"\n              value={theme}\n              onChange={e => setTheme(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Currency</div>\n            <input\n              className=\"bg-gray-50 dark:bg-gray-900 rounded-lg px-4 py-3 text-gray-800 dark:text-gray-100 border border-gray-200 dark:border-gray-700 w-full\"\n              value={currency}\n              onChange={e => setCurrency(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Notifications Enabled</div>\n            <input\n              type=\"checkbox\"\n              checked={notificationsEnabled}\n              onChange={e => setNotificationsEnabled(e.target.checked)}\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"text-gray-500 text-sm mb-1\">Data Collection Consent</div>\n            <input\n              type=\"checkbox\"\n              checked={dataCollectionConsent}\n              onChange={e => setDataCollectionConsent(e.target.checked)}\n            />\n          </div>\n        </div>\n\n        {/* Account Information */}\n        <div className=\"bg-white dark:bg-gray-900 rounded-xl p-4 mb-6 border border-gray-200 dark:border-gray-700\">\n          <div className=\"text-gray-800 font-semibold mb-4\">Account Information</div>\n          <div className=\"mb-3\">\n            <div className=\"text-gray-500 text-sm\">Member Since</div>\n            <div className=\"text-gray-800 font-medium\">{createdAt ? new Date(createdAt).toLocaleDateString() : ''}</div>\n          </div>\n          <div className=\"mb-3\">\n            <div className=\"text-gray-500 text-sm\">Account Status</div>\n            <div className=\"text-green-600 font-medium\">{subscriptionStatus}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-sm\">Subscription Plan</div>\n            <div className=\"text-gray-800 font-medium\">{subscriptionPlan}</div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <button className=\"bg-blue-600 rounded-xl py-4 mb-4 w-full text-white font-semibold text-center\">Save Changes</button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8552},"client/src/pages/project-setup.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Layers, Code, Palette, ChevronRight } from 'lucide-react';\nimport TopBar from '@/components/TopBar';\n\nexport default function ProjectSetupScreen() {\n  const [, setLocation] = useLocation();\n  const [projectName, setProjectName] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [selectedColorScheme, setSelectedColorScheme] = useState('');\n\n  const languages = [\n    { id: 'react', name: 'React Native' },\n    { id: 'flutter', name: 'Flutter' },\n    { id: 'swift', name: 'Swift' },\n    { id: 'kotlin', name: 'Kotlin' },\n    { id: 'javascript', name: 'JavaScript' },\n    { id: 'typescript', name: 'TypeScript' },\n  ];\n\n  const colorSchemes = [\n    { id: 'blue', name: 'Ocean Blue', colors: ['#3B82F6', '#60A5FA', '#93C5FD'] },\n    { id: 'green', name: 'Forest Green', colors: ['#10B981', '#34D399', '#6EE7B7'] },\n    { id: 'purple', name: 'Royal Purple', colors: ['#8B5CF6', '#A78BFA', '#C4B5FD'] },\n    { id: 'pink', name: 'Coral Pink', colors: ['#EC4899', '#F472B6', '#F9A8D4'] },\n    { id: 'indigo', name: 'Midnight Indigo', colors: ['#6366F1', '#818CF8', '#A5B4FC'] },\n    { id: 'amber', name: 'Sunset Amber', colors: ['#F59E0B', '#FBBF24', '#FCD34D'] },\n  ];\n\n  const handleProcess = () => {\n    // Save project setup data if needed\n    setLocation('/generation-ui');\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-50\">\n      <TopBar title=\"New Project\" />\n      <div className=\"max-w-xl mx-auto p-6 w-full\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">New Project</h1>\n          <p className=\"text-gray-600\">Set up your project preferences to get started</p>\n        </div>\n\n        {/* Project Name */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center mb-3\">\n            <Layers size={20} color=\"#3B82F6\" className=\"mr-2\" />\n            <span className=\"text-lg font-semibold text-gray-800\">Project Name</span>\n          </div>\n          <input\n            className=\"bg-white border border-gray-300 rounded-xl p-4 text-base w-full\"\n            placeholder=\"Enter your project name\"\n            value={projectName}\n            onChange={e => setProjectName(e.target.value)}\n          />\n        </div>\n\n        {/* Language Selection */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center mb-3\">\n            <Code size={20} color=\"#3B82F6\" className=\"mr-2\" />\n            <span className=\"text-lg font-semibold text-gray-800\">Language</span>\n          </div>\n          <div className=\"flex flex-wrap gap-3\">\n            {languages.map((language) => (\n              <button\n                key={language.id}\n                className={`px-4 py-3 rounded-xl border transition-colors ${\n                  selectedLanguage === language.id\n                    ? 'bg-blue-100 border-blue-500'\n                    : 'bg-white border-gray-300'\n                }`}\n                onClick={() => setSelectedLanguage(language.id)}\n              >\n                <span\n                  className={`font-medium ${\n                    selectedLanguage === language.id ? 'text-blue-700' : 'text-gray-700'\n                  }`}\n                >\n                  {language.name}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Color Scheme Selection */}\n        <div className=\"mb-10\">\n          <div className=\"flex items-center mb-3\">\n            <Palette size={20} color=\"#3B82F6\" className=\"mr-2\" />\n            <span className=\"text-lg font-semibold text-gray-800\">Color Scheme</span>\n          </div>\n          <div className=\"flex flex-wrap gap-4\">\n            {colorSchemes.map((scheme) => (\n              <button\n                key={scheme.id}\n                className={`w-28 h-28 rounded-xl border-2 transition-colors ${\n                  selectedColorScheme === scheme.id\n                    ? 'border-blue-500'\n                    : 'border-gray-300'\n                }`}\n                onClick={() => setSelectedColorScheme(scheme.id)}\n              >\n                <div className=\"flex rounded-t-xl overflow-hidden\">\n                  <div style={{ backgroundColor: scheme.colors[0] }} className=\"flex-1 h-8\" />\n                  <div style={{ backgroundColor: scheme.colors[1] }} className=\"flex-1 h-8\" />\n                </div>\n                <div style={{ backgroundColor: scheme.colors[2] }} className=\"h-6 rounded-b-xl\" />\n                <div className=\"absolute bottom-2 left-0 right-0\">\n                  <span className=\"text-center text-xs font-medium text-gray-800 bg-white/80 mx-2 py-1 rounded\">\n                    {scheme.name}\n                  </span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Process Button */}\n        <button\n          className={`py-4 rounded-xl flex items-center justify-center w-full transition-colors ${\n            projectName && selectedLanguage && selectedColorScheme\n              ? 'bg-blue-600 text-white'\n              : 'bg-gray-300 text-gray-400'\n          }`}\n          disabled={!projectName || !selectedLanguage || !selectedColorScheme}\n          onClick={handleProcess}\n        >\n          <span className=\"text-lg font-semibold mr-2\">Process</span>\n          <ChevronRight size={20} color=\"white\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5518},"client/src/pages/receipt.tsx":{"content":"import React from 'react';\nimport { ArrowLeft, Printer, Share2, Download, Home, Wallet, Users, Send } from 'lucide-react';\n\nconst receiptDetails = {\n  orderId: '#ORD-789456',\n  date: 'May 15, 2023',\n  time: '14:30 PM',\n  item: 'Data Bundle - 5GB',\n  validity: '15 days',\n  amount: '$19.08',\n  paymentMethod: 'Wallet Balance',\n  transactionId: 'TXN-987654123',\n  status: 'Completed',\n};\n\nexport default function ReceiptPage() {\n  const handlePrint = () => {\n    alert('Printing functionality would be implemented here');\n  };\n  const handleShare = () => {\n    alert('Sharing functionality would be implemented here');\n  };\n  const handleDownload = () => {\n    alert('Downloading functionality would be implemented here');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col dark:text-white\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6 px-6 bg-white\">\n        <div className=\"flex items-center mb-2\">\n          <button className=\"mr-3\" type=\"button\">\n            <ArrowLeft color=\"#2C3E50\" size={24} />\n          </button>\n          <span className=\"text-gray-900 dark:text-gray-100 text-2xl font-bold\">Payment Receipt</span>\n        </div>\n        <span className=\"text-gray-600 dark:text-gray-400\">Detailed transaction information</span>\n      </div>\n      <div className=\"flex-1 px-4 pt-4 overflow-y-auto\">\n  {/* Receipt Card */}\n  <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 shadow mb-6\">\n          {/* Status Badge */}\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"bg-green-100 dark:bg-green-900 px-4 py-2 rounded-full\">\n              <span className=\"text-green-700 dark:text-green-300 font-bold text-center\">Payment Successful</span>\n            </div>\n          </div>\n          {/* Receipt Header */}\n          <div className=\"flex flex-col items-center mb-6\">\n            <span className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">{receiptDetails.amount}</span>\n            <span className=\"text-gray-600 dark:text-gray-400 mt-1\">{receiptDetails.item}</span>\n          </div>\n          {/* Receipt Details */}\n          <div className=\"border-t border-b border-gray-200 py-4 my-4\">\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Order ID</span>\n              <span className=\"text-gray-900 dark:text-gray-100 font-semibold\">{receiptDetails.orderId}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Date & Time</span>\n              <span className=\"text-gray-900 dark:text-gray-100\">{receiptDetails.date} at {receiptDetails.time}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Item</span>\n              <span className=\"text-gray-900 dark:text-gray-100\">{receiptDetails.item}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Validity</span>\n              <span className=\"text-gray-900 dark:text-gray-100\">{receiptDetails.validity}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Amount</span>\n              <span className=\"text-gray-900 dark:text-gray-100 font-bold\">{receiptDetails.amount}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Payment Method</span>\n              <span className=\"text-gray-900 dark:text-gray-100\">{receiptDetails.paymentMethod}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Transaction ID</span>\n              <span className=\"text-gray-900 dark:text-gray-100\">{receiptDetails.transactionId}</span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Status</span>\n              <span className=\"text-green-600 dark:text-green-400 font-bold\">{receiptDetails.status}</span>\n            </div>\n          </div>\n          {/* Action Buttons */}\n          <div className=\"flex justify-around mt-4\">\n            <button className=\"flex flex-col items-center p-3\" type=\"button\" onClick={handlePrint}>\n              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2\">\n                <Printer color=\"#4A90E2\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Print</span>\n            </button>\n            <button className=\"flex flex-col items-center p-3\" type=\"button\" onClick={handleShare}>\n              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2\">\n                <Share2 color=\"#4A90E2\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Share</span>\n            </button>\n            <button className=\"flex flex-col items-center p-3\" type=\"button\" onClick={handleDownload}>\n              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mb-2\">\n                <Download color=\"#4A90E2\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-gray-300\">Download</span>\n            </button>\n          </div>\n        </div>\n        {/* Additional Info */}\n        <div className=\"mt-6 bg-white rounded-2xl p-6 shadow mb-6\">\n          <span className=\"text-gray-900 dark:text-gray-100 font-bold mb-3 block\">Transaction Details</span>\n          <span className=\"text-gray-600 dark:text-gray-400 mb-2 block\">â€¢ Your data bundle will be activated within 24 hours</span>\n          <span className=\"text-gray-600 dark:text-gray-400 mb-2 block\">â€¢ You'll receive a confirmation SMS shortly</span>\n          <span className=\"text-gray-600 dark:text-gray-400 block\">â€¢ Check your usage in the 'My Bundles' section</span>\n        </div>\n        {/* Navigation Options */}\n        <div className=\"mt-6 mb-8 bg-white rounded-2xl p-4 shadow\">\n          <span className=\"text-gray-900 dark:text-gray-100 text-lg font-bold mb-4 block text-center\">Quick Actions</span>\n          <div className=\"flex flex-wrap gap-4\">\n            <button className=\"flex-1 min-w-[40%] bg-blue-50 dark:bg-blue-900 rounded-xl p-4 flex flex-col items-center\" type=\"button\">\n              <div className=\"w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-700 flex items-center justify-center mb-2\">\n                <Home color=\"#4A90E2\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-blue-300 font-medium\">Home</span>\n            </button>\n            <button className=\"flex-1 min-w-[40%] bg-green-50 dark:bg-green-900 rounded-xl p-4 flex flex-col items-center\" type=\"button\">\n              <div className=\"w-12 h-12 rounded-full bg-green-100 dark:bg-green-700 flex items-center justify-center mb-2\">\n                <Wallet color=\"#2ECC71\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-green-300 font-medium\">Wallet</span>\n            </button>\n            <button className=\"flex-1 min-w-[40%] bg-purple-50 dark:bg-purple-900 rounded-xl p-4 flex flex-col items-center\" type=\"button\">\n              <div className=\"w-12 h-12 rounded-full bg-purple-100 dark:bg-purple-700 flex items-center justify-center mb-2\">\n                <Users color=\"#9B59B6\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-purple-300 font-medium\">Group Chat</span>\n            </button>\n            <button className=\"flex-1 min-w-[40%] bg-orange-50 dark:bg-orange-900 rounded-xl p-4 flex flex-col items-center\" type=\"button\">\n              <div className=\"w-12 h-12 rounded-full bg-orange-100 dark:bg-orange-700 flex items-center justify-center mb-2\">\n                <Send color=\"#F39C12\" size={24} />\n              </div>\n              <span className=\"text-gray-700 dark:text-orange-300 font-medium\">Send Money</span>\n            </button>\n          </div>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":8483},"client/src/pages/reciept.tsx":{"content":"import React from 'react';\n\nexport default function Receipt() {\n  return (\n  <div className=\"p-6 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 pb-[env(safe-area-inset-bottom)]\">Receipt page</div>\n  );\n}\n","size_bytes":218},"client/src/pages/send-receive.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { ArrowUpCircle, ArrowDownCircle, User, Search, QrCode, Send, Plus, Clock, CheckCircle } from 'lucide-react';\n\ntype Transaction = {\n  id: string;\n  name: string;\n  avatar: string;\n  amount: string;\n  date: string;\n  type: 'sent' | 'received';\n  status: 'completed' | 'pending';\n};\n\ntype Contact = {\n  id: string;\n  name: string;\n  avatar: string;\n  lastTransaction?: string;\n};\n\nconst recentTransactions: Transaction[] = [\n  {\n    id: '1',\n    name: 'Alex Johnson',\n    avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dXNlcnxlbnwwfHwwfHx8MA%3D%3D',\n    amount: '$120.00',\n    date: '2023-05-15',\n    type: 'received',\n    status: 'completed'\n  },\n  {\n    id: '2',\n    name: 'Michael Chen',\n    avatar: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTF8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    amount: '$45.50',\n    date: '2023-05-14',\n    type: 'sent',\n    status: 'completed'\n  },\n  {\n    id: '3',\n    name: 'Sarah Williams',\n    avatar: 'https://images.unsplash.com/photo-1605993439219-9d09d2020fa5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTN8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    amount: '$75.00',\n    date: '2023-05-12',\n    type: 'sent',\n    status: 'completed'\n  },\n  {\n    id: '4',\n    name: 'David Brown',\n    avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mjh8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    amount: '$200.00',\n    date: '2023-05-10',\n    type: 'received',\n    status: 'completed'\n  },\n];\n\nconst quickContacts: Contact[] = [\n  {\n    id: '1',\n    name: 'Alex Johnson',\n    avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dXNlcnxlbnwwfHwwfHx8MA%3D%3D',\n    lastTransaction: '$120.00'\n  },\n  {\n    id: '2',\n    name: 'Michael Chen',\n    avatar: 'https://images.unsplash.com/photo-1527980965255-d3b416303d12?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTF8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    lastTransaction: '$45.50'\n  },\n  {\n    id: '3',\n    name: 'Sarah Williams',\n    avatar: 'https://images.unsplash.com/photo-1605993439219-9d09d2020fa5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NTN8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    lastTransaction: '$75.00'\n  },\n  {\n    id: '4',\n    name: 'David Brown',\n    avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mjh8fHVzZXJ8ZW58MHx8MHx8fDA%3D',\n    lastTransaction: '$200.00'\n  },\n];\n\nexport default function SendReceivePage() {\n  const [activeTab, setActiveTab] = useState<'send' | 'receive'>('send');\n  const [amount, setAmount] = useState('');\n  const [recipient, setRecipient] = useState('');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 pb-[env(safe-area-inset-bottom)]\">\n      {/* Header */}\n      <div className=\"bg-white p-4 shadow-sm\">\n  <h2 className=\"text-2xl font-bold text-center text-gray-900 dark:text-gray-100\">Send &amp; Receive</h2>\n      </div>\n      {/* Tab Selector */}\n      <div className=\"flex bg-white mx-4 mt-4 rounded-xl p-1 shadow-sm\">\n        <button\n          className={`flex-1 py-3 rounded-lg items-center ${activeTab === 'send' ? 'bg-blue-500 dark:bg-blue-700' : 'bg-transparent'}`}\n          type=\"button\"\n          onClick={() => setActiveTab('send')}\n        >\n          <span className={`font-medium ${activeTab === 'send' ? 'text-white dark:text-gray-100' : 'text-gray-500 dark:text-gray-400'}`}>Send Money</span>\n        </button>\n        <button\n          className={`flex-1 py-3 rounded-lg items-center ${activeTab === 'receive' ? 'bg-blue-500 dark:bg-blue-700' : 'bg-transparent'}`}\n          type=\"button\"\n          onClick={() => setActiveTab('receive')}\n        >\n          <span className={`font-medium ${activeTab === 'receive' ? 'text-white dark:text-gray-100' : 'text-gray-500 dark:text-gray-400'}`}>Receive Money</span>\n        </button>\n      </div>\n      {/* Send/Receive Content */}\n      <div className=\"px-4 py-4\">\n        {activeTab === 'send' ? (\n          <>\n            {/* Amount Input */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm mb-6\">\n              <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-2 block\">Enter Amount</span>\n              <div className=\"flex items-end\">\n                <span className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">$</span>\n                <input\n                  className=\"flex-1 text-3xl font-bold text-gray-900 dark:text-gray-100 ml-2 outline-none bg-transparent\"\n                  value={amount}\n                  onChange={e => setAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                  type=\"number\"\n                />\n              </div>\n              <div className=\"flex justify-between mt-4 pt-4 border-t border-gray-100 dark:border-gray-700\">\n                {[10, 25, 50, 100].map(val => (\n                  <button key={val} className=\"bg-gray-100 dark:bg-gray-700 rounded-lg px-3 py-2\" type=\"button\" onClick={() => setAmount(val.toString())}>\n                    <span className=\"text-gray-700 dark:text-gray-300\">${val}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n            {/* Recipient Selection */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-4 shadow-sm mb-6\">\n              <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-3 block\">Send To</span>\n              <div className=\"flex items-center bg-gray-100 dark:bg-gray-700 rounded-xl px-4 py-3 mb-4\">\n                <Search color=\"#9CA3AF\" size={20} className=\"mr-2\" />\n                <input\n                  className=\"flex-1 text-gray-900 dark:text-gray-100 outline-none bg-transparent\"\n                  value={recipient}\n                  onChange={e => setRecipient(e.target.value)}\n                  placeholder=\"Search contacts or enter phone number\"\n                  type=\"text\"\n                />\n              </div>\n              <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-3 block\">Quick Send</span>\n              <div className=\"flex overflow-x-auto max-h-24\">\n                {quickContacts.map(item => (\n                  <div key={item.id} className=\"flex flex-col items-center mr-4\">\n                    <div className=\"relative\">\n                      <img src={item.avatar} alt={item.name} className=\"w-14 h-14 rounded-full object-cover\" />\n                      <span className=\"absolute -bottom-1 right-0 bg-blue-500 dark:bg-blue-700 rounded-full p-1\">\n                        <Plus color=\"white\" size={12} />\n                      </span>\n                    </div>\n                    <span className=\"mt-2 text-sm font-medium text-gray-700 dark:text-gray-300\">{item.name.split(' ')[0]}</span>\n                    {item.lastTransaction && (\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">{item.lastTransaction}</span>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n            {/* Send Button */}\n            <button className=\"bg-blue-500 dark:bg-blue-700 rounded-2xl py-4 w-full text-white font-bold text-lg shadow-md\" type=\"button\">\n              Send Money\n            </button>\n          </>\n        ) : (\n          <>\n            {/* Receive Content */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm mb-6 flex flex-col items-center\">\n              <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-4\">Your QR Code</span>\n              <div className=\"bg-gray-100 dark:bg-gray-700 rounded-2xl p-6 mb-6\">\n                <div className=\"bg-white dark:bg-gray-800 p-4 rounded-xl flex items-center justify-center\">\n                  <div className=\"bg-black w-48 h-48 rounded-lg\" />\n                </div>\n              </div>\n              <div className=\"w-full\">\n                <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-2 block\">Your Wallet Address</span>\n                <div className=\"flex items-center bg-gray-100 dark:bg-gray-700 rounded-xl px-4 py-3\">\n                  <span className=\"flex-1 text-gray-900 dark:text-gray-100 font-medium\">a1b2c3d4-e5f6-7890-ghij</span>\n                  <button type=\"button\">\n                    <Send color=\"#9CA3AF\" size={20} />\n                  </button>\n                </div>\n              </div>\n            </div>\n            {/* Request Button */}\n            <button className=\"bg-blue-500 dark:bg-blue-700 rounded-2xl py-4 w-full text-white font-bold text-lg shadow-md mb-6\" type=\"button\">\n              Request Money\n            </button>\n            {/* Share Options */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-4 shadow-sm\">\n              <span className=\"text-gray-500 dark:text-gray-400 text-sm mb-3 block\">Share Your Wallet Address</span>\n              <div className=\"flex justify-around\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"bg-blue-100 dark:bg-blue-700 rounded-full p-3\">\n                    <QrCode color=\"#3B82F6\" size={24} />\n                  </div>\n                  <span className=\"mt-2 text-gray-700 dark:text-blue-300\">QR Code</span>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"bg-green-100 dark:bg-green-700 rounded-full p-3\">\n                    <User color=\"#10B981\" size={24} />\n                  </div>\n                  <span className=\"mt-2 text-gray-700 dark:text-green-300\">Contacts</span>\n                </div>\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"bg-purple-100 dark:bg-purple-700 rounded-full p-3\">\n                    <Send color=\"#8B5CF6\" size={24} />\n                  </div>\n                  <span className=\"mt-2 text-gray-700 dark:text-purple-300\">Share</span>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n        {/* Recent Transactions */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-sm mt-6\">\n          <div className=\"flex justify-between items-center p-4 border-b border-gray-100 dark:border-gray-700\">\n            <span className=\"font-bold text-gray-900 dark:text-gray-100\">Recent Transactions</span>\n            <button type=\"button\" className=\"text-blue-500 dark:text-blue-300\">View All</button>\n          </div>\n          <div className=\"divide-y divide-gray-100 dark:divide-gray-700\">\n            {recentTransactions.map(item => (\n              <div key={item.id} className=\"flex items-center py-3 px-2\">\n                <img src={item.avatar} alt={item.name} className=\"w-12 h-12 rounded-full object-cover\" />\n                <div className=\"flex-1 ml-3\">\n                  <span className=\"font-medium text-gray-900 dark:text-gray-100 block\">{item.name}</span>\n                  <span className=\"text-gray-500 dark:text-gray-400 text-sm block\">{item.date}</span>\n                </div>\n                <div className=\"flex flex-col items-end\">\n                  <div className=\"flex items-center\">\n                    {item.type === 'sent' ? (\n                      <ArrowUpCircle color=\"#EF4444\" size={16} className=\"mr-1\" />\n                    ) : (\n                      <ArrowDownCircle color=\"#10B981\" size={16} className=\"mr-1\" />\n                    )}\n                    <span className={`font-medium ${item.type === 'sent' ? 'text-red-500 dark:text-red-400' : 'text-green-500 dark:text-green-300'}`}>{item.type === 'sent' ? '-' : '+'}{item.amount}</span>\n                  </div>\n                  <div className=\"flex items-center mt-1\">\n                    {item.status === 'completed' ? (\n                      <CheckCircle color=\"#10B981\" size={12} className=\"mr-1\" />\n                    ) : (\n                      <Clock color=\"#9CA3AF\" size={12} className=\"mr-1\" />\n                    )}\n                    <span className={`text-xs ${item.status === 'completed' ? 'text-green-500 dark:text-green-300' : 'text-gray-500 dark:text-gray-400'}`}>{item.status}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12705},"client/src/pages/settings.tsx":{"content":"import React from 'react';\nimport TopBar from '@/components/TopBar';\nimport { User, Palette, Globe, Bell, Shield, BarChart3, Info, CreditCard, Download, Headphones, ChevronRight } from 'lucide-react';\n\nconst settingCategories = [\n  { id: 'profile', title: 'Profile', icon: User, color: 'bg-blue-100', iconColor: '#2563EB' },\n  { id: 'appearance', title: 'Appearance', icon: Palette, color: 'bg-purple-100', iconColor: '#9333EA' },\n  { id: 'language', title: 'Language & Region', icon: Globe, color: 'bg-green-100', iconColor: '#16A34A' },\n  { id: 'notifications', title: 'Notifications', icon: Bell, color: 'bg-orange-100', iconColor: '#EA580C' },\n  { id: 'privacy', title: 'Privacy & Security', icon: Shield, color: 'bg-red-100', iconColor: '#DC2626' },\n  { id: 'analytics', title: 'Usage & Analytics', icon: BarChart3, color: 'bg-cyan-100', iconColor: '#0891B2' },\n  { id: 'about', title: 'About & Support', icon: Info, color: 'bg-gray-100', iconColor: '#6B7280' },\n];\n\nconst quickActions = [\n  { id: 'billing', title: 'Billing', icon: CreditCard, color: 'bg-indigo-100', iconColor: '#4F46E5' },\n  { id: 'export', title: 'Export Data', icon: Download, color: 'bg-emerald-100', iconColor: '#059669' },\n  { id: 'support', title: 'Support', icon: Headphones, color: 'bg-amber-100', iconColor: '#D97706' },\n];\n\nimport { useState } from 'react';\nimport AppearanceSettingsPage from './appearance';\nimport ProfileSettingsPage from './profile';\nimport LanguageSettingsPage from './language';\nimport NotificationSettingsPage from './notifications';\nimport PrivacySecuritySettingsPage from './privacy-security';\nimport AboutSupportSettingsPage from './about-support';\nimport UsageAnalyticsSettingsPage from './usage-analytics';\n\nexport default function SettingsPage() {\n  const [current, setCurrent] = useState<'main' | 'appearance' | 'profile' | 'language' | 'notifications' | 'privacy' | 'about' | 'usage'>('main');\n  const handleBack = () => setCurrent('main');\n  if (current === 'appearance') {\n    return <AppearanceSettingsPage onBack={handleBack} />;\n  }\n  if (current === 'profile') {\n    return <ProfileSettingsPage onBack={handleBack} />;\n  }\n  if (current === 'language') {\n    return <LanguageSettingsPage onBack={handleBack} />;\n  }\n  if (current === 'notifications') {\n    return <NotificationSettingsPage onBack={handleBack} />;\n  }\n  if (current === 'privacy') {\n    return <PrivacySecuritySettingsPage onBack={handleBack} />;\n  }\n  if (current === 'about') {\n    return <AboutSupportSettingsPage onBack={handleBack} />;\n  }\n  if (current === 'usage') {\n    return <UsageAnalyticsSettingsPage onBack={handleBack} />;\n  }\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 pt-[calc(3rem+env(safe-area-inset-top))] dark:text-white\">\n      <TopBar title=\"Settings\" onBack={() => window.history.back()} />\n\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* Quick Actions */}\n        <div className=\"mb-6\">\n          <div className=\"text-gray-500 text-sm font-semibold mb-3\">QUICK ACTIONS</div>\n          <div className=\"flex flex-row gap-3\">\n            {quickActions.map((action) => {\n              const IconComponent = action.icon;\n              return (\n                <button\n                  key={action.id}\n                  className=\"flex-1 bg-white rounded-xl p-4 flex flex-col items-center justify-center border border-gray-200\"\n                >\n                  <div className={`w-12 h-12 rounded-full ${action.color} flex items-center justify-center mb-2`}>\n                    <IconComponent size={24} stroke={action.iconColor} />\n                  </div>\n                  <div className=\"text-gray-800 font-medium\">{action.title}</div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Settings Categories */}\n        <div className=\"mb-4\">\n          <div className=\"text-gray-500 text-sm font-semibold mb-3\">SETTINGS</div>\n          <div className=\"flex flex-row flex-wrap gap-3\">\n            {settingCategories.map((category) => {\n              const IconComponent = category.icon;\n              return (\n                <button\n                  key={category.id}\n                  className=\"w-[48%] bg-white rounded-xl p-4 border border-gray-200 mb-2\"\n                  onClick={() => {\n                    if (category.id === 'appearance') setCurrent('appearance');\n                    if (category.id === 'profile') setCurrent('profile');\n                    if (category.id === 'language') setCurrent('language');\n                    if (category.id === 'notifications') setCurrent('notifications');\n                    if (category.id === 'privacy') setCurrent('privacy');\n                    if (category.id === 'about') setCurrent('about');\n                    if (category.id === 'analytics') setCurrent('usage');\n                  }}\n                >\n                  <div className=\"flex items-center\">\n                    <div className={`w-10 h-10 rounded-full ${category.color} flex items-center justify-center mr-3`}>\n                      <IconComponent size={20} stroke={category.iconColor} />\n                    </div>\n                    <div className=\"text-gray-800 font-medium flex-1\">{category.title}</div>\n                    <ChevronRight size={20} stroke=\"#9CA3AF\" />\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Plan Info */}\n        <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"text-gray-800 font-semibold\">Current Plan</div>\n              <div className=\"text-gray-500 text-sm\">Free Plan</div>\n            </div>\n            <button className=\"bg-blue-600 rounded-full px-4 py-2 text-white font-medium\">Upgrade</button>\n          </div>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":6073},"client/src/pages/signup.tsx":{"content":"\nimport React, { useState, useContext } from 'react';\nimport { useLocation } from 'wouter';\nimport { Eye, EyeOff, Mail, Lock, User, Facebook, Twitter, Github } from 'lucide-react';\nimport { AuthContext } from '../contexts/AuthContext';\n\nexport default function SignupPage() {\n\tconst [, setLocation] = useLocation();\n\tconst [name, setName] = useState('');\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [showPassword, setShowPassword] = useState(false);\n\tconst [nameError, setNameError] = useState('');\n\tconst [emailError, setEmailError] = useState('');\n\tconst [passwordError, setPasswordError] = useState('');\n\tconst [termsAccepted, setTermsAccepted] = useState(false);\n\tconst { signUp, authLoading } = useContext(AuthContext);\n\tconst [formError, setFormError] = useState('');\n\n\tconst validateForm = () => {\n\t\tlet isValid = true;\n\t\tsetNameError('');\n\t\tsetEmailError('');\n\t\tsetPasswordError('');\n\t\tif (!name) {\n\t\t\tsetNameError('Name is required');\n\t\t\tisValid = false;\n\t\t} else if (name.length < 2) {\n\t\t\tsetNameError('Name must be at least 2 characters');\n\t\t\tisValid = false;\n\t\t}\n\t\tif (!email) {\n\t\t\tsetEmailError('Email is required');\n\t\t\tisValid = false;\n\t\t} else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n\t\t\tsetEmailError('Please enter a valid email');\n\t\t\tisValid = false;\n\t\t}\n\t\tif (!password) {\n\t\t\tsetPasswordError('Password is required');\n\t\t\tisValid = false;\n\t\t} else if (password.length < 6) {\n\t\t\tsetPasswordError('Password must be at least 6 characters');\n\t\t\tisValid = false;\n\t\t}\n\t\tif (!termsAccepted) {\n\t\t\talert('Please accept the terms and conditions');\n\t\t\tisValid = false;\n\t\t}\n\t\treturn isValid;\n\t};\n\n\tconst handleSignup = async () => {\n\t\tif (validateForm()) {\n\t\t\tsetFormError('');\n\t\t\ttry {\n\t\t\t\tconst res = await signUp(name, email, password);\n\t\t\t\tif (res?.error) setFormError(res.error.message || 'Signup failed');\n\t\t\t\telse alert('Account created successfully! Please verify your email if required.');\n\t\t\t} catch (err: any) {\n\t\t\t\tsetFormError(err?.message ?? 'Signup failed');\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleSocialSignup = (provider: string) => {\n\t\talert(`Signup with ${provider} would be implemented here`);\n\t};\n\n\t\treturn (\n\t\t\t<div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100\">\n\t\t\t\t<div className=\"w-full max-w-md px-6 py-8\">\n\t\t\t\t{/* Header */}\n\t\t\t\t\t\t<div className=\"mb-8 text-center\">\n\t\t\t\t\t\t\t<h1 className=\"text-3xl font-bold text-gray-800 dark:text-gray-100 mb-2\">Create Account</h1>\n\t\t\t\t\t\t\t<p className=\"text-gray-600 dark:text-gray-400\">Join us today and start your journey</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t{/* Signup Form */}\n\t\t\t<div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg mb-6\">\n\t\t\t\t\t{/* Name Field */}\n\t\t\t\t\t<div className=\"mb-5\">\n\t\t\t\t\t\t  <div className=\"flex items-center border border-gray-300 dark:border-gray-700 rounded-xl px-4 py-3 bg-white dark:bg-gray-900\">\n\t\t\t\t\t\t\t<User size={20} color=\"#6B7280\" />\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 ml-3 text-gray-800 dark:text-gray-100 outline-none bg-transparent\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Full name\"\n\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\tonChange={e => setName(e.target.value)}\n\t\t\t\t\t\t\t\tautoCapitalize=\"words\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{nameError && (\n\t\t\t\t\t\t\t<div className=\"text-red-500 text-sm mt-1 ml-1\">{nameError}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Email Field */}\n\t\t\t\t\t<div className=\"mb-5\">\n\t\t\t\t\t\t  <div className=\"flex items-center border border-gray-300 dark:border-gray-700 rounded-xl px-4 py-3 bg-white dark:bg-gray-900\">\n\t\t\t\t\t\t\t<Mail size={20} color=\"#6B7280\" />\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 ml-3 text-gray-800 dark:text-gray-100 outline-none bg-transparent\"\n\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\tplaceholder=\"Email address\"\n\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\tonChange={e => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\tautoCapitalize=\"none\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{emailError && (\n\t\t\t\t\t\t\t<div className=\"text-red-500 text-sm mt-1 ml-1\">{emailError}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Password Field */}\n\t\t\t\t\t<div className=\"mb-4\">\n\t\t\t\t\t\t  <div className=\"flex items-center border border-gray-300 dark:border-gray-700 rounded-xl px-4 py-3 bg-white dark:bg-gray-900\">\n\t\t\t\t\t\t\t<Lock size={20} color=\"#6B7280\" />\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 ml-3 text-gray-800 dark:text-gray-100 outline-none bg-transparent\"\n\t\t\t\t\t\t\t\ttype={showPassword ? 'text' : 'password'}\n\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"ml-2\">\n\t\t\t\t\t\t\t\t{showPassword ? (\n\t\t\t\t\t\t\t\t\t<EyeOff size={20} color=\"#6B7280\" />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Eye size={20} color=\"#6B7280\" />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{passwordError && (\n\t\t\t\t\t\t\t<div className=\"text-red-500 text-sm mt-1 ml-1\">{passwordError}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Password Requirements */}\n\t\t\t\t\t\t\t\t<div className=\"mb-5\">\n\t\t\t\t\t\t\t\t\t<span className=\"text-gray-500 dark:text-gray-400 text-sm ml-1\">Password must be at least 6 characters</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Terms Agreement */}\n\t\t\t\t\t\t\t\t<div className=\"mb-6 flex items-start\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tclassName={`h-5 w-5 rounded border-2 mr-3 mt-1 ${termsAccepted ? 'bg-blue-600 dark:bg-blue-700 border-blue-600 dark:border-blue-700' : 'border-gray-300 dark:border-gray-700'}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => setTermsAccepted(!termsAccepted)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{termsAccepted && (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"block w-full h-full flex items-center justify-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"block h-1 w-3 bg-white absolute rotate-45\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"block h-1 w-3 bg-white absolute -rotate-45\" />\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<span className=\"flex-1 text-gray-700 dark:text-gray-300\">\n\t\t\t\t\t\t\t\t\t\tI agree to the <span className=\"text-blue-600 dark:text-blue-300 font-bold\">Terms of Service</span> and <span className=\"text-blue-600 dark:text-blue-300 font-bold\">Privacy Policy</span>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Signup Button */}\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"w-full bg-blue-600 dark:bg-blue-700 rounded-xl py-4 text-white font-bold text-lg mb-6\"\n\t\t\t\t\t\t\t\t\tonClick={handleSignup}\n\t\t\t\t\t\t\t\t\tdisabled={authLoading}\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tCreate Account\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t{formError && <div className=\"text-red-500 text-sm mt-1\">{formError}</div>}\n\t\t\t\t\t{/* Divider */}\n\t\t\t\t\t\t\t\t<div className=\"flex items-center mb-6\">\n\t\t\t\t\t\t\t\t\t<div className=\"flex-1 h-px bg-gray-300 dark:bg-gray-700\" />\n\t\t\t\t\t\t\t\t\t<span className=\"text-gray-500 dark:text-gray-400 mx-4\">OR</span>\n\t\t\t\t\t\t\t\t\t<div className=\"flex-1 h-px bg-gray-300 dark:bg-gray-700\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t{/* Social Signup Buttons */}\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between mb-8\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 mx-1 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-xl py-3 flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleSocialSignup('Facebook')}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Facebook size={24} color=\"#3B82F6\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 mx-1 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-xl py-3 flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleSocialSignup('Twitter')}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Twitter size={24} color=\"#3B82F6\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex-1 mx-1 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-xl py-3 flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleSocialSignup('GitHub')}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Github size={24} color=\"#374151\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* Login Link */}\n\t\t\t\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t\t\t\t<span className=\"text-gray-600 dark:text-gray-400\">Already have an account? </span>\n\t\t\t\t\t\t\t<button type=\"button\" className=\"text-blue-600 dark:text-blue-300 font-bold ml-1\" onClick={() => setLocation('/login')}>Sign In</button>\n\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{/* Safe area bottom padding */}\n\t\t\t<div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n\t\t</div>\n\t);\n}\n","size_bytes":8276},"client/src/pages/splash.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { useLocation } from 'wouter';\n\nexport default function SplashScreen() {\n  const [, setLocation] = useLocation();\n  const fadeRef = useRef<HTMLDivElement>(null);\n  const scaleRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Fade and scale animation\n    if (fadeRef.current && scaleRef.current) {\n      fadeRef.current.animate([\n        { opacity: 0 },\n        { opacity: 1 }\n      ], {\n        duration: 1000,\n        fill: 'forwards',\n        easing: 'ease-out'\n      });\n      scaleRef.current.animate([\n        { transform: 'scale(0.8)' },\n        { transform: 'scale(1)' }\n      ], {\n        duration: 1000,\n        fill: 'forwards',\n        easing: 'ease-out'\n      });\n    }\n    // Auto navigate to main app after 3 seconds\n    const timer = setTimeout(() => {\n      setLocation('/home');\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-[#F4F7FA] flex items-center justify-center\">\n      <div\n        className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-[#4A90E2] to-[#6A5ACD]\"\n        style={{ minHeight: '100vh' }}\n      >\n        <div ref={fadeRef} className=\"flex flex-col items-center justify-center\" style={{ transition: 'opacity 1s' }}>\n          <div ref={scaleRef} className=\"w-32 h-32 rounded-full bg-white flex items-center justify-center shadow-lg\" style={{ transition: 'transform 1s' }}>\n            <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-[#4A90E2] to-[#6A5ACD] flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-white font-aboutyou\">Z</span>\n            </div>\n          </div>\n          <div className=\"text-4xl font-bold text-white mt-6 tracking-wide font-aboutyou\">\n            <span className=\"text-white\">ZeN</span>\n            <span className=\"text-blue-200\">ux</span>\n          </div>\n        </div>\n      </div>\n      {/* Safe area bottom padding */}\n      <div className=\"pb-[env(safe-area-inset-bottom)]\"></div>\n    </div>\n  );\n}\n","size_bytes":2095},"client/src/pages/top-up.tsx":{"content":"import React from 'react';\n\nexport default function TopUp() {\n\t\treturn <div className=\"p-6 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 pb-[env(safe-area-inset-bottom)]\">Top up</div>;\n}\n","size_bytes":202},"client/src/pages/usage-analytics.tsx":{"content":"import React from 'react';\nimport TopBar from '@/components/TopBar';\nimport { ChevronRight, BarChart2, Zap, FileText, Mic, MessageCircle } from 'lucide-react';\n\nconst planLimits = {\n  name: 'Premium Plan',\n  messages: { used: 8500, limit: 10000 },\n  files: { used: 42, limit: 50 },\n  voice: { used: 120, limit: 200 },\n  tokens: { used: 180000, limit: 250000 },\n};\n\nconst calculatePercentage = (used: number, limit: number) => {\n  return Math.min(100, (used / limit) * 100);\n};\n\nconst getProgressColor = (percentage: number) => {\n  if (percentage < 70) return 'bg-green-500';\n  if (percentage < 90) return 'bg-yellow-500';\n  return 'bg-red-500';\n};\n\nexport default function UsageAnalyticsSettingsPage({ onBack }: { onBack?: () => void }) {\n  return (\n  <div className=\"flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900 overflow-auto pt-[calc(3rem+env(safe-area-inset-top))] pb-[env(safe-area-inset-bottom)] dark:text-white\">\n      <TopBar title=\"Usage & Analytics\" onBack={onBack} />\n      <div className=\"flex-1 px-4 py-4 max-w-2xl w-full mx-auto\">\n        {/* Plan Information */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <span className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Current Plan</span>\n            <span className=\"text-lg font-bold text-blue-600 dark:text-blue-300\">{planLimits.name}</span>\n          </div>\n          <button className=\"flex flex-row items-center justify-between bg-blue-50 dark:bg-blue-900 rounded-lg p-3 w-full\">\n            <span className=\"font-medium text-blue-700 dark:text-blue-300\">Upgrade Plan</span>\n            <ChevronRight size={20} className=\"text-blue-500 dark:text-blue-300\" />\n          </button>\n        </div>\n\n        {/* Usage Stats */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">Usage Statistics</div>\n          {/* Messages */}\n          <div className=\"mb-5\">\n            <div className=\"flex flex-row items-center justify-between mb-2\">\n              <span className=\"flex flex-row items-center\">\n                <MessageCircle size={20} className=\"text-blue-500 dark:text-blue-300 mr-2\" />\n                <span className=\"text-base text-gray-900 dark:text-gray-100\">Messages</span>\n              </span>\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                {planLimits.messages.used.toLocaleString()} / {planLimits.messages.limit.toLocaleString()}\n              </span>\n            </div>\n            <div className=\"h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n              <div\n                className={`h-full ${getProgressColor(calculatePercentage(planLimits.messages.used, planLimits.messages.limit))}`}\n                style={{ width: `${calculatePercentage(planLimits.messages.used, planLimits.messages.limit)}%` }}\n              />\n            </div>\n          </div>\n          {/* Files */}\n          <div className=\"mb-5\">\n            <div className=\"flex flex-row items-center justify-between mb-2\">\n              <span className=\"flex flex-row items-center\">\n                <FileText size={20} className=\"text-blue-500 mr-2\" />\n                <span className=\"text-base text-gray-900\">Files</span>\n              </span>\n              <span className=\"text-sm text-gray-500\">\n                {planLimits.files.used} / {planLimits.files.limit}\n              </span>\n            </div>\n            <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div\n                className={`h-full ${getProgressColor(calculatePercentage(planLimits.files.used, planLimits.files.limit))}`}\n                style={{ width: `${calculatePercentage(planLimits.files.used, planLimits.files.limit)}%` }}\n              />\n            </div>\n          </div>\n          {/* Voice */}\n          <div className=\"mb-5\">\n            <div className=\"flex flex-row items-center justify-between mb-2\">\n              <span className=\"flex flex-row items-center\">\n                <Mic size={20} className=\"text-blue-500 mr-2\" />\n                <span className=\"text-base text-gray-900\">Voice Minutes</span>\n              </span>\n              <span className=\"text-sm text-gray-500\">\n                {planLimits.voice.used} / {planLimits.voice.limit}\n              </span>\n            </div>\n            <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div\n                className={`h-full ${getProgressColor(calculatePercentage(planLimits.voice.used, planLimits.voice.limit))}`}\n                style={{ width: `${calculatePercentage(planLimits.voice.used, planLimits.voice.limit)}%` }}\n              />\n            </div>\n          </div>\n          {/* Tokens */}\n          <div>\n            <div className=\"flex flex-row items-center justify-between mb-2\">\n              <span className=\"flex flex-row items-center\">\n                <Zap size={20} className=\"text-blue-500 mr-2\" />\n                <span className=\"text-base text-gray-900\">AI Tokens</span>\n              </span>\n              <span className=\"text-sm text-gray-500\">\n                {planLimits.tokens.used.toLocaleString()} / {planLimits.tokens.limit.toLocaleString()}\n              </span>\n            </div>\n            <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n              <div\n                className={`h-full ${getProgressColor(calculatePercentage(planLimits.tokens.used, planLimits.tokens.limit))}`}\n                style={{ width: `${calculatePercentage(planLimits.tokens.used, planLimits.tokens.limit)}%` }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Analytics */}\n        <div className=\"bg-white rounded-xl p-4 mb-6 shadow-sm\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <span className=\"text-lg font-semibold text-gray-900\">Analytics</span>\n            <BarChart2 size={20} className=\"text-blue-500\" />\n          </div>\n          <div className=\"flex flex-row justify-between mb-3\">\n            <span className=\"text-gray-500\">Messages Sent</span>\n            <span className=\"font-medium\">12,450</span>\n          </div>\n          <div className=\"flex flex-row justify-between mb-3\">\n            <span className=\"text-gray-500\">Files Shared</span>\n            <span className=\"font-medium\">68</span>\n          </div>\n          <div className=\"flex flex-row justify-between mb-3\">\n            <span className=\"text-gray-500\">Voice Minutes</span>\n            <span className=\"font-medium\">185</span>\n          </div>\n          <div className=\"flex flex-row justify-between\">\n            <span className=\"text-gray-500\">AI Tokens Used</span>\n            <span className=\"font-medium\">215,750</span>\n          </div>\n        </div>\n\n        {/* Upgrade Suggestions */}\n        <div className=\"bg-white rounded-xl p-4 shadow-sm\">\n          <div className=\"text-lg font-semibold text-gray-900 mb-4\">Upgrade Suggestions</div>\n          <div className=\"p-3 bg-blue-50 rounded-lg mb-3\">\n            <span className=\"font-medium text-blue-800 mb-1 block\">Approaching Message Limit</span>\n            <span className=\"text-sm text-blue-700\">\n              You've used 85% of your monthly message allowance. Consider upgrading for unlimited messages.\n            </span>\n          </div>\n          <div className=\"p-3 bg-yellow-50 rounded-lg\">\n            <span className=\"font-medium text-yellow-800 mb-1 block\">Voice Minutes</span>\n            <span className=\"text-sm text-yellow-700\">\n              You have 80 minutes remaining. Upgrade for unlimited voice features.\n            </span>\n          </div>\n          <button className=\"mt-4 flex flex-row items-center justify-between bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-3 w-full\">\n            <span className=\"font-bold text-white\">Upgrade to Pro Plan</span>\n            <ChevronRight size={20} className=\"text-white\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8173},"client/src/pages/voice-recording.tsx":{"content":"import React from 'react';\n\nexport default function VoiceRecording() {\n\t\treturn <div className=\"p-6 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 pb-[env(safe-area-inset-bottom)]\">Voice Recording</div>;\n}\n","size_bytes":220},"client/src/types/index.ts":{"content":"export interface ChatMessage {\n  id: string;\n  chatId: string;\n  role: 'user' | 'assistant';\n  content: string;\n  messageType: 'text' | 'voice' | 'file' | 'image';\n  metadata?: {\n    fileName?: string;\n    fileSize?: number;\n    fileType?: string;\n    voiceDuration?: number;\n  };\n  encrypted: boolean;\n  aiValidated: boolean;\n  createdAt: string;\n}\n\nexport interface ChatSession {\n  id: string;\n  title: string;\n  lastMessageAt: string;\n  createdAt: string;\n}\n\nexport interface UserPlan {\n  type: 'free' | 'plus' | 'pro' | 'business';\n  messagesUsed: number;\n  messagesLimit: number;\n  filesUploaded: number;\n  filesLimit: number;\n  voiceMinutesUsed: number;\n  voiceMinutesLimit: number;\n  apiCallsUsed: number;\n  apiCallsLimit: number;\n  hasApiAccess: boolean;\n  hasVoiceChat: boolean;\n}\n\nexport interface WalletBalance {\n  id: string;\n  name: string;\n  balance: number;\n  currency: string;\n  members: WalletMember[];\n}\n\nexport interface WalletMember {\n  id: string;\n  userId: string;\n  username: string;\n  role: 'admin' | 'member';\n  contribution: number;\n  joinedAt: string;\n}\n\nexport interface TransactionRecord {\n  id: string;\n  fromUserId?: string;\n  toUserId?: string;\n  walletId?: string;\n  amount: number;\n  currency: string;\n  type: 'p2p' | 'wallet_contribution' | 'gift_credit';\n  status: 'pending' | 'confirmed' | 'failed' | 'queued';\n  paymentMethod?: string;\n  aiValidated: boolean;\n  offlineQueued: boolean;\n  createdAt: string;\n  confirmedAt?: string;\n}\n\nexport interface OfflineQueueItem {\n  id: string;\n  type: 'message' | 'transaction' | 'wallet_update';\n  data: any;\n  timestamp: string;\n  retryCount: number;\n}\n\nexport interface AppSettings {\n  theme: 'light' | 'dark' | 'system';\n  language: string;\n  currency: string;\n  notifications: {\n    enabled: boolean;\n    sounds: boolean;\n    messages: boolean;\n    transactions: boolean;\n  };\n  privacy: {\n    dataCollection: boolean;\n    encryptionEnabled: boolean;\n    postQuantumEnabled: boolean;\n  };\n}\n\nexport interface VoiceRecording {\n  id: string;\n  blob: Blob;\n  duration: number;\n  timestamp: string;\n}\n","size_bytes":2080},"client/src/components/chat/ChatInput.tsx":{"content":"import { useState, useRef, KeyboardEvent } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Paperclip, Mic, Send } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ChatInputProps {\n  onSendMessage: (content: string, type: 'text') => void;\n  onSendFile: (file: File) => void;\n  onStartVoiceRecording: () => void;\n  disabled?: boolean;\n  placeholder?: string;\n}\n\nexport function ChatInput({ \n  onSendMessage, \n  onSendFile, \n  onStartVoiceRecording,\n  disabled = false,\n  placeholder = \"Type your message...\" \n}: ChatInputProps) {\n  const [message, setMessage] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message, 'text');\n      setMessage('');\n      \n      // Reset textarea height\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto';\n      }\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      onSendFile(file);\n      e.target.value = ''; // Reset input\n    }\n  };\n\n  const adjustTextareaHeight = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const textarea = e.target;\n    textarea.style.height = 'auto';\n    textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;\n    setMessage(textarea.value);\n  };\n\n  const handleVoiceRecording = () => {\n    setIsRecording(!isRecording);\n    onStartVoiceRecording();\n  };\n\n  return (\n    <div className=\"border-t border-border p-4 bg-card safe-area-bottom\">\n      <div className=\"flex items-center gap-2\">\n        {/* Message Input Container */}\n        <div className=\"flex-1 relative\">\n          <Textarea\n            ref={textareaRef}\n            placeholder={placeholder}\n            value={message}\n            onChange={adjustTextareaHeight}\n            onKeyPress={handleKeyPress}\n            className={cn(\n              \"w-full pr-4 bg-muted border-border rounded-xl resize-none focus:ring-2 focus:ring-primary min-h-[48px] max-h-[120px] text-base\",\n              disabled && \"opacity-50 cursor-not-allowed\"\n            )}\n            rows={1}\n            disabled={disabled}\n            data-testid=\"input-message\"\n          />\n        </div>\n        \n        {/* Action Buttons Container - Properly aligned in center */}\n        <div className=\"flex items-center gap-2\">\n          {message.trim() ? (\n            // When text is present: Send button only\n            <Button\n              size=\"icon\"\n              className=\"h-10 w-10 rounded-full bg-primary hover:bg-primary/90 flex items-center justify-center\"\n              onClick={handleSend}\n              disabled={disabled}\n              data-testid=\"button-send\"\n            >\n              <Send size={18} className=\"text-primary-foreground\" />\n            </Button>\n          ) : (\n            // When no text: File attachment and voice recording buttons\n            <>\n              <Button\n                size=\"icon\" \n                variant=\"ghost\"\n                className=\"h-10 w-10 rounded-full hover:bg-accent flex items-center justify-center\"\n                onClick={() => fileInputRef.current?.click()}\n                disabled={disabled}\n                data-testid=\"button-attach-file\"\n              >\n                <Paperclip size={18} className=\"text-muted-foreground\" />\n              </Button>\n              <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={handleFileSelect}\n                accept=\"image/*,.pdf,.doc,.docx,.txt,.js,.py,.html,.css,.json\"\n                className=\"hidden\"\n                data-testid=\"input-file\"\n              />\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className={cn(\n                  \"h-10 w-10 rounded-full hover:bg-accent flex items-center justify-center\",\n                  isRecording && \"bg-destructive hover:bg-destructive/90\"\n                )}\n                onClick={handleVoiceRecording}\n                disabled={disabled}\n                data-testid=\"button-voice-record\"\n              >\n                <Mic \n                  size={18} \n                  className={cn(\n                    \"transition-colors\",\n                    isRecording ? \"text-destructive-foreground\" : \"text-muted-foreground\"\n                  )}\n                  fill={isRecording ? \"currentColor\" : \"none\"}\n                />\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4930},"client/src/components/chat/ChatSidebar.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Progress } from '@/components/ui/progress';\nimport { useApp } from '@/contexts/AppContext';\nimport { Plus, MessageCircle, X, Menu } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ChatSidebarProps {\n  onNewChat: () => void;\n  onChatSelect: (chatId: string) => void;\n  onBillingClick: () => void;\n}\n\nexport function ChatSidebar({ onNewChat, onChatSelect, onBillingClick }: ChatSidebarProps) {\n  const { chatSessions, currentChatId, user, sidebarOpen, setSidebarOpen } = useApp();\n\n  const handleChatClick = (chatId: string) => {\n    onChatSelect(chatId);\n  };\n\n  const usagePercentage = user ? (user.plan.messagesUsed / user.plan.messagesLimit) * 100 : 0;\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed inset-y-0 left-0 z-50 w-80 max-w-xs bg-card dark:bg-card border-r border-border dark:border-border transform transition-transform duration-300 ease-in-out lg:relative lg:translate-x-0\",\n        sidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border dark:border-border bg-background dark:bg-background\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-primary dark:bg-primary flex items-center justify-center\">\n                <MessageCircle className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <span className=\"text-lg font-semibold text-foreground dark:text-foreground\">Zenux AI</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden\"\n              onClick={() => setSidebarOpen(false)}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* New Chat Button */}\n          <div className=\"p-4\">\n            <Button \n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 dark:bg-primary dark:text-primary-foreground dark:hover:bg-primary/90 rounded-xl py-3 font-semibold\"\n              onClick={onNewChat}\n              data-testid=\"button-new-chat\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Chat\n            </Button>\n          </div>\n\n          {/* Chat History */}\n          <ScrollArea className=\"flex-1 px-4\">\n            <div className=\"space-y-2\">\n              <div className=\"text-muted-foreground dark:text-muted-foreground text-xs font-semibold px-2 py-2\">\n                RECENT CHATS\n              </div>\n              \n              {chatSessions.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <MessageCircle className=\"w-12 h-12 mx-auto text-muted-foreground mb-3\" />\n                  <p className=\"text-sm text-muted-foreground\">No chats yet</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Start a conversation!</p>\n                </div>\n              ) : (\n                chatSessions.map((chat) => (\n                  <div\n                    key={chat.id}\n                    className={cn(\n                      \"flex items-center p-2 rounded-lg hover:bg-accent dark:hover:bg-accent cursor-pointer transition-colors\",\n                      currentChatId === chat.id && \"bg-accent dark:bg-accent border border-primary/20 dark:border-primary/30\"\n                    )}\n                    onClick={() => handleChatClick(chat.id)}\n                    data-testid={`chat-item-${chat.id}`}\n                  >\n                    <div className=\"w-8 h-8 rounded-full bg-muted dark:bg-muted items-center justify-center mr-2 flex\">\n                      <span className=\"text-muted-foreground dark:text-muted-foreground font-medium text-sm\">C</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <span className=\"text-foreground dark:text-foreground text-sm font-medium truncate block\">\n                        {chat.title}\n                      </span>\n                      <span className=\"text-muted-foreground dark:text-muted-foreground text-xs\">\n                        {new Date(chat.lastMessageAt).toLocaleTimeString([], { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Plan Indicator */}\n          <div className=\"p-4 border-t border-border dark:border-border\">\n            <div\n              className=\"bg-muted dark:bg-muted rounded-lg p-3 cursor-pointer hover:bg-muted/80 dark:hover:bg-muted/80 transition-colors\"\n              onClick={onBillingClick}\n            >\n              <div className=\"text-foreground dark:text-foreground text-sm font-medium\">Plan: {user?.plan?.type || 'Free'}</div>\n              <div className=\"text-muted-foreground dark:text-muted-foreground text-xs mt-1\">Upgrade for more features</div>\n              {user && (\n                <div className=\"mt-2\">\n                  <Progress \n                    value={usagePercentage} \n                    className=\"h-2\" \n                  />\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    {user.plan.messagesUsed}/{user.plan.messagesLimit} messages used\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":6083},"client/src/components/chat/ChatView.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Button } from '@/components/ui/button';\nimport { MessageBubble } from './MessageBubble';\nimport { ChatInput } from './ChatInput';\nimport { VoiceRecordingModal } from './VoiceRecordingModal';\nimport { useApp } from '@/contexts/AppContext';\nimport { useAI } from '@/hooks/useAI';\nimport { useOfflineStorage } from '@/hooks/useOfflineStorage';\nimport { ChatMessage } from '@/types';\nimport { Wand2, MessageCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function ChatView() {\n  const { currentChatId, user, isOnline } = useApp();\n  const { sendMessage, processFile, transcribeAudio } = useAI();\n  const { getMessages, saveMessage, saveChat } = useOfflineStorage();\n  const { toast } = useToast();\n  \n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  // Load messages for current chat\n  useEffect(() => {\n    if (currentChatId) {\n      loadMessages();\n    } else {\n      setMessages([]);\n    }\n  }, [currentChatId]);\n\n  // Auto scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const loadMessages = async () => {\n    if (!currentChatId) return;\n    \n    setIsLoading(true);\n    try {\n      const chatMessages = await getMessages(currentChatId);\n      setMessages(chatMessages);\n    } catch (error) {\n      console.error('Failed to load messages:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load chat messages\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async (content: string, type: 'text') => {\n    if (!currentChatId || !user) return;\n\n    // Check usage limits\n    if (user.plan.messagesUsed >= user.plan.messagesLimit) {\n      toast({\n        title: \"Message limit reached\",\n        description: `You've used all ${user.plan.messagesLimit} messages for this month. Upgrade your plan to continue.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: crypto.randomUUID(),\n      chatId: currentChatId,\n      role: 'user',\n      content,\n      messageType: type,\n      encrypted: false,\n      aiValidated: false,\n      createdAt: new Date().toISOString(),\n    };\n\n    // Add message to UI immediately\n    setMessages(prev => [...prev, userMessage]);\n\n    // Save to offline storage\n    await saveMessage(userMessage);\n\n    // Send to AI if online\n    if (isOnline) {\n      try {\n        const response = await sendMessage.mutateAsync({\n          message: content,\n          chatId: currentChatId,\n        });\n\n        // Create AI response message\n        const aiMessage: ChatMessage = {\n          id: crypto.randomUUID(),\n          chatId: currentChatId,\n          role: 'assistant',\n          content: response.content,\n          messageType: 'text',\n          encrypted: false,\n          aiValidated: true,\n          createdAt: new Date().toISOString(),\n        };\n\n        setMessages(prev => [...prev, aiMessage]);\n        await saveMessage(aiMessage);\n\n        // Update chat timestamp\n        await saveChat({\n          id: currentChatId,\n          title: messages.length === 0 ? content.slice(0, 50) + '...' : `Chat ${currentChatId.slice(0, 8)}`,\n          lastMessageAt: new Date().toISOString(),\n          createdAt: new Date().toISOString(),\n        });\n\n      } catch (error) {\n        toast({\n          title: \"Failed to send message\",\n          description: \"Your message was saved offline and will be sent when connection is restored.\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      toast({\n        title: \"Offline Mode\",\n        description: \"Your message was saved and will be sent when you're back online.\",\n      });\n    }\n  };\n\n  const handleSendFile = async (file: File) => {\n    if (!currentChatId || !user) return;\n\n    // Check file upload limits\n    if (user.plan.filesUploaded >= user.plan.filesLimit) {\n      toast({\n        title: \"File upload limit reached\",\n        description: `You've used all ${user.plan.filesLimit} file uploads for this month.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isOnline) {\n      toast({\n        title: \"Offline Mode\",\n        description: \"File uploads require an internet connection.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create file message\n    const fileMessage: ChatMessage = {\n      id: crypto.randomUUID(),\n      chatId: currentChatId,\n      role: 'user',\n      content: `Uploaded file: ${file.name}`,\n      messageType: 'file',\n      metadata: {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n      },\n      encrypted: false,\n      aiValidated: false,\n      createdAt: new Date().toISOString(),\n    };\n\n    setMessages(prev => [...prev, fileMessage]);\n    await saveMessage(fileMessage);\n\n    try {\n      const response = await processFile.mutateAsync({ file });\n      \n      const aiMessage: ChatMessage = {\n        id: crypto.randomUUID(),\n        chatId: currentChatId,\n        role: 'assistant',\n        content: response.analysis || 'File processed successfully.',\n        messageType: 'text',\n        encrypted: false,\n        aiValidated: true,\n        createdAt: new Date().toISOString(),\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n      await saveMessage(aiMessage);\n\n    } catch (error) {\n      toast({\n        title: \"File processing failed\",\n        description: \"There was an error processing your file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleVoiceRecording = async (audioBlob: Blob, duration: number) => {\n    if (!currentChatId || !user) return;\n\n    // Check voice limits\n    if (user.plan.voiceMinutesUsed >= user.plan.voiceMinutesLimit) {\n      toast({\n        title: \"Voice limit reached\",\n        description: `You've used all ${user.plan.voiceMinutesLimit} voice minutes for this month.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create voice message\n    const voiceMessage: ChatMessage = {\n      id: crypto.randomUUID(),\n      chatId: currentChatId,\n      role: 'user',\n      content: 'Voice message',\n      messageType: 'voice',\n      metadata: { voiceDuration: Math.ceil(duration / 60) },\n      encrypted: false,\n      aiValidated: false,\n      createdAt: new Date().toISOString(),\n    };\n\n    setMessages(prev => [...prev, voiceMessage]);\n    await saveMessage(voiceMessage);\n\n    if (isOnline) {\n      try {\n        const response = await transcribeAudio.mutateAsync({ audioBlob });\n        \n        if (response.text) {\n          // Send transcribed text to AI\n          handleSendMessage(response.text, 'text');\n        }\n      } catch (error) {\n        toast({\n          title: \"Voice transcription failed\",\n          description: \"Could not process your voice message.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (!currentChatId) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-background dark:bg-background\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 mx-auto bg-primary dark:bg-primary rounded-2xl flex items-center justify-center animate-float\">\n            <Wand2 className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-foreground dark:text-foreground\">Welcome to Zenux AI</h2>\n            <p className=\"text-muted-foreground dark:text-muted-foreground text-sm mt-1\">\n              Your intelligent assistant for everything\n            </p>\n          </div>\n          <p className=\"text-sm text-muted-foreground dark:text-muted-foreground max-w-md mx-auto\">\n            Start a new conversation or select an existing chat from the sidebar to begin.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-background dark:bg-background\">\n      {/* Messages Area */}\n      <ScrollArea \n        ref={scrollAreaRef} \n        className=\"flex-1 px-4 pt-4\"\n        data-testid=\"messages-area\"\n      >\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        ) : messages.length === 0 ? (\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"w-16 h-16 mx-auto bg-primary rounded-2xl flex items-center justify-center animate-float\">\n                <MessageCircle className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Start the conversation</h3>\n                <p className=\"text-muted-foreground text-sm mt-1\">\n                  Ask me anything or upload a file to get started\n                </p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4 pb-4\">\n            {messages.map((message) => (\n              <MessageBubble\n                key={message.id}\n                message={message}\n                isUser={message.role === 'user'}\n              />\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n\n      {/* Chat Input */}\n      <ChatInput\n        onSendMessage={handleSendMessage}\n        onSendFile={handleSendFile}\n        onStartVoiceRecording={() => setIsVoiceModalOpen(true)}\n        disabled={sendMessage.isPending || processFile.isPending}\n      />\n\n      {/* Voice Recording Modal */}\n      <VoiceRecordingModal\n        open={isVoiceModalOpen}\n        onClose={() => setIsVoiceModalOpen(false)}\n        onSendRecording={handleVoiceRecording}\n      />\n    </div>\n  );\n}\n","size_bytes":10230},"client/src/components/chat/MessageBubble.tsx":{"content":"import { ChatMessage } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCheck, Play, FileText, Shield, Clock } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface MessageBubbleProps {\n  message: ChatMessage;\n  isUser: boolean;\n}\n\nexport function MessageBubble({ message, isUser }: MessageBubbleProps) {\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const renderMessageContent = () => {\n    switch (message.messageType) {\n      case 'voice':\n        return (\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              size=\"sm\" \n              className=\"w-10 h-10 rounded-full bg-primary hover:opacity-80\"\n              data-testid=\"button-play-voice\"\n            >\n              <Play className=\"w-4 h-4 fill-current\" />\n            </Button>\n            <div className=\"flex-1\">\n              <div className=\"flex space-x-1 items-center h-8\">\n                {Array.from({ length: 7 }).map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"w-1 bg-primary rounded-full voice-wave\"\n                    style={{\n                      height: `${20 + Math.random() * 20}px`,\n                      animationDelay: `${i * 0.1}s`,\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n            <span className=\"text-xs text-muted-foreground\">\n              {message.metadata?.voiceDuration || '0:00'}\n            </span>\n          </div>\n        );\n\n      case 'file':\n        return (\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <FileText className=\"w-5 h-5 text-primary\" />\n            <div>\n              <p className=\"font-medium\">\n                {message.metadata?.fileName || 'Uploaded file'}\n              </p>\n              <p className=\"text-xs opacity-80\">\n                {message.metadata?.fileSize \n                  ? `${(message.metadata.fileSize / 1024).toFixed(1)} KB â€¢ ${message.metadata.fileType}`\n                  : 'File attachment'\n                }\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'image':\n        return (\n          <div className=\"mb-2\">\n            <img\n              src={message.content}\n              alt=\"Generated image\"\n              className=\"rounded-lg max-w-full h-auto\"\n              loading=\"lazy\"\n            />\n          </div>\n        );\n\n      default:\n        return <p>{message.content}</p>;\n    }\n  };\n\n  if (isUser) {\n    return (\n      <div className=\"flex justify-end mb-4\" data-testid={`message-${message.id}`}>\n        <div className=\"bg-primary text-primary-foreground dark:bg-primary dark:text-primary-foreground p-4 rounded-2xl shadow-sm\">\n          {renderMessageContent()}\n          {message.messageType === 'file' && message.content && (\n            <p className=\"mt-2\">{message.content}</p>\n          )}\n          <div className=\"flex items-center justify-end mt-2 text-xs text-primary-foreground/80 space-x-2\">\n            <span data-testid=\"message-time\">{formatTime(message.createdAt)}</span>\n            <CheckCheck className=\"w-4 h-4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex mb-4\" data-testid={`message-${message.id}`}>\n      <div className=\"flex items-start space-x-3\">\n        <div className=\"w-8 h-8 rounded-full bg-primary dark:bg-primary flex items-center justify-center flex-shrink-0\">\n          <span className=\"text-primary-foreground font-bold text-sm\">Z</span>\n        </div>\n        \n        <div className=\"bg-card dark:bg-card border border-border dark:border-border p-4 rounded-2xl shadow-sm\">\n          {renderMessageContent()}\n          \n          {message.messageType === 'text' && message.content.includes('1.') && (\n            <div className=\"mt-3 space-y-2 text-sm\">\n              {message.content.split('\\n').filter(line => line.match(/^\\d+\\./)).map((item, index) => (\n                <div key={index} className=\"p-2 bg-muted rounded-lg\">\n                  <div className=\"font-medium\">{item.split(':')[0]}</div>\n                  {item.includes(':') && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {item.split(':').slice(1).join(':').trim()}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between mt-4\">\n            <div className=\"flex items-center space-x-2\">\n              {message.aiValidated && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Shield className=\"w-3 h-3 mr-1 text-primary\" />\n                  AI Validated\n                </Badge>\n              )}\n              {message.encrypted && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Shield className=\"w-3 h-3 mr-1 text-primary\" />\n                  Encrypted\n                </Badge>\n              )}\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"message-time\">\n              {formatTime(message.createdAt)}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5408},"client/src/components/chat/VoiceRecordingModal.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Mic, Square, X, Send } from 'lucide-react';\n\ninterface VoiceRecordingModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSendRecording: (blob: Blob, duration: number) => void;\n}\n\nexport function VoiceRecordingModal({ open, onClose, onSendRecording }: VoiceRecordingModalProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const chunksRef = useRef<Blob[]>([]);\n\n  useEffect(() => {\n    if (open) {\n      startRecording();\n    } else {\n      stopRecording();\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, [open]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, { type: 'audio/wav' });\n        setAudioBlob(blob);\n        \n        // Stop all tracks to release microphone\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      setDuration(0);\n\n      // Start duration timer\n      intervalRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      onClose();\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n    }\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    setIsRecording(false);\n  };\n\n  const handleSend = () => {\n    if (audioBlob) {\n      onSendRecording(audioBlob, duration);\n    }\n    onClose();\n  };\n\n  const handleCancel = () => {\n    stopRecording();\n    onClose();\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-auto p-8 text-center\" data-testid=\"voice-recording-modal\">\n        <div className=\"mb-6\">\n          <div className=\"w-20 h-20 mx-auto gradient-primary rounded-full flex items-center justify-center mb-4 animate-pulse-glow\">\n            <Mic className=\"w-8 h-8 text-white\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">\n            {isRecording ? 'Recording...' : 'Recording Complete'}\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {isRecording ? 'Speak clearly into your microphone' : 'Review your recording'}\n          </p>\n        </div>\n\n        {/* Voice Waveform Animation */}\n        {isRecording && (\n          <div className=\"flex justify-center items-center space-x-1 mb-6\">\n            {Array.from({ length: 7 }).map((_, i) => (\n              <div\n                key={i}\n                className=\"w-1 bg-primary rounded-full voice-wave\"\n                style={{\n                  height: `${20 + Math.random() * 20}px`,\n                  animationDelay: `${i * 0.1}s`,\n                }}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Duration Display */}\n        <div className=\"text-2xl font-mono mb-6\" data-testid=\"recording-duration\">\n          {formatDuration(duration)}\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex space-x-4\">\n          <Button\n            variant=\"outline\"\n            className=\"flex-1\"\n            onClick={handleCancel}\n            data-testid=\"button-cancel-recording\"\n          >\n            <X className=\"w-4 h-4 mr-2\" />\n            Cancel\n          </Button>\n          \n          {isRecording ? (\n            <Button\n              className=\"flex-1 gradient-primary\"\n              onClick={stopRecording}\n              data-testid=\"button-stop-recording\"\n            >\n              <Square className=\"w-4 h-4 mr-2\" />\n              Stop\n            </Button>\n          ) : (\n            <Button\n              className=\"flex-1 gradient-primary\"\n              onClick={handleSend}\n              disabled={!audioBlob}\n              data-testid=\"button-send-recording\"\n            >\n              <Send className=\"w-4 h-4 mr-2\" />\n              Send\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5300},"client/src/components/ui/ActionBar.tsx":{"content":"","size_bytes":0},"client/src/components/ui/TopBar.tsx":{"content":"","size_bytes":0},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glassmorphism.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface GlassmorphismProps {\n  children: React.ReactNode;\n  className?: string;\n  intensity?: 'light' | 'medium' | 'heavy';\n}\n\nexport function Glassmorphism({ children, className, intensity = 'medium' }: GlassmorphismProps) {\n  const intensityClasses = {\n    light: 'glass-effect opacity-60',\n    medium: 'glass-effect opacity-80',\n    heavy: 'glass-effect opacity-95 backdrop-blur-xl',\n  };\n\n  return (\n    <div className={cn(intensityClasses[intensity], className)}>\n      {children}\n    </div>\n  );\n}\n\nexport function GradientCard({ children, className }: { children: React.ReactNode; className?: string }) {\n  return (\n    <div className={cn(\"gradient-card rounded-2xl\", className)}>\n      {children}\n    </div>\n  );\n}\n\nexport function PrimaryGradient({ children, className }: { children: React.ReactNode; className?: string }) {\n  return (\n    <div className={cn(\"gradient-primary text-primary-foreground\", className)}>\n      {children}\n    </div>\n  );\n}\n","size_bytes":997},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Chat/index.tsx":{"content":"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Settings2, Paperclip, Send, Plus, Sparkles, Mic, Users, X, Wallet, Code, Trophy, Layers } from 'lucide-react';\n// Custom mobile sidebar icon SVG\nconst MobileMenuIcon = (props: React.SVGProps<SVGSVGElement>) => (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"size-6\" {...props}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12\" />\n        </svg>\n);\nimport { useLocation } from 'wouter';\nimport { AuthContext } from '../../contexts/AuthContext';\nimport { useApp } from '@/contexts/AppContext';\nimport { supabase } from '@/lib/supabase';\nimport { ChatSession, ChatMessage as ServerMessage } from '@/types';\n\nexport default function ChatPage() {\n        const [message, setMessage] = useState('');\n        const [isRecording, setIsRecording] = useState(false);\n        // UI message type (simplified)\n        type UIMessage = { id: string; text: string; isAI: boolean; createdAt?: string };\n        const [messages, setMessages] = useState<UIMessage[]>([]);\n        const [sending, setSending] = useState(false);\n        const textareaRef = useRef<HTMLTextAreaElement>(null);\n        const [sidebarOpen, setSidebarOpen] = useState(false);\n        const [isDesktop, setIsDesktop] = useState(() => typeof window !== 'undefined' ? window.innerWidth >= 768 : true);\n\n        // Auth context - show logout when user is signed in\n        const { user, signOut } = useContext(AuthContext);\n        const { currentChatId } = useApp();\n            // Mode switch state\n                    // ...existing code...\n\n        // recent chats will be loaded from the server (Supabase storage via /api/chats/:userId)\n        const { chatSessions, setChatSessions, setCurrentChatId } = useApp();\n\n        // Local loading state for chats/messages\n        const [, setLoadingChats] = useState(false);\n        const [_loadingMessages, setLoadingMessages] = useState(false);\n\n        // Load messages for a chat and map them to UIMessage\n        const loadMessagesForChat = async (chatId: string) => {\n                setLoadingMessages(true);\n                try {\n                        const res = await fetch(`/api/messages/${chatId}`);\n                        if (res.ok) {\n                                const json = await res.json();\n                                const serverMessages: ServerMessage[] = json.messages || [];\n                                const uiMessages: UIMessage[] = serverMessages\n                                        .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n                                        .map((m) => ({ id: m.id, text: m.content, isAI: m.role === 'assistant', createdAt: m.createdAt }));\n                                setMessages(uiMessages);\n                        } else {\n                                console.warn('Failed to load messages for chat', chatId);\n                        }\n                } catch (err) {\n                        console.error('Error loading messages:', err);\n                }\n                setLoadingMessages(false);\n        };\n\n        // load recent chats for the signed-in user\n        useEffect(() => {\n                const loadChats = async () => {\n                        if (!user) return;\n                        setLoadingChats(true);\n                        try {\n                                const res = await fetch(`/api/chats/${user.id}`);\n                                if (res.ok) {\n                                        const json = await res.json();\n                                        setChatSessions(json.chats || []);\n                                }\n                        } catch (err) {\n                                console.error('Failed to load chats:', err);\n                        }\n                        setLoadingChats(false);\n                };\n                loadChats();\n        }, [user, setChatSessions]);\n\n        // When currentChatId changes, load its messages\n        useEffect(() => {\n                if (currentChatId) {\n                        void loadMessagesForChat(currentChatId);\n                } else {\n                        setMessages([]);\n                }\n        }, [currentChatId]);\n\n        useEffect(() => {\n                if (textareaRef.current) {\n                        textareaRef.current.style.height = 'auto';\n                        const scrollHeight = textareaRef.current.scrollHeight;\n                        const lineHeight = 24; // px, adjust if needed\n                        const maxHeight = lineHeight * 10;\n                        textareaRef.current.style.height = Math.min(scrollHeight, maxHeight) + 'px';\n                        textareaRef.current.style.overflowY = scrollHeight > maxHeight ? 'auto' : 'hidden';\n                }\n        }, [message]);\n\n        const sendMessage = async () => {\n                if (!message.trim()) return;\n                if (!user) {\n                        // require sign in to persist chats\n                        navigateTo('/login');\n                        return;\n                }\n                const userMessage = { id: String(Date.now()), text: message.trim(), isAI: false };\n                setMessages((m) => [...m, userMessage]);\n                setMessage('');\n                setSending(true);\n\n        // Use the app's current chat/session id when available so conversation threading works\n        // If there is no current chat we must create one on the server and use the first user message as the title\n        let conversationId = currentChatId;\n        try {\n                if (!conversationId) {\n                        // create chat on server with title = first user message\n                        setLoadingChats(true);\n                        const { data: sessionData } = await supabase.auth.getSession();\n                        const token = sessionData?.session?.access_token;\n                        const headers: Record<string, string> = { 'Content-Type': 'application/json' };\n                        if (token) headers['Authorization'] = `Bearer ${token}`;\n\n                        const createRes = await fetch('/api/chats', {\n                                method: 'POST',\n                                headers,\n                                body: JSON.stringify({ userId: user.id, title: userMessage.text }),\n                        });\n                                if (createRes.ok) {\n                                        const json = await createRes.json();\n                                        const chat = json.chat as ChatSession;\n                                        if (chat && chat.id) {\n                                                conversationId = chat.id;\n                                                setCurrentChatId(chat.id);\n                                                // update local sessions list\n                                                setChatSessions([chat, ...(chatSessions || [])]);\n                                        }\n                                } else {\n                                console.warn('Failed to create chat on server', createRes.statusText);\n                        }\n                        setLoadingChats(false);\n                        // persist user's message to server messages store\n                        try {\n                                if (conversationId) {\n                                        await fetch('/api/messages', {\n                                                method: 'POST',\n                                                headers: { 'Content-Type': 'application/json' },\n                                                body: JSON.stringify({ chatId: conversationId, role: 'user', content: userMessage.text }),\n                                        });\n                                }\n                        } catch (_err) { void _err; }\n                }\n        } catch (err) {\n                console.error('Error creating chat:', err);\n        }\n\n                const payload = {\n                        message: userMessage.text,\n                        conversation_id: conversationId,\n                        user_id: user?.id || 'anonymous',\n                        enhanced: true,\n                        enhanced_v2: true,\n                };\n\n                try {\n                        // Use the enhanced v2 server route that streams SSE back to the client\n                        // Attach Supabase access token as Authorization header when available\n                        const { data: sessionData } = await supabase.auth.getSession();\n                        const token = sessionData?.session?.access_token;\n                        const headers: Record<string, string> = { 'Content-Type': 'application/json' };\n                        if (token) headers['Authorization'] = `Bearer ${token}`;\n\n                        // DEBUG: log payload and whether Authorization header is present\n                        try {\n                                // print lightweight info to avoid leaking secrets in logs\n                                console.log('[client] POST /api/ai/chat payload preview:', { message: payload.message, conversation_id: payload.conversation_id, user_id: payload.user_id });\n                                console.log('[client] Authorization header present:', !!headers['Authorization']);\n                        } catch (_e) { void _e; }\n\n                        const res = await fetch('/api/ai/chat', {\n                                method: 'POST',\n                                headers,\n                                body: JSON.stringify(payload),\n                        });\n\n                        if (!res.ok) {\n                                console.error('AI chat error', res.status, res.statusText);\n                                setMessages((m) => [...m, { id: String(Date.now() + 2), text: 'AI service error. Try again later.', isAI: true }]);\n                                setSending(false);\n                                return;\n                        }\n\n                        // Handle server-sent stream (text/event-stream)\n                        const reader = res.body?.getReader();\n                        if (!reader) {\n                                const json = await res.json();\n                                setMessages((m) => [...m, { id: String(Date.now() + 1), text: json.response || json.text || json.content || '', isAI: true }]);\n                                setSending(false);\n                                return;\n                        }\n\n                        const decoder = new TextDecoder();\n                        let aiText = '';\n                        while (true) {\n                                const { done, value } = await reader.read();\n                                if (done) break;\n                                const chunk = decoder.decode(value, { stream: true });\n                                // The backend streams raw chunks; try to parse \"data: ...\" lines if present\n                                const parts = chunk.split(/\\n\\n/).filter(Boolean);\n                                for (const part of parts) {\n                                        const trimmed = part.replace(/^data:\\s*/i, '').trim();\n                                        // Some servers send JSON per-event, some send raw markdown; try JSON parse\n                                        try {\n                                                const obj = JSON.parse(trimmed);\n                                                if (obj.error) {\n                                                        aiText += `\\n[Error: ${obj.error}]`;\n                                                } else if (obj.content || obj.response || obj.text) {\n                                                        aiText += (obj.content || obj.response || obj.text);\n                                                } else if (typeof obj === 'string') {\n                                                        aiText += obj;\n                                                }\n                                        } catch (_err) {\n                                                // Not JSON â€” append raw text\n                                                void _err; // satisfy linter about unused variable\n                                                aiText += trimmed;\n                                        }\n                                        // update ephemeral partial message\n                                        // replace last AI placeholder if present\n                                        setMessages((m) => {\n                                                // remove any previous streaming placeholder\n                                                const withoutPlaceholder = m.filter(mm => mm.id !== '__stream_ai');\n                                                return [...withoutPlaceholder, { id: '__stream_ai', text: aiText, isAI: true }];\n                                        });\n                                }\n                        }\n\n                        // finalize: replace streaming id with a real timestamp id\n                        setMessages((m) => m.map(mm => mm.id === '__stream_ai' ? { ...mm, id: String(Date.now() + 1) } : mm));\n                        // persist assistant message to server for the conversation, if we have an id\n                        try {\n                                const finalMsg = aiText;\n                                if (conversationId && finalMsg) {\n                                        await fetch('/api/messages', {\n                                                method: 'POST',\n                                                headers: { 'Content-Type': 'application/json' },\n                                                body: JSON.stringify({ chatId: conversationId, role: 'assistant', content: finalMsg }),\n                                        });\n                                }\n                        } catch (_err) { void _err; }\n                } catch (err: any) {\n                        console.error('Chat API error:', err);\n                        setMessages((m) => [\n                                ...m,\n                                {\n                                        id: String(Date.now() + 2),\n                                        text: 'Sorry, something went wrong with the AI response. Please try again later.',\n                                        isAI: true,\n                                },\n                        ]);\n                }\n                setSending(false);\n        };\n\n        const toggleSidebar = () => {\n                setSidebarOpen(!sidebarOpen);\n        };\n\n        const [, setLocation] = useLocation();\n\n        const navigateTo = (path: string) => {\n                setLocation(path);\n                // close the sidebar on mobile after navigation\n                setSidebarOpen(false);\n        };\n\n        // Responsive sidebar: update isDesktop on resize\n        useEffect(() => {\n                const handleResize = () => {\n                        setIsDesktop(window.innerWidth >= 768);\n                };\n                window.addEventListener('resize', handleResize);\n                // Initial check\n                setIsDesktop(window.innerWidth >= 768);\n                return () => {\n                        window.removeEventListener('resize', handleResize);\n                };\n        }, []);\n\n        // Prevent background scrolling when sidebar (mobile) is open\n        useEffect(() => {\n                if (sidebarOpen && !isDesktop) {\n                        const prev = document.body.style.overflow;\n                        document.body.style.overflow = 'hidden';\n                        return () => {\n                                document.body.style.overflow = prev || '';\n                        };\n                }\n                document.body.style.overflow = '';\n                return () => {};\n        }, [sidebarOpen, isDesktop]);\n\n                const renderMessage = (msg: any) => (\n                <div\n                        key={msg.id}\n                        className={`flex my-2 mx-4 ${msg.isAI ? 'justify-start' : 'justify-end'}`}\n                >\n                        <div\n                                className={`max-w-[85%] rounded-2xl p-4 ${msg.isAI ? 'bg-gray-100 rounded-tl-none' : 'bg-blue-600 rounded-br-none'}`}\n                        >\n                                {msg.isAI ? (\n                                        <ReactMarkdown>{msg.text}</ReactMarkdown>\n                                ) : (\n                                        <span className={`text-sm ${msg.isAI ? 'text-gray-800' : 'text-white'}`}>{msg.text}</span>\n                                )}\n                        </div>\n                </div>\n        );\n\n                return (\n                        <div className=\"flex flex-col h-screen bg-background text-foreground mobile-safe-container\">\n                        {/* Mobile Header */}\n                        <div className=\"flex items-center justify-between p-4 bg-card border-b border-border md:hidden safe-area-top\">\n                                <button onClick={toggleSidebar} className=\"p-2\">\n                                        <MobileMenuIcon />\n                                </button>\n                                <span className=\"text-lg font-bold text-foreground\">Zenux AI</span>\n                                <div className=\"w-6\" />\n                        </div>\n\n                        <div className=\"flex-1 flex flex-row bg-background\">\n                    {/* Sidebar - Hidden on mobile by default */}\n                            {(sidebarOpen || isDesktop) && (\n                                                        <div className={`absolute md:relative z-10 md:z-0 ${sidebarOpen ? 'left-0' : '-left-full'} md:left-0 inset-y-0 h-full w-64 bg-card border-r border-border flex flex-col min-h-0 md:flex transition-all duration-300 overflow-hidden`}>\n                                                {/* Sidebar Header */}\n                                                <div className=\"p-4 border-b border-border\">\n                                                        <div className=\"flex items-center justify-between\">\n                                                                <span className=\"text-lg font-bold text-card-foreground\">Zenux AI</span>\n                                                                <button className=\"md:hidden p-2\" onClick={toggleSidebar}>\n                                                                        <X size={24} className=\"text-muted-foreground\" />\n                                                                </button>\n                                                        </div>\n                                                        <button className=\"flex items-center justify-center bg-primary text-primary-foreground rounded-lg p-3 mt-4 w-full hover:bg-primary/90\">\n                                                                <Plus size={20} className=\"text-primary-foreground\" />\n                                                                <span className=\"font-semibold ml-2\">New Chat</span>\n                                                        </button>\n                                                </div>\n\n                                                {/* Stacked Horizontal Icons */}\n                                                <div className=\"grid grid-cols-4 gap-y-2 gap-x-2 p-3 border-b border-gray-200 dark:border-gray-700\">\n                                                        <button onClick={() => navigateTo('/image-video-gen')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\">\n                                                                <div className=\"w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center mb-1\">\n                                                                        <Sparkles size={20} color=\"#3B82F6\" />\n                                                                </div>\n                                                                <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Generate</span>\n                                                        </button>\n                                                        <button onClick={() => navigateTo('/credit')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\">\n                                                                <div className=\"w-10 h-10 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center mb-1\">\n                                                                        <Wallet size={20} color=\"#10B981\" />\n                                                                </div>\n                                                                <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Credit</span>\n                                                        </button>\n                                                                                <button onClick={() => navigateTo('/code-execution')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\">\n                                                                                        <div className=\"w-10 h-10 rounded-full bg-red-100 dark:bg-red-900 flex items-center justify-center mb-1\">\n                                                                                                <Code size={20} color=\"#EF4444\" />\n                                                                                        </div>\n                                                                                        <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Codez</span>\n                                                                                </button>\n                                                                                <button onClick={() => navigateTo('/project-setup')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\">\n                                                                                        <div className=\"w-10 h-10 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center mb-1\">\n                                                                                                <Layers size={20} color=\"#6366F1\" />\n                                                                                        </div>\n                                                                                        <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Projects</span>\n                                                                                </button>\n                                                        <button onClick={() => navigateTo('/settings')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\">\n                                                                <div className=\"w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center mb-1\">\n                                                                        <Settings2 size={20} color=\"#4B5563\" />\n                                                                </div>\n                                                                <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Settings</span>\n                                                        </button>\n                                                        {user ? (\n                                                                <button onClick={() => { signOut(); navigateTo('/'); }} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg w-full\">\n                                                                        <div className=\"w-10 h-10 rounded-full bg-red-100 dark:bg-red-900 flex items-center justify-center mb-1\">\n                                                                                <Trophy size={20} color=\"#EF4444\" />\n                                                                        </div>\n                                                                        <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Logout</span>\n                                                                </button>\n                                                        ) : (\n                                                                <button onClick={() => navigateTo('/login')} className=\"items-center p-2 flex flex-col hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg w-full\">\n                                                                        <div className=\"w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center mb-1\">\n                                                                                <Users size={20} color=\"#3B82F6\" />\n                                                                        </div>\n                                                                        <span className=\"text-gray-600 dark:text-gray-300 text-xs\">Login/Signup</span>\n                                                                </button>\n                                                        )}\n                                                </div>\n\n                                                {/* Chat History */}\n                                                <div className=\"flex-1 p-2 overflow-y-auto min-h-0\">\n                                                        <span className=\"text-gray-500 dark:text-gray-400 text-xs font-semibold px-2 py-2 block\">RECENT CHATS</span>\n                                                        {chatSessions && chatSessions.length > 0 ? (\n                                                                chatSessions.map((chat: ChatSession) => (\n                                                                        <button\n                                                                                key={chat.id}\n                                                                                onClick={() => { setCurrentChatId(chat.id); void loadMessagesForChat(chat.id); }}\n                                                                                className=\"flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 w-full text-left\"\n                                                                        >\n                                                                                <div className=\"w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center mr-2\">\n                                                                                        <span className=\"text-gray-600 dark:text-gray-300 font-medium\">{chat.title?.charAt(0) || '?'}</span>\n                                                                                </div>\n                                                                                <div className=\"flex-1\">\n                                                                                        <span className=\"text-gray-800 dark:text-gray-100 text-sm font-medium truncate block\">{chat.title}</span>\n                                                                                        <span className=\"text-gray-500 dark:text-gray-400 text-xs block\">{new Date(chat.lastMessageAt || chat.createdAt).toLocaleString()}</span>\n                                                                                </div>\n                                                                        </button>\n                                                                ))\n                                                        ) : (\n                                                                <div className=\"px-2 text-xs text-gray-500\">No recent chats yet. Start a conversation to create one.</div>\n                                                        )}\n                                                </div>\n\n                                                {/* Plan Section - pinned footer */}\n                                                <div className=\"flex-none p-4 border-t border-gray-200 dark:border-gray-700\">\n                                                        <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg p-3\">\n                                                                <div className=\"flex items-center justify-between\">\n                                                                        <div>\n                                                                                <span className=\"text-gray-700 dark:text-gray-200 text-sm font-medium\">Plan: Free</span>\n                                                                                <span className=\"text-gray-500 dark:text-gray-400 text-xs mt-1 block\">Upgrade for more features</span>\n                                                                        </div>\n                                                                        <button onClick={() => navigateTo('/billing')} className=\"ml-3 bg-blue-600 hover:bg-blue-700 dark:hover:bg-blue-800 text-white px-3 py-1 rounded-lg text-sm\">Upgrade</button>\n                                                                </div>\n                                                        </div>\n                                                        {/* wallet removed on user request */}\n                                                </div>\n                                        </div>\n                                )}\n\n                                {/* Main Chat Area */}\n                                <div className=\"flex-1 flex flex-col bg-gray-50 dark:bg-gray-900\">\n                                        {/* Desktop Header */}\n                                        <div className=\"hidden md:flex items-center justify-between px-6 py-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n                                                <span className=\"text-xl font-bold text-gray-800 dark:text-gray-100\">Zenux AI Chat</span>\n                                                <button onClick={() => navigateTo('/settings')} className=\"p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800\">\n                                                        <Settings2 size={20} color=\"#4B5563\" />\n                                                </button>\n                                        </div>\n\n                                                                                        {/* Messages Area */}\n                                                                                        <div className=\"flex-1 overflow-y-auto flex flex-col justify-end\">\n                                                                                                                        {messages.map(renderMessage)}\n                                                                                        </div>\n\n                                        {/* Input Area */}\n                                        <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n                                                <div className=\"flex flex-row items-end gap-2\">\n                                                        <div className=\"relative grow\">\n                                                                <div className=\"relative w-full\">\n                                                                        <button\n                                                                                className=\"absolute bottom-2 left-3 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800\"\n                                                                                type=\"button\"\n                                                                                tabIndex={-1}\n                                                                        >\n                                                                                <Paperclip size={20} color=\"#4B5563\" />\n                                                                        </button>\n                                                                        <textarea\n                                                                                ref={textareaRef}\n                                                                                className=\"w-full bg-gray-100 dark:bg-gray-700 rounded-xl py-3 pr-[90px] pl-[48px] text-gray-800 dark:text-gray-100 resize-none border-none focus:border-none focus:ring-0\"\n                                                                                placeholder=\"Message Zenux AI...\"\n                                                                                value={message}\n                                                                                onChange={e => setMessage(e.target.value)}\n                                                                                rows={1}\n                                                                                disabled={sending}\n                                                                                style={{maxHeight: '240px', minHeight: '36px', overflowY: 'auto'}}\n                                                                        />\n                                                                        <button\n                                                                                className=\"absolute bottom-2 right-16 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800\"\n                                                                                onClick={() => setIsRecording(!isRecording)}\n                                                                                type=\"button\"\n                                                                                tabIndex={-1}\n                                                                        >\n                                                                                <Mic\n                                                                                        size={20}\n                                                                                        color={isRecording ? \"#EF4444\" : \"#4B5563\"}\n                                                                                        fill={isRecording ? \"#EF4444\" : \"none\"}\n                                                                                />\n                                                                        </button>\n                                                                        <button\n                                                                                className=\"absolute bottom-2 right-3 p-2 rounded-full bg-transparent hover:bg-gray-200 dark:hover:bg-gray-800 border-none shadow-none\"\n                                                                                onClick={sendMessage}\n                                                                                disabled={sending}\n                                                                        >\n                                                                                {sending ? (\n                                                                                        <span className=\"w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin inline-block\" />\n                                                                                ) : (\n                                                                                        <Send size={20} color=\"#4B5563\" />\n                                                                                )}\n                                                                        </button>\n                                                                </div>\n                                                        </div>\n                                                </div>\n                                        </div>\n                                </div>\n                        </div>\n                </div>\n        );\n}\n","size_bytes":36729},"shared/schema.ts":{"content":"import { pgTable, text, timestamp, boolean, integer, decimal, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").unique().notNull(),\n  username: text(\"username\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"),\n  profileImage: text(\"profile_image\"),\n  phoneNumber: text(\"phone_number\"),\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  isPhoneVerified: boolean(\"is_phone_verified\").default(false),\n  credits: decimal(\"credits\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  plan: text(\"plan\").default(\"free\"), // free, premium, enterprise\n  planExpiresAt: timestamp(\"plan_expires_at\"),\n  language: text(\"language\").default(\"en\"),\n  timezone: text(\"timezone\").default(\"UTC\"),\n  preferences: json(\"preferences\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chats table\nexport const chats = pgTable(\"chats\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  isGroup: boolean(\"is_group\").default(false),\n  participants: json(\"participants\"), // array of user IDs for group chats\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: text(\"id\").primaryKey(),\n  chatId: text(\"chat_id\").references(() => chats.id).notNull(),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").notNull(), // text, image, file, voice, video\n  metadata: json(\"metadata\"),\n  encrypted: boolean(\"encrypted\").default(false),\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // credit_purchase, credit_send, credit_receive, ai_usage\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").notNull(), // pending, completed, failed, cancelled\n  description: text(\"description\"),\n  paymentMethod: text(\"payment_method\"), // paystack, stripe, manual\n  paymentReference: text(\"payment_reference\"),\n  recipientId: text(\"recipient_id\").references(() => users.id),\n  metadata: json(\"metadata\"),\n  aiValidated: boolean(\"ai_validated\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Group Wallets table\nexport const groupWallets = pgTable(\"group_wallets\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  ownerId: text(\"owner_id\").references(() => users.id).notNull(),\n  members: json(\"members\"), // array of user IDs\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  currency: text(\"currency\").default(\"USD\"),\n  isActive: boolean(\"is_active\").default(true),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Gift Credits table\nexport const giftCredits = pgTable(\"gift_credits\", {\n  id: text(\"id\").primaryKey(),\n  senderId: text(\"sender_id\").references(() => users.id).notNull(),\n  recipientId: text(\"recipient_id\").references(() => users.id),\n  recipientEmail: text(\"recipient_email\"),\n  recipientPhone: text(\"recipient_phone\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  message: text(\"message\"),\n  code: text(\"code\").unique().notNull(),\n  qrCode: text(\"qr_code\"),\n  status: text(\"status\").notNull(), // pending, claimed, expired, cancelled\n  expiresAt: timestamp(\"expires_at\"),\n  claimedAt: timestamp(\"claimed_at\"),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Usage Analytics table\nexport const usageAnalytics = pgTable(\"usage_analytics\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  feature: text(\"feature\").notNull(), // chat, image_gen, file_analysis, voice_transcription\n  usageType: text(\"usage_type\").notNull(), // tokens, requests, minutes, files\n  amount: integer(\"amount\").notNull(),\n  cost: decimal(\"cost\", { precision: 10, scale: 4 }),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Create Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertChatSchema = createInsertSchema(chats);\nexport const insertMessageSchema = createInsertSchema(messages);\nexport const insertTransactionSchema = createInsertSchema(transactions);\nexport const insertGroupWalletSchema = createInsertSchema(groupWallets);\nexport const insertGiftCreditSchema = createInsertSchema(giftCredits);\nexport const insertUsageAnalyticsSchema = createInsertSchema(usageAnalytics);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Chat = typeof chats.$inferSelect;\nexport type InsertChat = typeof chats.$inferInsert;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = typeof messages.$inferInsert;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = typeof transactions.$inferInsert;\nexport type GroupWallet = typeof groupWallets.$inferSelect;\nexport type InsertGroupWallet = typeof groupWallets.$inferInsert;\nexport type GiftCredit = typeof giftCredits.$inferSelect;\nexport type InsertGiftCredit = typeof giftCredits.$inferInsert;\nexport type UsageAnalytics = typeof usageAnalytics.$inferSelect;\nexport type InsertUsageAnalytics = typeof usageAnalytics.$inferInsert;","size_bytes":6253}},"version":1}